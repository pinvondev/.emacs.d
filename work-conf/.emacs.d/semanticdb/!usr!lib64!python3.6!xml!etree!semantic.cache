;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Lightweight XML support for Python.

 XML is an inherently hierarchical data format, and the most natural way to
 represent it is with a tree.  This module has two classes for this purpose:

    1. ElementTree represents the whole XML document as a tree and

    2. Element represents a single node in this tree.

 Interactions with the whole document (reading and writing to/from files) are
 usually done on the ElementTree level.  Interactions with a single XML element
 and its sub-elements are done on the Element level.

 Element is a flexible container object designed to store hierarchical data
 structures in memory. It can be described as a cross between a list and a
 dictionary.  Each Element has a number of properties associated with it:

    'tag' - a string containing the element's name.

    'attributes' - a Python dictionary storing the element's attributes.

    'text' - a string containing the element's text content.

    'tail' - an optional string containing text after the element's end tag.

    And a number of child elements stored in a Python sequence.

 To create an element instance, use the Element constructor,
 or the SubElement factory function.

 You can also use the ElementTree class to wrap an element structure
 and convert it to and from XML.

\"\"\"" code nil nil [1 1293])
            ("__all__" variable nil nil [3029 3429])
            ("VERSION" variable nil nil [3431 3448])
            ("sys" include nil nil [3450 3460])
            ("re" include nil nil [3461 3470])
            ("warnings" include nil nil [3471 3486])
            ("io" include nil nil [3487 3496])
            ("collections" include nil nil [3497 3515])
            ("contextlib" include nil nil [3516 3533])
            ("ElementPath" include nil nil [3542 3560])
            ("ParseError" type
               (:documentation "An error when parsing an XML document.

    In addition to its exception value, a ParseError contains
    two extra attributes:
        'code'     - the specific exception code
        'position' - the line and column of the error

    "
                :superclasses ("SyntaxError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3845 3849]))                  
                :type "class")
                nil [3563 3850])
            ("iselement" function
               (:documentation "Return True if *element* appears to be an Element."
                :arguments 
                  ( ("element" variable nil (reparse-symbol function_parameters) [3938 3945]))                  )
                nil [3924 4044])
            ("Element" type
               (:documentation "An XML element.

    This class is the reference implementation of the Element interface.

    An element's length is its number of subelements.  That means if you
    want to check if an element is truly empty, you should check BOTH
    its length AND its text attribute.

    The element tag, attribute names, and attribute values can be either
    bytes or strings.

    *tag* is the element name.  *attrib* is an optional dictionary containing
    element attributes. *extra* are additional element attributes given as
    keyword arguments.

    Example form:
        <tag attrib>text<child/>...</tag>tail

    "
                :members 
                  ( ("tag" variable nil (reparse-symbol indented_block_body) [4693 4703])
                    ("\"\"\"The element's name.\"\"\"" code nil (reparse-symbol indented_block_body) [4708 4733])
                    ("attrib" variable nil (reparse-symbol indented_block_body) [4739 4752])
                    ("\"\"\"Dictionary of the element's attributes.\"\"\"" code nil (reparse-symbol indented_block_body) [4757 4802])
                    ("text" variable nil (reparse-symbol indented_block_body) [4808 4819])
                    ("\"\"\"
    Text before first subelement. This is either a string or the value None.
    Note that if there is no text, this attribute may be either
    None or the empty string, depending on the parser.

    \"\"\"" code nil (reparse-symbol indented_block_body) [4824 5032])
                    ("tail" variable nil (reparse-symbol indented_block_body) [5038 5049])
                    ("\"\"\"
    Text after this element's end tag, but before the next sibling element's
    start tag.  This is either a string or the value None.  Note that if there
    was no text, this attribute may be either None or an empty string,
    depending on the parser.

    \"\"\"" code nil (reparse-symbol indented_block_body) [5054 5322])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5381 5521])
                            ("attrib" variable nil (reparse-symbol indented_block_body) [5529 5551])
                            ("attrib" code nil (reparse-symbol indented_block_body) [5560 5580])
                            ("self" variable nil (reparse-symbol indented_block_body) [5589 5603])
                            ("self" variable nil (reparse-symbol indented_block_body) [5612 5632])
                            ("self" variable nil (reparse-symbol indented_block_body) [5641 5660]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5341 5345])
                            ("tag" variable nil (reparse-symbol function_parameters) [5347 5350])
                            ("attrib" variable nil (reparse-symbol function_parameters) [5352 5358])
                            ("extra" variable nil (reparse-symbol function_parameters) [5363 5370]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5328 5661])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5679 5683]))                          )
                        (reparse-symbol indented_block_body) [5666 5766])
                    ("makeelement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5787 5791])
                            ("tag" variable nil (reparse-symbol function_parameters) [5793 5796])
                            ("attrib" variable nil (reparse-symbol function_parameters) [5798 5804]))                          
                        :documentation "Create a new element with the same type.

        *tag* is a string containing the element name.
        *attrib* is a dictionary containing the element attributes.

        Do not call this method, use the SubElement factory function instead.

        ")
                        (reparse-symbol indented_block_body) [5771 6118])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6132 6136]))                          
                        :documentation "Return copy of current element.

        This creates a shallow copy. Subelements will be shared with the
        original tree.

        ")
                        (reparse-symbol indented_block_body) [6123 6450])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6467 6471]))                          )
                        (reparse-symbol indented_block_body) [6455 6509])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6527 6531]))                          )
                        (reparse-symbol indented_block_body) [6514 6836])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6857 6861])
                            ("index" variable nil (reparse-symbol function_parameters) [6863 6868]))                          )
                        (reparse-symbol indented_block_body) [6841 6908])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6929 6933])
                            ("index" variable nil (reparse-symbol function_parameters) [6935 6940])
                            ("element" variable nil (reparse-symbol function_parameters) [6942 6949]))                          )
                        (reparse-symbol indented_block_body) [6913 7161])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7182 7186])
                            ("index" variable nil (reparse-symbol function_parameters) [7188 7193]))                          )
                        (reparse-symbol indented_block_body) [7166 7230])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7246 7250])
                            ("subelement" variable nil (reparse-symbol function_parameters) [7252 7262]))                          
                        :documentation "Add *subelement* to the end of this element.

        The new element will appear in document order after the last existing
        subelement (or directly after the text, if it's the first subelement),
        but before the end tag for this element.

        ")
                        (reparse-symbol indented_block_body) [7235 7627])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7643 7647])
                            ("elements" variable nil (reparse-symbol function_parameters) [7649 7657]))                          
                        :documentation "Append subelements from a sequence.

        *elements* is a sequence with zero or more elements.

        ")
                        (reparse-symbol indented_block_body) [7632 7900])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7916 7920])
                            ("index" variable nil (reparse-symbol function_parameters) [7922 7927])
                            ("subelement" variable nil (reparse-symbol function_parameters) [7929 7939]))                          
                        :documentation "Insert *subelement* at position *index*.")
                        (reparse-symbol indented_block_body) [7905 8090])
                    ("_assert_is_element" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8118 8122])
                            ("e" variable nil (reparse-symbol function_parameters) [8124 8125]))                          )
                        (reparse-symbol indented_block_body) [8095 8356])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8372 8376])
                            ("subelement" variable nil (reparse-symbol function_parameters) [8378 8388]))                          
                        :documentation "Remove matching subelement.

        Unlike the find methods, this method compares elements based on
        identity, NOT ON tag value or contents.  To remove subelements by
        other means, the easiest way is to use a list comprehension to
        select what elements to keep, and then use slice assignment to update
        the parent element.

        ValueError is raised if a matching element could not be found.

        ")
                        (reparse-symbol indented_block_body) [8361 8917])
                    ("getchildren" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8938 8942]))                          
                        :documentation "(Deprecated) Return all subelements.

        Elements are returned in document order.

        ")
                        (reparse-symbol indented_block_body) [8922 9296])
                    ("find" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9310 9314])
                            ("path" variable nil (reparse-symbol function_parameters) [9316 9320])
                            ("namespaces" variable nil (reparse-symbol function_parameters) [9322 9332]))                          
                        :documentation "Find first matching element by tag name or path.

        *path* is a string having either an element tag or an XPath,
        *namespaces* is an optional mapping from namespace prefix to full name.

        Return the first matching element, or None if no element was found.

        ")
                        (reparse-symbol indented_block_body) [9301 9696])
                    ("findtext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9714 9718])
                            ("path" variable nil (reparse-symbol function_parameters) [9720 9724])
                            ("default" variable nil (reparse-symbol function_parameters) [9726 9733])
                            ("namespaces" variable nil (reparse-symbol function_parameters) [9740 9750]))                          
                        :documentation "Find text for first matching element by tag name or path.

        *path* is a string having either an element tag or an XPath,
        *default* is the value to return if the element was not found,
        *namespaces* is an optional mapping from namespace prefix to full name.

        Return text content of first matching element, or default value if
        none was found.  Note that if an element is found having no text
        content, the empty string is returned.

        ")
                        (reparse-symbol indented_block_body) [9701 10326])
                    ("findall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10343 10347])
                            ("path" variable nil (reparse-symbol function_parameters) [10349 10353])
                            ("namespaces" variable nil (reparse-symbol function_parameters) [10355 10365]))                          
                        :documentation "Find all matching subelements by tag name or path.

        *path* is a string having either an element tag or an XPath,
        *namespaces* is an optional mapping from namespace prefix to full name.

        Returns list containing all matching elements in document order.

        ")
                        (reparse-symbol indented_block_body) [10331 10731])
                    ("iterfind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10749 10753])
                            ("path" variable nil (reparse-symbol function_parameters) [10755 10759])
                            ("namespaces" variable nil (reparse-symbol function_parameters) [10761 10771]))                          
                        :documentation "Find all matching subelements by tag name or path.

        *path* is a string having either an element tag or an XPath,
        *namespaces* is an optional mapping from namespace prefix to full name.

        Return an iterable yielding all matching elements in document order.

        ")
                        (reparse-symbol indented_block_body) [10736 11142])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11157 11161]))                          
                        :documentation "Reset element.

        This function removes all subelements, clears all attributes, and sets
        the text and tail attributes to None.

        ")
                        (reparse-symbol indented_block_body) [11147 11422])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11435 11439])
                            ("key" variable nil (reparse-symbol function_parameters) [11441 11444])
                            ("default" variable nil (reparse-symbol function_parameters) [11446 11453]))                          
                        :documentation "Get element attribute.

        Equivalent to attrib.get, but some implementations may handle this a
        bit more efficiently.  *key* is what attribute to look for, and
        *default* is what to return if the attribute was not found.

        Returns a string containing the attribute value, or the default if
        attribute was not found.

        ")
                        (reparse-symbol indented_block_body) [11427 11880])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11893 11897])
                            ("key" variable nil (reparse-symbol function_parameters) [11899 11902])
                            ("value" variable nil (reparse-symbol function_parameters) [11904 11909]))                          
                        :documentation "Set element attribute.

        Equivalent to attrib[key] = value, but some implementations may handle
        this a bit more efficiently.  *key* is what attribute to set, and
        *value* is the attribute value to set it to.

        ")
                        (reparse-symbol indented_block_body) [11885 12199])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12213 12217]))                          
                        :documentation "Get list of attribute names.

        Names are returned in an arbitrary order, just like an ordinary
        Python dict.  Equivalent to attrib.keys()

        ")
                        (reparse-symbol indented_block_body) [12204 12430])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12445 12449]))                          
                        :documentation "Get element attributes as a sequence.

        The attributes are returned in arbitrary order.  Equivalent to
        attrib.items().

        Return a list of (name, value) tuples.

        ")
                        (reparse-symbol indented_block_body) [12435 12693])
                    ("iter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12707 12711])
                            ("tag" variable nil (reparse-symbol function_parameters) [12713 12716]))                          
                        :documentation "Create tree iterator.

        The iterator loops over the element and all subelements in document
        order, returning all elements with a matching tag.

        If the tree structure is modified during iteration, new or removed
        elements may or may not be included.  To get a stable set, use the
        list() function on the iterator, and loop over the resulting list.

        *tag* is what tags to look for (default is to return all elements)

        Return an iterator containing all the matching elements.

        ")
                        (reparse-symbol indented_block_body) [12698 13454])
                    ("getiterator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13495 13499])
                            ("tag" variable nil (reparse-symbol function_parameters) [13501 13504]))                          )
                        (reparse-symbol indented_block_body) [13479 13811])
                    ("itertext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13829 13833]))                          
                        :documentation "Create text iterator.

        The iterator loops over the element and all subelements in document
        order, returning all inner text.

        ")
                        (reparse-symbol indented_block_body) [13816 14279]))                  
                :type "class")
                nil [4046 14279])
            ("SubElement" function
               (:documentation "Subelement factory which creates an element instance, and appends it
    to an existing parent.

    The element tag, attribute names, and attribute values can be either
    bytes or Unicode strings.

    *parent* is the parent element, *tag* is the subelements name, *attrib* is
    an optional directory containing element attributes, *extra* are
    additional attributes given as keyword arguments.

    "
                :arguments 
                  ( ("parent" variable nil (reparse-symbol function_parameters) [14296 14302])
                    ("tag" variable nil (reparse-symbol function_parameters) [14304 14307])
                    ("attrib" variable nil (reparse-symbol function_parameters) [14309 14315])
                    ("extra" variable nil (reparse-symbol function_parameters) [14320 14327]))                  )
                nil [14281 14893])
            ("Comment" function
               (:documentation "Comment element factory.

    This function creates a special element which the standard serializer
    serializes as an XML comment.

    *text* is a string containing the comment string.

    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [14907 14911]))                  )
                nil [14895 15198])
            ("ProcessingInstruction" function
               (:documentation "Processing Instruction element factory.

    This function creates a special element which the standard serializer
    serializes as an XML comment.

    *target* is a string containing the processing instruction, *text* is a
    string containing the processing instruction contents, if any.

    "
                :arguments 
                  ( ("target" variable nil (reparse-symbol function_parameters) [15226 15232])
                    ("text" variable nil (reparse-symbol function_parameters) [15234 15238]))                  )
                nil [15200 15707])
            ("PI" variable nil nil [15708 15734])
            ("QName" type
               (:documentation "Qualified name wrapper.

    This class can be used to wrap a QName attribute value in order to get
    proper namespace handing on output.

    *text_or_uri* is a string containing the QName value either in the form
    {uri}local, or if the tag argument is given, the URI part of a QName.

    *tag* is an optional argument which if given, will make the first
    argument (text_or_uri) be interpreted as a URI, and this argument (tag)
    be interpreted as a local name.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [16295 16359])
                            ("self" variable nil (reparse-symbol indented_block_body) [16367 16390]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16257 16261])
                            ("text_or_uri" variable nil (reparse-symbol function_parameters) [16263 16274])
                            ("tag" variable nil (reparse-symbol function_parameters) [16276 16279]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16244 16391])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16407 16411]))                          )
                        (reparse-symbol indented_block_body) [16395 16439])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16456 16460]))                          )
                        (reparse-symbol indented_block_body) [16443 16527])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16544 16548]))                          )
                        (reparse-symbol indented_block_body) [16531 16582])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16597 16601])
                            ("other" variable nil (reparse-symbol function_parameters) [16603 16608]))                          )
                        (reparse-symbol indented_block_body) [16586 16725])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16740 16744])
                            ("other" variable nil (reparse-symbol function_parameters) [16746 16751]))                          )
                        (reparse-symbol indented_block_body) [16729 16866])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16881 16885])
                            ("other" variable nil (reparse-symbol function_parameters) [16887 16892]))                          )
                        (reparse-symbol indented_block_body) [16870 17009])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17024 17028])
                            ("other" variable nil (reparse-symbol function_parameters) [17030 17035]))                          )
                        (reparse-symbol indented_block_body) [17013 17150])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17165 17169])
                            ("other" variable nil (reparse-symbol function_parameters) [17171 17176]))                          )
                        (reparse-symbol indented_block_body) [17154 17293]))                  
                :type "class")
                nil [15737 17293])
            ("ElementTree" type
               (:documentation "An XML element hierarchy.

    This class also provides support for serialization to and from
    standard XML.

    *element* is an optional root element node,
    *file* is an optional file handle or file name of an XML file whose
    contents will be used to initialize the tree with.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [17802 17822])
                            ("if" code nil (reparse-symbol indented_block_body) [17844 17882]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17707 17711])
                            ("element" variable nil (reparse-symbol function_parameters) [17713 17720])
                            ("file" variable nil (reparse-symbol function_parameters) [17727 17731]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17694 17882])
                    ("getroot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17899 17903]))                          
                        :documentation "Return root element of this tree.")
                        (reparse-symbol indented_block_body) [17887 17980])
                    ("_setroot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17998 18002])
                            ("element" variable nil (reparse-symbol function_parameters) [18004 18011]))                          
                        :documentation "Replace root element of this tree.

        This will discard the current contents of the tree and replace it
        with the given element.  Use with care!

        ")
                        (reparse-symbol indented_block_body) [17985 18261])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18276 18280])
                            ("source" variable nil (reparse-symbol function_parameters) [18282 18288])
                            ("parser" variable nil (reparse-symbol function_parameters) [18290 18296]))                          
                        :documentation "Load external XML document into element tree.

        *source* is a file name or file object, *parser* is an optional parser
        instance that defaults to XMLParser.

        ParseError is raised if the parser fails to parse the document.

        Returns the root element of the given source document.

        ")
                        (reparse-symbol indented_block_body) [18266 19659])
                    ("iter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19673 19677])
                            ("tag" variable nil (reparse-symbol function_parameters) [19679 19682]))                          
                        :documentation "Create and return tree iterator for the root element.

        The iterator loops over all elements in this tree, in document order.

        *tag* is a string with the tag name to iterate over
        (default is to return all elements).

        ")
                        (reparse-symbol indented_block_body) [19664 20029])
                    ("getiterator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20070 20074])
                            ("tag" variable nil (reparse-symbol function_parameters) [20076 20079]))                          )
                        (reparse-symbol indented_block_body) [20054 20386])
                    ("find" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20400 20404])
                            ("path" variable nil (reparse-symbol function_parameters) [20406 20410])
                            ("namespaces" variable nil (reparse-symbol function_parameters) [20412 20422]))                          
                        :documentation "Find first matching element by tag name or path.

        Same as getroot().find(path), which is Element.find()

        *path* is a string having either an element tag or an XPath,
        *namespaces* is an optional mapping from namespace prefix to full name.

        Return the first matching element, or None if no element was found.

        ")
                        (reparse-symbol indented_block_body) [20391 21229])
                    ("findtext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21247 21251])
                            ("path" variable nil (reparse-symbol function_parameters) [21253 21257])
                            ("default" variable nil (reparse-symbol function_parameters) [21259 21266])
                            ("namespaces" variable nil (reparse-symbol function_parameters) [21273 21283]))                          
                        :documentation "Find first matching element by tag name or path.

        Same as getroot().findtext(path),  which is Element.findtext()

        *path* is a string having either an element tag or an XPath,
        *namespaces* is an optional mapping from namespace prefix to full name.

        Return the first matching element, or None if no element was found.

        ")
                        (reparse-symbol indented_block_body) [21234 22112])
                    ("findall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22129 22133])
                            ("path" variable nil (reparse-symbol function_parameters) [22135 22139])
                            ("namespaces" variable nil (reparse-symbol function_parameters) [22141 22151]))                          
                        :documentation "Find all matching subelements by tag name or path.

        Same as getroot().findall(path), which is Element.findall().

        *path* is a string having either an element tag or an XPath,
        *namespaces* is an optional mapping from namespace prefix to full name.

        Return list containing all matching elements in document order.

        ")
                        (reparse-symbol indented_block_body) [22117 22966])
                    ("iterfind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22984 22988])
                            ("path" variable nil (reparse-symbol function_parameters) [22990 22994])
                            ("namespaces" variable nil (reparse-symbol function_parameters) [22996 23006]))                          
                        :documentation "Find all matching subelements by tag name or path.

        Same as getroot().iterfind(path), which is element.iterfind()

        *path* is a string having either an element tag or an XPath,
        *namespaces* is an optional mapping from namespace prefix to full name.

        Return an iterable yielding all matching elements in document order.

        ")
                        (reparse-symbol indented_block_body) [22971 23828])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23843 23847])
                            ("file_or_filename" variable nil (reparse-symbol function_parameters) [23849 23865])
                            ("encoding" variable nil (reparse-symbol function_parameters) [23881 23889])
                            ("xml_declaration" variable nil (reparse-symbol function_parameters) [23910 23925])
                            ("default_namespace" variable nil (reparse-symbol function_parameters) [23946 23963])
                            ("method" variable nil (reparse-symbol function_parameters) [23984 23990])
                            ("short_empty_elements" variable nil (reparse-symbol function_parameters) [24014 24034]))                          
                        :documentation "Write element tree to a file as XML.

        Arguments:
          *file_or_filename* -- file name or a file object opened for writing

          *encoding* -- the output encoding (default: US-ASCII)

          *xml_declaration* -- bool indicating if an XML declaration should be
                               added to the output. If None, an XML declaration
                               is added if encoding IS NOT either of:
                               US-ASCII, UTF-8, or Unicode

          *default_namespace* -- sets the default XML namespace (for \"xmlns\")

          *method* -- either \"xml\" (default), \"html, \"text\", or \"c14n\"

          *short_empty_elements* -- controls the formatting of elements
                                    that contain no content. If True (default)
                                    they are emitted as a single self-closed
                                    tag, otherwise they are emitted as a pair
                                    of start/end tags

        ")
                        (reparse-symbol indented_block_body) [23833 26381])
                    ("write_c14n" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26401 26405])
                            ("file" variable nil (reparse-symbol function_parameters) [26407 26411]))                          )
                        (reparse-symbol indented_block_body) [26386 26524]))                  
                :type "class")
                nil [17367 26524])
            ("_get_writer" function
               (:decorators 
                  ( ("contextlib.contextmanager" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("file_or_filename" variable nil (reparse-symbol function_parameters) [26664 26680])
                    ("encoding" variable nil (reparse-symbol function_parameters) [26682 26690]))                  )
                nil [26621 28937])
            ("_namespaces" function (:arguments 
              ( ("elem" variable nil (reparse-symbol function_parameters) [28954 28958])
                ("default_namespace" variable nil (reparse-symbol function_parameters) [28960 28977]))              ) nil [28938 31148])
            ("_serialize_xml" function (:arguments 
              ( ("write" variable nil (reparse-symbol function_parameters) [31168 31173])
                ("elem" variable nil (reparse-symbol function_parameters) [31175 31179])
                ("qnames" variable nil (reparse-symbol function_parameters) [31181 31187])
                ("namespaces" variable nil (reparse-symbol function_parameters) [31189 31199])
                ("short_empty_elements" variable nil (reparse-symbol function_parameters) [31220 31240])
                ("kwargs" variable nil (reparse-symbol function_parameters) [31242 31250]))              ) nil [31149 33047])
            ("HTML_EMPTY" variable nil nil [33048 33183])
            ("try" code nil nil [33185 33250])
            ("_serialize_html" function (:arguments 
              ( ("write" variable nil (reparse-symbol function_parameters) [33271 33276])
                ("elem" variable nil (reparse-symbol function_parameters) [33278 33282])
                ("qnames" variable nil (reparse-symbol function_parameters) [33284 33290])
                ("namespaces" variable nil (reparse-symbol function_parameters) [33292 33302])
                ("kwargs" variable nil (reparse-symbol function_parameters) [33304 33312]))              ) nil [33251 35104])
            ("_serialize_text" function (:arguments 
              ( ("write" variable nil (reparse-symbol function_parameters) [35125 35130])
                ("elem" variable nil (reparse-symbol function_parameters) [35132 35136]))              ) nil [35105 35235])
            ("_serialize" variable nil nil [35236 35426])
            ("register_namespace" function
               (:documentation "Register a namespace prefix.

    The registry is global, and any existing mapping for either the
    given prefix or the namespace URI will be removed.

    *prefix* is the namespace prefix, *uri* is a namespace uri. Tags and
    attributes in this namespace will be serialized with prefix if possible.

    ValueError is raised if prefix is reserved or is invalid.

    "
                :arguments 
                  ( ("prefix" variable nil (reparse-symbol function_parameters) [35452 35458])
                    ("uri" variable nil (reparse-symbol function_parameters) [35460 35463]))                  )
                nil [35429 36102])
            ("_namespace_map" variable nil nil [36103 36545])
            ("register_namespace" variable nil nil [36578 36628])
            ("_raise_serialization_error" function (:arguments 
              ( ("text" variable nil (reparse-symbol function_parameters) [36661 36665]))              ) nil [36630 36769])
            ("_escape_cdata" function (:arguments 
              ( ("text" variable nil (reparse-symbol function_parameters) [36788 36792]))              ) nil [36770 37332])
            ("_escape_attrib" function (:arguments 
              ( ("text" variable nil (reparse-symbol function_parameters) [37352 37356]))              ) nil [37333 38354])
            ("_escape_attrib_html" function (:arguments 
              ( ("text" variable nil (reparse-symbol function_parameters) [38379 38383]))              ) nil [38355 38737])
            ("tostring" function
               (:documentation "Generate string representation of XML element.

    All subelements are included.  If encoding is \"unicode\", a string
    is returned. Otherwise a bytestring is returned.

    *element* is an Element instance, *encoding* is an optional output
    encoding defaulting to US-ASCII, *method* is an optional output which can
    be one of \"xml\" (default), \"html\", \"text\" or \"c14n\".

    Returns an (optionally) encoded string containing the XML data.

    "
                :arguments 
                  ( ("element" variable nil (reparse-symbol function_parameters) [38823 38830])
                    ("encoding" variable nil (reparse-symbol function_parameters) [38832 38840])
                    ("method" variable nil (reparse-symbol function_parameters) [38847 38853])
                    ("short_empty_elements" variable nil (reparse-symbol function_parameters) [38876 38896]))                  )
                nil [38810 39604])
            ("_ListDataStream" type
               (:documentation "An auxiliary stream accumulating into a list reference."
                :superclasses ("io.BufferedIOBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [39750 39764]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39730 39734])
                            ("lst" variable nil (reparse-symbol function_parameters) [39736 39739]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39717 39765])
                    ("writable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39783 39787]))                          )
                        (reparse-symbol indented_block_body) [39770 39810])
                    ("seekable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39828 39832]))                          )
                        (reparse-symbol indented_block_body) [39815 39855])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39870 39874])
                            ("b" variable nil (reparse-symbol function_parameters) [39876 39877]))                          )
                        (reparse-symbol indented_block_body) [39860 39907])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39921 39925]))                          )
                        (reparse-symbol indented_block_body) [39912 39957]))                  
                :type "class")
                nil [39605 39957])
            ("tostringlist" function (:arguments 
              ( ("element" variable nil (reparse-symbol function_parameters) [39975 39982])
                ("encoding" variable nil (reparse-symbol function_parameters) [39984 39992])
                ("method" variable nil (reparse-symbol function_parameters) [39999 40005])
                ("short_empty_elements" variable nil (reparse-symbol function_parameters) [40032 40052]))              ) nil [39958 40260])
            ("dump" function
               (:documentation "Write element tree or element structure to sys.stdout.

    This function should be used for debugging only.

    *elem* is either an ElementTree, or a single Element.  The exact output
    format is implementation dependent.  In this version, it's written as an
    ordinary XML file.

    "
                :arguments 
                  ( ("elem" variable nil (reparse-symbol function_parameters) [40271 40275]))                  )
                nil [40262 40817])
            ("parse" function
               (:documentation "Parse XML document into element tree.

    *source* is a filename or file object containing XML data,
    *parser* is an optional parser instance defaulting to XMLParser.

    Return an ElementTree instance.

    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [40911 40917])
                    ("parser" variable nil (reparse-symbol function_parameters) [40919 40925]))                  )
                nil [40901 41229])
            ("iterparse" function
               (:documentation "Incrementally parse XML document into ElementTree.

    This class also reports what's going on to the user based on the
    *events* it is initialized with.  The supported events are the strings
    \"start\", \"end\", \"start-ns\" and \"end-ns\" (the \"ns\" events are used to get
    detailed namespace information).  If *events* is omitted, only
    \"end\" events are reported.

    *source* is a filename or file object containing XML data, *events* is
    a list of events to report back, *parser* is an optional parser instance.

    Returns an iterator providing (event, elem) pairs.

    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [41245 41251])
                    ("events" variable nil (reparse-symbol function_parameters) [41253 41259])
                    ("parser" variable nil (reparse-symbol function_parameters) [41266 41272]))                  )
                nil [41231 42885])
            ("XMLPullParser" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43186 43226])
                            ("self" code nil (reparse-symbol indented_block_body) [43235 43292])
                            ("if" code nil (reparse-symbol indented_block_body) [43350 43399])
                            ("self" code nil (reparse-symbol indented_block_body) [43407 43458]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42926 42930])
                            ("events" variable nil (reparse-symbol function_parameters) [42932 42938])
                            ("_parser" variable nil (reparse-symbol function_parameters) [42948 42955]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42913 43459])
                    ("feed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43473 43477])
                            ("data" variable nil (reparse-symbol function_parameters) [43479 43483]))                          
                        :documentation "Feed encoded data to parser.")
                        (reparse-symbol indented_block_body) [43464 43788])
                    ("_close_and_return_root" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43820 43824]))                          )
                        (reparse-symbol indented_block_body) [43793 43980])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43995 43999]))                          
                        :documentation "Finish feeding data to parser.

        Unlike XMLParser, does not return the root element. Use
        read_events() to consume elements from XMLPullParser.
        ")
                        (reparse-symbol indented_block_body) [43985 44221])
                    ("read_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44242 44246]))                          
                        :documentation "Return an iterator over currently available (event, elem) pairs.

        Events are consumed from the internal event queue as they are
        retrieved from the iterator.
        ")
                        (reparse-symbol indented_block_body) [44226 44659]))                  
                :type "class")
                nil [42887 44659])
            ("XML" function
               (:documentation "Parse XML document from string constant.

    This function can be used to embed \"XML Literals\" in Python code.

    *text* is a string containing XML data, *parser* is an
    optional parser instance, defaulting to the standard XMLParser.

    Returns an Element instance.

    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [44669 44673])
                    ("parser" variable nil (reparse-symbol function_parameters) [44675 44681]))                  )
                nil [44661 45095])
            ("XMLID" function
               (:documentation "Parse XML document from string constant for its IDs.

    *text* is a string containing XML data, *parser* is an
    optional parser instance, defaulting to the standard XMLParser.

    Returns an (Element, dict) tuple, in which the
    dict maps element id:s to elements.

    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [45107 45111])
                    ("parser" variable nil (reparse-symbol function_parameters) [45113 45119]))                  )
                nil [45097 45665])
            ("fromstring" variable nil nil [45727 45743])
            ("fromstringlist" function
               (:documentation "Parse XML document from sequence of string fragments.

    *sequence* is a list of other sequence, *parser* is an optional parser
    instance, defaulting to the standard XMLParser.

    Returns an Element instance.

    "
                :arguments 
                  ( ("sequence" variable nil (reparse-symbol function_parameters) [45764 45772])
                    ("parser" variable nil (reparse-symbol function_parameters) [45774 45780]))                  )
                nil [45745 46166])
            ("TreeBuilder" type
               (:documentation "Generic element structure builder.

    This builder converts a sequence of start, data, and end method
    calls to a well-formed element structure.

    You can use this class to build an element structure using a custom XML
    parser, or a parser for some other XML-like format.

    *element_factory* is an optional element factory which is called
    to create new Element instances, as necessary.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [46733 46748])
                            ("self" variable nil (reparse-symbol indented_block_body) [46774 46789])
                            ("self" variable nil (reparse-symbol indented_block_body) [46814 46831])
                            ("self" variable nil (reparse-symbol indented_block_body) [46855 46872])
                            ("if" code nil (reparse-symbol indented_block_body) [46914 46980])
                            ("self" variable nil (reparse-symbol indented_block_body) [46988 47019]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46696 46700])
                            ("element_factory" variable nil (reparse-symbol function_parameters) [46702 46717]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46683 47020])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47035 47039]))                          
                        :documentation "Flush builder buffers and return toplevel document Element.")
                        (reparse-symbol indented_block_body) [47025 47264])
                    ("_flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47280 47284]))                          )
                        (reparse-symbol indented_block_body) [47269 47711])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47725 47729])
                            ("data" variable nil (reparse-symbol function_parameters) [47731 47735]))                          
                        :documentation "Add text to current element.")
                        (reparse-symbol indented_block_body) [47716 47813])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47828 47832])
                            ("tag" variable nil (reparse-symbol function_parameters) [47834 47837])
                            ("attrs" variable nil (reparse-symbol function_parameters) [47839 47844]))                          
                        :documentation "Open new element and return it.

        *tag* is the element name, *attrs* is a dict containing element
        attributes.

        ")
                        (reparse-symbol indented_block_body) [47818 48210])
                    ("end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48223 48227])
                            ("tag" variable nil (reparse-symbol function_parameters) [48229 48232]))                          
                        :documentation "Close and return current Element.

        *tag* is the element name.

        ")
                        (reparse-symbol indented_block_body) [48215 48577]))                  
                :type "class")
                nil [46240 48577])
            ("XMLParser" type
               (:documentation "Element structure builder for XML source data based on the expat parser.

    *html* are predefined HTML entities (deprecated and not supported),
    *target* is an optional target object which defaults to an instance of the
    standard TreeBuilder class, *encoding* is an optional encoding string
    which if given, overrides the encoding specified in the XML file:
    http://www.iana.org/assignments/character-sets

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("try" code nil (reparse-symbol indented_block_body) [49140 49439])
                            ("parser" variable nil (reparse-symbol indented_block_body) [49447 49489])
                            ("if" code nil (reparse-symbol indented_block_body) [49498 49552])
                            ("self" variable nil (reparse-symbol indented_block_body) [49624 49659])
                            ("self" variable nil (reparse-symbol indented_block_body) [49668 49703])
                            ("self" variable nil (reparse-symbol indented_block_body) [49712 49737])
                            ("self" variable nil (reparse-symbol indented_block_body) [49746 49762])
                            ("parser" variable nil (reparse-symbol indented_block_body) [49814 49857])
                            ("if" code nil (reparse-symbol indented_block_body) [49866 49948])
                            ("if" code nil (reparse-symbol indented_block_body) [49956 50032])
                            ("if" code nil (reparse-symbol indented_block_body) [50040 50122])
                            ("if" code nil (reparse-symbol indented_block_body) [50164 50246])
                            ("if" code nil (reparse-symbol indented_block_body) [50254 50340])
                            ("parser" variable nil (reparse-symbol indented_block_body) [50418 50440])
                            ("parser" variable nil (reparse-symbol indented_block_body) [50449 50478])
                            ("parser" variable nil (reparse-symbol indented_block_body) [50487 50518])
                            ("self" variable nil (reparse-symbol indented_block_body) [50527 50547])
                            ("self" variable nil (reparse-symbol indented_block_body) [50556 50572])
                            ("try" code nil (reparse-symbol indented_block_body) [50581 50709]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49089 49093])
                            ("html" variable nil (reparse-symbol function_parameters) [49095 49099])
                            ("target" variable nil (reparse-symbol function_parameters) [49103 49109])
                            ("encoding" variable nil (reparse-symbol function_parameters) [49116 49124]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49076 50709])
                    ("_setevents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50729 50733])
                            ("events_queue" variable nil (reparse-symbol function_parameters) [50735 50747])
                            ("events_to_report" variable nil (reparse-symbol function_parameters) [50749 50765]))                          )
                        (reparse-symbol indented_block_body) [50714 52327])
                    ("_raiseerror" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52348 52352])
                            ("value" variable nil (reparse-symbol function_parameters) [52354 52359]))                          )
                        (reparse-symbol indented_block_body) [52332 52492])
                    ("_fixname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52510 52514])
                            ("key" variable nil (reparse-symbol function_parameters) [52516 52519]))                          )
                        (reparse-symbol indented_block_body) [52497 52807])
                    ("_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52823 52827])
                            ("tag" variable nil (reparse-symbol function_parameters) [52829 52832])
                            ("attr_list" variable nil (reparse-symbol function_parameters) [52834 52843]))                          )
                        (reparse-symbol indented_block_body) [52812 53285])
                    ("_end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53299 53303])
                            ("tag" variable nil (reparse-symbol function_parameters) [53305 53308]))                          )
                        (reparse-symbol indented_block_body) [53290 53362])
                    ("_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53380 53384])
                            ("text" variable nil (reparse-symbol function_parameters) [53386 53390]))                          )
                        (reparse-symbol indented_block_body) [53367 55458])
                    ("doctype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55475 55479])
                            ("name" variable nil (reparse-symbol function_parameters) [55481 55485])
                            ("pubid" variable nil (reparse-symbol function_parameters) [55487 55492])
                            ("system" variable nil (reparse-symbol function_parameters) [55494 55500]))                          
                        :documentation "(Deprecated)  Handle doctype declaration

        *name* is the Doctype name, *pubid* is the public identifier,
        and *system* is the system identifier.

        ")
                        (reparse-symbol indented_block_body) [55463 55877])
                    ("__doctype" variable nil (reparse-symbol indented_block_body) [55936 55955])
                    ("feed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55970 55974])
                            ("data" variable nil (reparse-symbol function_parameters) [55976 55980]))                          
                        :documentation "Feed encoded data to parser.")
                        (reparse-symbol indented_block_body) [55961 56143])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56158 56162]))                          
                        :documentation "Finish feeding data to parser and return element structure.")
                        (reparse-symbol indented_block_body) [56148 56670]))                  
                :type "class")
                nil [48618 56670])
            ("try" code nil nil [56700 57030]))          
      :file "ElementTree.py"
      :pointmax 57030
      :fsize 57029
      :lastmodtime '(23890 21630 393000 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("re" include nil nil [2319 2328])
            ("xpath_tokenizer_re" variable nil nil [2330 2532])
            ("xpath_tokenizer" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [2554 2561])
                ("namespaces" variable nil (reparse-symbol function_parameters) [2563 2573]))              ) nil [2534 3058])
            ("get_parent_map" function (:arguments 
              ( ("context" variable nil (reparse-symbol function_parameters) [3078 3085]))              ) nil [3059 3314])
            ("prepare_child" function (:arguments 
              ( ("next" variable nil (reparse-symbol function_parameters) [3333 3337])
                ("token" variable nil (reparse-symbol function_parameters) [3339 3344]))              ) nil [3315 3533])
            ("prepare_star" function (:arguments 
              ( ("next" variable nil (reparse-symbol function_parameters) [3551 3555])
                ("token" variable nil (reparse-symbol function_parameters) [3557 3562]))              ) nil [3534 3672])
            ("prepare_self" function (:arguments 
              ( ("next" variable nil (reparse-symbol function_parameters) [3690 3694])
                ("token" variable nil (reparse-symbol function_parameters) [3696 3701]))              ) nil [3673 3781])
            ("prepare_descendant" function (:arguments 
              ( ("next" variable nil (reparse-symbol function_parameters) [3805 3809])
                ("token" variable nil (reparse-symbol function_parameters) [3811 3816]))              ) nil [3782 4216])
            ("prepare_parent" function (:arguments 
              ( ("next" variable nil (reparse-symbol function_parameters) [4236 4240])
                ("token" variable nil (reparse-symbol function_parameters) [4242 4247]))              ) nil [4217 4658])
            ("prepare_predicate" function (:arguments 
              ( ("next" variable nil (reparse-symbol function_parameters) [4681 4685])
                ("token" variable nil (reparse-symbol function_parameters) [4687 4692]))              ) nil [4659 7804])
            ("ops" variable nil nil [7805 7971])
            ("_cache" variable nil nil [7973 7984])
            ("_SelectorContext" type
               (:members 
                  ( ("parent_map" variable nil (reparse-symbol indented_block_body) [8014 8031])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8070 8086]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8049 8053])
                            ("root" variable nil (reparse-symbol function_parameters) [8055 8059]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8036 8087]))                  
                :type "class")
                nil [7986 8087])
            ("iterfind" function (:arguments 
              ( ("elem" variable nil (reparse-symbol function_parameters) [8210 8214])
                ("path" variable nil (reparse-symbol function_parameters) [8216 8220])
                ("namespaces" variable nil (reparse-symbol function_parameters) [8222 8232]))              ) nil [8197 9436])
            ("find" function (:arguments 
              ( ("elem" variable nil (reparse-symbol function_parameters) [9480 9484])
                ("path" variable nil (reparse-symbol function_parameters) [9486 9490])
                ("namespaces" variable nil (reparse-symbol function_parameters) [9492 9502]))              ) nil [9471 9566])
            ("findall" function (:arguments 
              ( ("elem" variable nil (reparse-symbol function_parameters) [9612 9616])
                ("path" variable nil (reparse-symbol function_parameters) [9618 9622])
                ("namespaces" variable nil (reparse-symbol function_parameters) [9624 9634]))              ) nil [9600 9692])
            ("findtext" function (:arguments 
              ( ("elem" variable nil (reparse-symbol function_parameters) [9749 9753])
                ("path" variable nil (reparse-symbol function_parameters) [9755 9759])
                ("default" variable nil (reparse-symbol function_parameters) [9761 9768])
                ("namespaces" variable nil (reparse-symbol function_parameters) [9775 9785]))              ) nil [9736 9936]))          
      :file "ElementPath.py"
      :pointmax 9936
      :fsize 9935
      :lastmodtime '(23346 52934 0 0)
      :unmatched-syntax '((YIELD 3745 . 3750) (FROM 3751 . 3755) (NEWLINE 3762 . 3763) (YIELD 3638 . 3643) (FROM 3644 . 3648) (NEWLINE 3653 . 3654))))
  :file "!usr!lib64!python3.6!xml!etree!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
