;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This program is a simple client.
Available commands and parameters are derived from the schema: api.yml
\"\"\"" code nil nil [52 163])
            ("sys" include nil nil [165 175])
            ("argparse" include nil nil [176 191])
            ("os" include nil nil [192 201])
            ("json" include nil nil [202 213])
            ("yaml" include nil nil [214 225])
            ("six" include nil nil [226 236])
            ("re" include nil nil [237 246])
            ("emei.framework.client" include nil nil [248 290])
            ("SchemaNotFound" type
               (:documentation " Raise when yml file not found"
                :superclasses ("Exception")
                :type "class")
                nil [293 367])
            ("UsageError" type
               (:documentation " Raised when usage is wrong "
                :superclasses ("Exception")
                :type "class")
                nil [369 437])
            ("_convert_type" function
               (:documentation "转换 int, float, str 类型"
                :arguments 
                  ( ("type_str" variable nil (reparse-symbol function_parameters) [457 465])
                    ("value" variable nil (reparse-symbol function_parameters) [467 472]))                  )
                nil [439 633])
            ("_parse_dict" function (:arguments 
              ( ("namespaces" variable nil (reparse-symbol function_parameters) [651 661])
                ("namespace" variable nil (reparse-symbol function_parameters) [663 672])
                ("name" variable nil (reparse-symbol function_parameters) [674 678])
                ("value" variable nil (reparse-symbol function_parameters) [680 685]))              ) nil [635 1119])
            ("_parse_args" function (:arguments 
              ( ("namespaces" variable nil (reparse-symbol function_parameters) [1137 1147])
                ("namespace" variable nil (reparse-symbol function_parameters) [1149 1158]))              ) nil [1121 1960])
            ("main" function (:documentation "
    Extract parameters and call rpc interface.
    ") nil [1962 5253])
            ("_parse_file" function
               (:documentation "
    Parse parameters from json file.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [5271 5279]))                  )
                nil [5255 5601])
            ("_get_schema" function (:documentation "
    Load information about api from api.yml.
    ") nil [5603 5888])
            ("_add_command_arguments" function
               (:documentation "
    Show parameters in terminal.
    "
                :arguments 
                  ( ("namespaces" variable nil (reparse-symbol function_parameters) [5917 5927])
                    ("subparsers" variable nil (reparse-symbol function_parameters) [5929 5939]))                  )
                nil [5890 7487])
            ("_get_type" function (:arguments 
              ( ("namespaces" variable nil (reparse-symbol function_parameters) [7502 7512])
                ("namespace" variable nil (reparse-symbol function_parameters) [7514 7523])
                ("argument" variable nil (reparse-symbol function_parameters) [7525 7533]))              ) nil [7488 7862])
            ("_create_namespaces" function
               (:documentation "
    Create namespaces from config file.
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [7887 7891]))                  )
                nil [7864 8717])
            ("if" code nil nil [8719 8757]))          
      :file "cli.py"
      :pointmax 8757
      :fsize 8764
      :lastmodtime '(23940 27965 71941 187000)
      :unmatched-syntax nil))
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuan!client!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
