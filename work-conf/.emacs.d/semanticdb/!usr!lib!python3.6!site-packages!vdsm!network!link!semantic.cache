;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-automake-mode
      :tags 
        '( ("SUBDIRS" variable (:default-value ("bond")) nil [813 828])
            ("$(top_srcdir)/build-aux/Makefile.subs" include nil nil [829 875])
            ("vdsmnetworklinkdir" variable (:default-value ("$(vdsmpylibdir)/network/link")) nil [876 926])
            ("dist_vdsmnetworklink_PYTHON" variable (:default-value ("$(srcdir)/*.py")) nil [926 971]))          
      :file "Makefile.am"
      :pointmax 971
      :fsize 970
      :lastmodtime '(23968 6112 197983 228000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [819 857])
            ("__future__" include nil nil [858 889])
            ("logging" include nil nil [923 937])
            ("os" include nil nil [938 947])
            ("six" include nil nil [949 959])
            ("vdsm.network" include nil nil [961 1004])
            ("vdsm.network.netlink" include nil nil [1005 1045])
            ("iface" include nil nil [1059 1071])
            ("DRIVERS_PATH" variable nil nil [1074 1112])
            ("_SYSFS_SRIOV_NUMVFS" variable nil nil [1113 1173])
            ("ZERO_PCI_ADDRESS" variable nil nil [1174 1207])
            ("update_numvfs" function
               (:documentation "pci_path is a string looking similar to \"0000:00:19.0\"
    "
                :arguments 
                  ( ("pci_path" variable nil (reparse-symbol function_parameters) [1228 1236])
                    ("numvfs" variable nil (reparse-symbol function_parameters) [1238 1244]))                  )
                nil [1210 2417])
            ("persist_numvfs" function (:arguments 
              ( ("device_name" variable nil (reparse-symbol function_parameters) [2438 2449])
                ("numvfs" variable nil (reparse-symbol function_parameters) [2451 2457]))              ) nil [2419 2616])
            ("_set_valid_vf_macs" function
               (:documentation "
        some drivers forbid resetting VF MAC address back to 00:00:00:00:00:00,
        which was its original value. By setting the MAC addresses to a valid
        value, upon restoration the valid address will be accepted.

        The drivers and their BZ's:
        1) igb: https://bugzilla.redhat.com/1341248
        2) ixgbe: https://bugzilla.redhat.com/1415609

        Once resolved, this method and its accompanying methods should
        be removed.
    "
                :arguments 
                  ( ("pci_path" variable nil (reparse-symbol function_parameters) [2641 2649])
                    ("numvfs" variable nil (reparse-symbol function_parameters) [2651 2657]))                  )
                nil [2618 3230])
            ("_is_zeromac_limited_driver" function (:arguments 
              ( ("pci_path" variable nil (reparse-symbol function_parameters) [3263 3271]))              ) nil [3232 3532])
            ("_modify_mac_addresses" function (:arguments 
              ( ("pci_path" variable nil (reparse-symbol function_parameters) [3560 3568])
                ("numvfs" variable nil (reparse-symbol function_parameters) [3570 3576]))              ) nil [3534 3740])
            ("_check_all_vfs_up" function (:arguments 
              ( ("event" variable nil (reparse-symbol function_parameters) [3764 3769])
                ("vfs_up" variable nil (reparse-symbol function_parameters) [3771 3777])
                ("numvfs" variable nil (reparse-symbol function_parameters) [3779 3785])
                ("parent_pci_address" variable nil (reparse-symbol function_parameters) [3787 3805]))              ) nil [3742 4033])
            ("physical_function_to_pci_address" function (:arguments 
              ( ("devname" variable nil (reparse-symbol function_parameters) [4072 4079]))              ) nil [4035 4429])
            ("_check_all_vfs_down" function (:arguments 
              ( ("event" variable nil (reparse-symbol function_parameters) [4455 4460])
                ("links" variable nil (reparse-symbol function_parameters) [4462 4467]))              ) nil [4431 4636])
            ("get_all_vf_names" function (:arguments 
              ( ("pci_addr" variable nil (reparse-symbol function_parameters) [4659 4667]))              ) nil [4638 4870])
            ("list_sriov_pci_devices" function nil nil [4872 5069])
            ("upgrade_devices_sriov_config" function
               (:documentation "
    Given an old SRIOV PF configuration (containing numvfs per device), convert
    it to the new device configuration and return it.
    "
                :arguments 
                  ( ("cfg" variable nil (reparse-symbol function_parameters) [5104 5107]))                  )
                nil [5071 5667])
            ("get_old_persisted_devices_numvfs" function
               (:documentation "
    Reads the persisted SRIOV VFs old configuration and returns a dict where
    the device PCI is the key and the number of VF/s is the value.
    "
                :arguments 
                  ( ("devs_vfs_path" variable nil (reparse-symbol function_parameters) [5706 5719]))                  )
                nil [5669 6114])
            ("pciaddr2devname" function (:arguments 
              ( ("pci_path" variable nil (reparse-symbol function_parameters) [6136 6144]))              ) nil [6116 6221])
            ("devname2pciaddr" function (:arguments 
              ( ("devname" variable nil (reparse-symbol function_parameters) [6243 6250]))              ) nil [6223 6536])
            ("DeviceHasNoPciAddress" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [6582 6586]))                  
                :type "class")
                nil [6538 6587]))          
      :file "sriov.py"
      :pointmax 6587
      :fsize 6586
      :lastmodtime '(23968 14270 907367 207000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [819 857])
            ("__future__" include nil nil [858 889])
            ("abc" include nil nil [891 901])
            ("errno" include nil nil [902 914])
            ("itertools" include nil nil [915 931])
            ("logging" include nil nil [932 946])
            ("os" include nil nil [947 956])
            ("random" include nil nil [957 970])
            ("string" include nil nil [971 984])
            ("six" include nil nil [986 996])
            ("vdsm.network" include nil nil [998 1030])
            ("vdsm.network" include nil nil [1031 1065])
            ("vdsm.network.link" include nil nil [1066 1100])
            ("vdsm.network.netlink" include nil nil [1101 1139])
            ("vdsm.network.netlink" include nil nil [1140 1177])
            ("vdsm.network.netlink.waitfor" include nil nil [1178 1233])
            ("STATE_UP" variable nil nil [1236 1251])
            ("STATE_DOWN" variable nil nil [1252 1271])
            ("NET_PATH" variable nil nil [1273 1300])
            ("DEFAULT_MTU" variable nil nil [1302 1320])
            ("Type" type
               (:superclasses ("object")
                :members 
                  ( ("NIC" variable nil (reparse-symbol indented_block_body) [1347 1358])
                    ("VLAN" variable nil (reparse-symbol indented_block_body) [1363 1376])
                    ("BOND" variable nil (reparse-symbol indented_block_body) [1381 1394])
                    ("BRIDGE" variable nil (reparse-symbol indented_block_body) [1399 1416])
                    ("LOOPBACK" variable nil (reparse-symbol indented_block_body) [1421 1442])
                    ("MACVLAN" variable nil (reparse-symbol indented_block_body) [1447 1466])
                    ("DPDK" variable nil (reparse-symbol indented_block_body) [1471 1484])
                    ("DUMMY" variable nil (reparse-symbol indented_block_body) [1489 1504])
                    ("TUN" variable nil (reparse-symbol indented_block_body) [1509 1520])
                    ("OVS" variable nil (reparse-symbol indented_block_body) [1525 1544])
                    ("TEAM" variable nil (reparse-symbol indented_block_body) [1549 1562])
                    ("VETH" variable nil (reparse-symbol indented_block_body) [1567 1580])
                    ("VF" variable nil (reparse-symbol indented_block_body) [1585 1594]))                  
                :type "class")
                nil [1323 1595])
            ("" code nil nil [1615 1628])
            ("IfaceAPI" type
               (:documentation "
    Link iface driver interface.
    "
                :superclasses ("object")
                :members 
                  ( ("up" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1738 1742])
                            ("admin_blocking" variable nil (reparse-symbol function_parameters) [1744 1758])
                            ("oper_blocking" variable nil (reparse-symbol function_parameters) [1765 1778]))                          
                        :documentation "
        Set link state to UP, optionally blocking on the action.
        :param dev: iface name.
        :param admin_blocking: Block until the administrative state is UP.
        :param oper_blocking: Block until the link is operational.
        admin state is at kernel level, while link state is at driver level.
        ")
                        (reparse-symbol indented_block_body) [1707 2127])
                    ("down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2165 2169]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2132 2185])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2229 2233]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2190 2249])
                    ("is_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2288 2292]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2254 2308])
                    ("is_admin_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2353 2357]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2313 2373])
                    ("is_oper_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2417 2421]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2378 2437])
                    ("is_promisc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2481 2485]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2442 2501])
                    ("exists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2541 2545]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2506 2561])
                    ("address" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2602 2606]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2566 2622])
                    ("set_address" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2667 2671])
                            ("address" variable nil (reparse-symbol function_parameters) [2673 2680]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2627 2696])
                    ("mtu" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2733 2737]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2701 2753])
                    ("set_mtu" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2794 2798])
                            ("mtu" variable nil (reparse-symbol function_parameters) [2800 2803]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2758 2819])
                    ("type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2857 2861]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2824 2877])
                    ("statistics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2921 2925]))                          
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2882 2941]))                  
                :type "class")
                nil [1629 2941])
            ("IfaceHybrid" type
               (:documentation "
    Link iface driver implemented by a mix of iproute2, netlink and sysfs.
    "
                :superclasses ("IfaceAPI")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3096 3112])
                            ("self" variable nil (reparse-symbol indented_block_body) [3121 3138]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3081 3085]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3068 3139])
                    ("device" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3169 3173]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3144 3201])
                    ("device" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3236 3240])
                            ("dev" variable nil (reparse-symbol function_parameters) [3242 3245]))                          
                        :decorators 
                          ( ("device.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3206 3367])
                    ("vfid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3395 3399]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3372 3428])
                    ("vfid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3459 3463])
                            ("vf" variable nil (reparse-symbol function_parameters) [3465 3467]))                          
                        :decorators 
                          ( ("vfid.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3433 3590])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3610 3614]))                          )
                        (reparse-symbol indented_block_body) [3595 3771])
                    ("up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3783 3787])
                            ("admin_blocking" variable nil (reparse-symbol function_parameters) [3789 3803])
                            ("oper_blocking" variable nil (reparse-symbol function_parameters) [3810 3823]))                          )
                        (reparse-symbol indented_block_body) [3776 4052])
                    ("down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4066 4070]))                          )
                        (reparse-symbol indented_block_body) [4057 4207])
                    ("is_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4222 4226]))                          )
                        (reparse-symbol indented_block_body) [4212 4263])
                    ("is_admin_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4284 4288]))                          )
                        (reparse-symbol indented_block_body) [4268 4407])
                    ("is_oper_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4427 4431]))                          )
                        (reparse-symbol indented_block_body) [4412 4626])
                    ("is_promisc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4646 4650]))                          )
                        (reparse-symbol indented_block_body) [4631 4765])
                    ("exists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4781 4785]))                          )
                        (reparse-symbol indented_block_body) [4770 4945])
                    ("address" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4962 4966]))                          )
                        (reparse-symbol indented_block_body) [4950 5013])
                    ("set_address" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5034 5038])
                            ("address" variable nil (reparse-symbol function_parameters) [5040 5047]))                          )
                        (reparse-symbol indented_block_body) [5018 5264])
                    ("mtu" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5277 5281]))                          )
                        (reparse-symbol indented_block_body) [5269 5324])
                    ("set_mtu" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5341 5345])
                            ("mtu" variable nil (reparse-symbol function_parameters) [5347 5350]))                          )
                        (reparse-symbol indented_block_body) [5329 5447])
                    ("type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5461 5465]))                          )
                        (reparse-symbol indented_block_body) [5452 5606])
                    ("statistics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5626 5630]))                          )
                        (reparse-symbol indented_block_body) [5611 6109])
                    ("_up_blocking" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6131 6135])
                            ("link_blocking" variable nil (reparse-symbol function_parameters) [6137 6150]))                          )
                        (reparse-symbol indented_block_body) [6114 6261]))                  
                :type "class")
                nil [2943 6261])
            ("iface" function
               (:documentation " Iface factory "
                :arguments 
                  ( ("device" variable nil (reparse-symbol function_parameters) [6273 6279])
                    ("vfid" variable nil (reparse-symbol function_parameters) [6281 6285]))                  )
                nil [6263 6477])
            ("list" function nil nil [6479 6850])
            ("random_iface_name" function
               (:documentation "
    Create a network device name with the supplied prefix and a pseudo-random
    suffix, e.g. dummy_ilXaYiSn7. The name is bound to IFNAMSIZ of 16-1 chars.
    "
                :arguments 
                  ( ("prefix" variable nil (reparse-symbol function_parameters) [6874 6880])
                    ("max_length" variable nil (reparse-symbol function_parameters) [6885 6895])
                    ("digit_only" variable nil (reparse-symbol function_parameters) [6900 6910]))                  )
                nil [6852 7339])
            ("get_alternative_type" function
               (:documentation "
    Attemt to detect the iface type through alternative means.
    "
                :arguments 
                  ( ("device" variable nil (reparse-symbol function_parameters) [7366 7372]))                  )
                nil [7341 7859])
            ("_get_stat" function (:arguments 
              ( ("device" variable nil (reparse-symbol function_parameters) [7875 7881])
                ("stat_name" variable nil (reparse-symbol function_parameters) [7883 7892]))              ) nil [7861 8751]))          
      :file "iface.py"
      :pointmax 8751
      :fsize 8750
      :lastmodtime '(23968 6112 197983 228000)
      :unmatched-syntax '((INDENT_BLOCK 8266 . 8404) (NEWLINE 8216 . 8217) (COLON 8215 . 8216) (TRY 8108 . 8111) (AS 8211 . 8213) (INDENT_BLOCK 7690 . 7837) (NEWLINE 7689 . 7690) (COLON 7688 . 7689) (TRY 7553 . 7556) (AS 7682 . 7684) (NAME 7616 . 7626) (IF 7638 . 7640) (ELSE 7653 . 7657))))
  :file "!usr!lib!python3.6!site-packages!vdsm!network!link!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
