;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-automake-mode
      :tags 
        '( ("SUBDIRS" variable (:default-value ("configurators" "ip" "link" "lldp" "lldpad" "netinfo" "netlink" "ovs" "tc" "nm" "netswitch")) nil [819 899])
            ("$(top_srcdir)/build-aux/Makefile.subs" include nil nil [900 946])
            ("vdsmnetworkdir" variable (:default-value ("$(vdsmpylibdir)/network")) nil [947 988])
            ("dist_vdsmnetwork_PYTHON" variable (:default-value ("$(srcdir)/*.py")) nil [988 1029]))          
      :file "Makefile.am"
      :pointmax 1029
      :fsize 1028
      :lastmodtime '(23968 6112 193983 157000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "ipwrapper.py"
      :pointmax 19567
      :fsize 19566
      :lastmodtime '(23968 14075 58947 557000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [819 857])
            ("__future__" include nil nil [858 889])
            ("__future__" include nil nil [890 927])
            ("contextlib" include nil nil [928 965])
            ("sys" include nil nil [967 977])
            ("logging" include nil nil [978 992])
            ("six" include nil nil [993 1003])
            ("copy" include nil nil [1004 1015])
            ("vdsm.common" include nil nil [1017 1046])
            ("vdsm.network" include nil nil [1048 1085])
            ("vdsm.network" include nil nil [1086 1119])
            ("vdsm.network" include nil nil [1120 1154])
            ("vdsm.network" include nil nil [1155 1191])
            ("vdsm.network" include nil nil [1192 1226])
            ("vdsm.network.ipwrapper" include nil nil [1227 1274])
            ("vdsm.network.link" include nil nil [1275 1324])
            ("vdsm.network.link" include nil nil [1325 1360])
            ("vdsm.network.lldp" include nil nil [1361 1408])
            ("canonicalize" include nil nil [1417 1436])
            ("address" include nil nil [1446 1473])
            ("RollbackIncomplete" include nil nil [1487 1512])
            ("netconfpersistence" include nil nil [1520 1545])
            ("DUMMY_BRIDGE" code nil nil [1548 1560])
            ("network_caps" function (:documentation "Obtain root-requiring network capabilties

    TODO: When we split netinfo, we will merge root and non-root netinfo in
          caps to reduce the amount of work in root context.
    ") nil [1563 1915])
            ("network_stats" function (:documentation "Report network statistics") nil [1917 2003])
            ("change_numvfs" function
               (:documentation "Change number of virtual functions of a device.

    The persistence is stored in the same place as other network persistence is
    stored. A call to setSafeNetworkConfig() will persist it across reboots.
    "
                :arguments 
                  ( ("pci_path" variable nil (reparse-symbol function_parameters) [2023 2031])
                    ("numvfs" variable nil (reparse-symbol function_parameters) [2033 2039])
                    ("devname" variable nil (reparse-symbol function_parameters) [2041 2048]))                  )
                nil [2005 2487])
            ("ip_addrs_info" function
               (:documentation "\"
    Report IP addresses of a device.

    Returning a 4 values: ipv4addr, ipv4netmask, ipv4addrs, ipv6addrs
    ipv4addrs and ipv6addrs contain (each) a list of addresses.
    ipv4netmask and ipv4addrs represents the 'primary' ipv4 address of the
    device, if it exists.
    "
                :arguments 
                  ( ("device" variable nil (reparse-symbol function_parameters) [2507 2513]))                  )
                nil [2489 2846])
            ("net2vlan" function
               (:documentation "Return the vlan id of the network if exists, None otherwise."
                :arguments 
                  ( ("network_name" variable nil (reparse-symbol function_parameters) [2861 2873]))                  )
                nil [2848 3004])
            ("network_northbound" function
               (:documentation "
    Return the northbound iface of a given network if exists, None otherwise.
    On a legacy network, the NB is either the bridge or the NIC/Bond/VLAN.
    On an OVS network, the NB is a dedicated internal iface connected to the
    OVS switch, named as the network.
    "
                :arguments 
                  ( ("network_name" variable nil (reparse-symbol function_parameters) [3029 3041]))                  )
                nil [3006 3391])
            ("ovs_bridge" function
               (:documentation "
    If network_name is an OVS based network, return a dict with OVS (real)
    bridge name and a boolean indicating if it has dpdk port attached to it.
    Otherwise, return None.

    This API requires root access.
    "
                :arguments 
                  ( ("network_name" variable nil (reparse-symbol function_parameters) [3408 3420]))                  )
                nil [3393 3718])
            ("_build_setup_hook_dict" function (:arguments 
              ( ("req_networks" variable nil (reparse-symbol function_parameters) [3747 3759])
                ("req_bondings" variable nil (reparse-symbol function_parameters) [3761 3773])
                ("req_options" variable nil (reparse-symbol function_parameters) [3775 3786]))              ) nil [3720 3997])
            ("_apply_hook" function (:arguments 
              ( ("bondings" variable nil (reparse-symbol function_parameters) [4015 4023])
                ("networks" variable nil (reparse-symbol function_parameters) [4025 4033])
                ("options" variable nil (reparse-symbol function_parameters) [4035 4042]))              ) nil [3999 4399])
            ("_rollback" function (:decorators 
              ( ("contextmanager" function (:type "decorator") nil nil))              ) nil [4401 5331])
            ("setupNetworks" function
               (:documentation "Add/Edit/Remove configuration for networks and bondings.

    Params:
        networks - dict of key=network, value=attributes
            where 'attributes' is a dict with the following optional items:
                        vlan=<id>
                        bonding=\"<name>\" | nic=\"<name>\"
                        (bonding and nics are mutually exclusive)
                        ipaddr=\"<ipv4>\"
                        netmask=\"<ipv4>\" | prefix=<prefixlen>
                        gateway=\"<ipv4>\"
                        bootproto=\"...\"
                        ipv6addr=\"<ipv6>[/<prefixlen>]\"
                        ipv6gateway=\"<ipv6>\"
                        ipv6autoconf=\"0|1\"
                        dhcpv6=\"0|1\"
                        defaultRoute=True|False
                        nameservers=[<dns1>, <dns2> ...]\"
                        switch=\"legacy|...\"
                        (other options will be passed to the config file AS-IS)
                        -- OR --
                        remove=True (other attributes can't be specified)

        bondings - dict of key=bonding, value=attributes
            where 'attributes' is a dict with the following optional items:
                        nics=[\"<nic1>\" , \"<nic2>\", ...]
                        options=\"<bonding-options>\"
                        hwaddr=\"<mac address>\"
                        switch=\"legacy|...\"
                        -- OR --
                        remove=True (other attributes can't be specified)

        options - dict of options, such as:
                        connectivityCheck=0|1
                        connectivityTimeout=<int>
                        _inRollback=True|False
                        commitOnSuccess=True|False

    Notes:
        When you edit a network that is attached to a bonding, it's not
        necessary to re-specify the bonding (you need only to note
        the attachment in the network's attributes). Similarly, if you edit
        a bonding, it's not necessary to specify its networks.
    "
                :arguments 
                  ( ("networks" variable nil (reparse-symbol function_parameters) [5351 5359])
                    ("bondings" variable nil (reparse-symbol function_parameters) [5361 5369])
                    ("options" variable nil (reparse-symbol function_parameters) [5371 5378]))                  )
                nil [5333 8919])
            ("_setup_networks" function (:arguments 
              ( ("networks" variable nil (reparse-symbol function_parameters) [8941 8949])
                ("bondings" variable nil (reparse-symbol function_parameters) [8951 8959])
                ("options" variable nil (reparse-symbol function_parameters) [8961 8968])
                ("net_info" variable nil (reparse-symbol function_parameters) [8970 8978]))              ) nil [8921 9242])
            ("_change_switch_type" function (:arguments 
              ( ("networks" variable nil (reparse-symbol function_parameters) [9268 9276])
                ("bondings" variable nil (reparse-symbol function_parameters) [9278 9286])
                ("options" variable nil (reparse-symbol function_parameters) [9288 9295])
                ("running_config" variable nil (reparse-symbol function_parameters) [9297 9311])
                ("net_info" variable nil (reparse-symbol function_parameters) [9313 9321]))              ) nil [9244 10582])
            ("_remove_nets_and_bonds" function (:arguments 
              ( ("nets" variable nil (reparse-symbol function_parameters) [10611 10615])
                ("bonds" variable nil (reparse-symbol function_parameters) [10617 10622])
                ("net_info" variable nil (reparse-symbol function_parameters) [10624 10632])
                ("in_rollback" variable nil (reparse-symbol function_parameters) [10634 10645]))              ) nil [10584 10962])
            ("setSafeNetworkConfig" function (:documentation "Declare current network configuration as 'safe'") nil [10964 11087])
            ("add_sourceroute" function (:arguments 
              ( ("iface" variable nil (reparse-symbol function_parameters) [11109 11114])
                ("ip" variable nil (reparse-symbol function_parameters) [11116 11118])
                ("mask" variable nil (reparse-symbol function_parameters) [11120 11124])
                ("route" variable nil (reparse-symbol function_parameters) [11126 11131]))              ) nil [11089 11178])
            ("remove_sourceroute" function (:arguments 
              ( ("iface" variable nil (reparse-symbol function_parameters) [11203 11208]))              ) nil [11180 11241])
            ("add_ovs_vhostuser_port" function (:arguments 
              ( ("bridge" variable nil (reparse-symbol function_parameters) [11270 11276])
                ("port" variable nil (reparse-symbol function_parameters) [11278 11282])
                ("socket_path" variable nil (reparse-symbol function_parameters) [11284 11295]))              ) nil [11243 11375])
            ("remove_ovs_port" function (:arguments 
              ( ("bridge" variable nil (reparse-symbol function_parameters) [11397 11403])
                ("port" variable nil (reparse-symbol function_parameters) [11405 11409]))              ) nil [11377 11469])
            ("confirm_connectivity" function nil nil [11471 11526])
            ("get_lldp_info" function
               (:documentation "
    If filter is empty, all NICs are returned. If key 'devices' in filter
    contains a list of devices, the list is restricted to this devices.
    An empty list is interpreted as no restriction.
    "
                :arguments 
                  ( ("filter" variable nil (reparse-symbol function_parameters) [11546 11552]))                  )
                nil [11528 11961]))          
      :file "api.py"
      :pointmax 11961
      :fsize 11960
      :lastmodtime '(23968 6112 193983 157000)
      :unmatched-syntax '((INDENT_BLOCK 4495 . 5331) (NEWLINE 4494 . 4495) (COLON 4493 . 4494) (TRY 4438 . 4441) (AS 4487 . 4489) (FROM 1513 . 1517) (PERIOD 1518 . 1519) (FROM 1474 . 1478) (PERIOD 1479 . 1480) (FROM 1437 . 1441) (PERIOD 1442 . 1443) (FROM 1410 . 1414) (PERIOD 1415 . 1416)))
    (semanticdb-table "semanticdb-table"
      :file "canonicalize.py"
      :fsize 8970
      :lastmodtime '(23968 6112 193983 157000))
    (semanticdb-table "semanticdb-table"
      :file "netconfpersistence.py"
      :fsize 11880
      :lastmodtime '(23968 6112 199983 264000))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [814 852])
            ("__future__" include nil nil [853 884])
            ("array" include nil nil [886 898])
            ("fcntl" include nil nil [899 911])
            ("socket" include nil nil [912 925])
            ("struct" include nil nil [926 939])
            ("contextlib" include nil nil [940 970])
            ("vdsm.network" include nil nil [972 1003])
            ("ETHTOOL_GDRVINFO" variable nil nil [1005 1034])
            ("SIOCETHTOOL" variable nil nil [1070 1090])
            ("DRVINFO_FORMAT" variable nil nil [1112 1161])
            ("IFREQ_FORMAT" variable nil nil [1162 1184])
            ("driver_name" function
               (:documentation "Returns the driver used by a device.

    Throws IOError ENODEV for non existing devices.
    Throws IOError EOPNOTSUPP for non supported devices, i.g., loopback.
    "
                :arguments 
                  ( ("device_name" variable nil (reparse-symbol function_parameters) [1246 1257]))                  )
                nil [1230 2225]))          
      :file "ethtool.py"
      :pointmax 2225
      :fsize 2224
      :lastmodtime '(23968 6112 194983 175000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [822 860])
            ("__future__" include nil nil [861 892])
            ("errno" include nil nil [893 905])
            ("_RPFILTER_STRICT" variable nil nil [907 929])
            ("_RPFILTER_LOOSE" variable nil nil [930 951])
            ("set_rp_filter" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [972 975])
                ("mode" variable nil (reparse-symbol function_parameters) [977 981]))              ) nil [954 1109])
            ("set_rp_filter_loose" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [1135 1138]))              ) nil [1111 1181])
            ("set_rp_filter_strict" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [1208 1211]))              ) nil [1183 1255])
            ("enable_ipv6" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [1273 1276]))              ) nil [1257 1316])
            ("disable_ipv6" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [1335 1338])
                ("disable" variable nil (reparse-symbol function_parameters) [1340 1347]))              ) nil [1318 1660])
            ("is_disabled_ipv6" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [1683 1686]))              ) nil [1662 1928])
            ("is_ipv6_local_auto" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [1953 1956]))              ) nil [1930 2604])
            ("enable_ipv6_local_auto" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [2633 2636]))              ) nil [2606 2682])
            ("disable_ipv6_local_auto" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [2712 2715]))              ) nil [2684 2762])
            ("_set_ipv6_local_auto" function (:arguments 
              ( ("dev" variable nil (reparse-symbol function_parameters) [2789 2792])
                ("state" variable nil (reparse-symbol function_parameters) [2794 2799]))              ) nil [2764 3247]))          
      :file "sysctl.py"
      :pointmax 3247
      :fsize 3246
      :lastmodtime '(23968 6112 204983 354000)
      :unmatched-syntax '((NAME 2917 . 2925) (IF 2932 . 2934) (ELSE 2941 . 2945) (INDENT_BLOCK 2382 . 2475) (NEWLINE 2381 . 2382) (COLON 2380 . 2381) (TRY 1963 . 1966) (AS 2376 . 2378) (INDENT_BLOCK 1839 . 1928) (NEWLINE 1838 . 1839) (COLON 1837 . 1838) (TRY 1703 . 1706) (AS 1833 . 1835) (INDENT_BLOCK 1512 . 1660) (NEWLINE 1511 . 1512) (COLON 1510 . 1511) (TRY 1359 . 1362) (AS 1506 . 1508))))
  :file "!usr!lib!python3.6!site-packages!vdsm!network!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
