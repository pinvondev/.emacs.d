;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
虚拟设备实现
\"\"\"" code nil nil [1 15])
            ("__future__" include nil nil [17 55])
            ("__future__" include nil nil [56 87])
            ("urllib.parse" include nil nil [89 122])
            ("rccpxuanyuan.common" include nil nil [124 159])
            ("rccpxuanyuan.common" include nil nil [160 200])
            ("rccpxuanyuan.common.exception" include nil nil [201 265])
            ("rccpxuanyuan.common.exception" include nil nil [266 334])
            ("rccpxuanyuan.common.exception" include nil nil [335 397])
            ("rccpxuanyuan.common.exception" include nil nil [398 461])
            ("rccpxuanyuan.common.exception" include nil nil [462 519])
            ("rccpxuanyuan.virt.vmdevices.posdriver" include nil nil [520 633])
            ("ClearVHostSCSIControllerFailed" variable nil nil [636 678])
            ("_DISK_NAMESPACE" variable nil nil [681 743])
            ("configure_domain" function
               (:documentation "根据传入的 conf 来填充 domain 中的字段"
                :arguments 
                  ( ("conf" variable nil (reparse-symbol function_parameters) [767 771])
                    ("domain" variable nil (reparse-symbol function_parameters) [773 779]))                  )
                nil [746 1050])
            ("Base" type
               (:documentation "
    虚拟设备基类
    职责：
        1. 声明虚拟设备公共接口和成员变量，支持上层使用
    约定：
        1. 在继承Base后，虚拟设备需要设置设备自身的别名，别名是指上层模型和
           libvirt模型中设备的名字，比如CPU设备对应别名有(\"cpu\", \"vcpu\")。设置别
           名后，上层可以通过别名查找对应设备类。
    "
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [1282 1297])
                    ("_CONF" variable nil (reparse-symbol indented_block_body) [1303 1313])
                    ("_DEV_GROUP_XML" variable nil (reparse-symbol indented_block_body) [1319 1338])
                    ("set_default_conf" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置其中默认参数。
        职责：
            1. 检查设备配置组合法性；
            2. 根据上层设备配置设置改配置缺省字段；
            3. 提取公共参数
        参数 conf：上层设备配置；
        类型：泛型根据具体设备类约定入参类型；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1382 1385])
                            ("conf" variable nil (reparse-symbol function_parameters) [1387 1391]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1344 1598])
                    ("get_mutex_resource" function
                       (:documentation "
        定义：根据虚拟设备配置，获取设备多线程互斥资源。
        职责：
            1. 根据上层设备配置返回设备互斥资源标识。
        参数 conf：上层设备配置；
        类型：泛型根据具体设备类约定入参类型；
        返回值：设备互斥资源标识组合。
        类型：字符串列表；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1644 1647])
                            ("conf" variable nil (reparse-symbol function_parameters) [1649 1653]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1604 1873])
                    ("set_dev_group_xml" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置设备组总线/公共配置。
        职责：
            1. 根据上层一组设备配置，设置对应底层设备libvirt配置；
        参数 conf_group：同set_default_conf接口描述；
        类型：列表；
        参数 par_dev_dom：设置一组同类设备；
        类型：xml.etree.ElementTree对象；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1917 1920])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [1922 1932])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [1934 1945]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1878 2195])
                    ("set_xml" function
                       (:documentation "
        定义：单一虚拟设备配置翻译接口。
        职责：
            1. 翻译上层设备模型配置为libvirt XML对象；
            2. 设置设备libvirt XML缺省参数；
        参数 conf：上层单一设备模型配置；
        类型：字典{}；
        参数 dev_dom：底层设备libvirt参数；
        类型：xml.etree.ElementTree；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2229 2232])
                            ("conf" variable nil (reparse-symbol function_parameters) [2234 2238])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [2240 2247]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2200 2506])
                    ("setup_dev_group" function
                       (:documentation "
        定义：一组虚拟设备安装接口。
        职责：
            1. 完成一组虚拟设备依赖的环境配置。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数 conf_group：同set_default_conf接口描述；
        类型：列表；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2548 2551])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [2553 2563]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2511 2761])
                    ("setup" function
                       (:documentation "
        定义：单一虚拟设备安装接口。
        职责：
            1. 完成虚拟设备依赖的环境配置。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2793 2796])
                            ("conf" variable nil (reparse-symbol function_parameters) [2798 2802]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2766 2961])
                    ("teardown" function
                       (:documentation "
        定义：单一虚拟设备卸载接口。
        职责：
            1. 完成虚拟设备依赖的环境清理。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2996 2999])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [3001 3008]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2966 3123]))                  
                :type "class")
                nil [1052 3123])
            ("CPU" type
               (:documentation "虚拟CPU"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [3163 3191])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [3196 3208])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [3213 3231])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3275 3278])
                            ("conf" variable nil (reparse-symbol function_parameters) [3280 3284]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3237 3614])
                    ("set_xml" function
                       (:documentation "
        将 vcpu 配置参数转换成 xml
        @cpu_conf: dict, required
        @dev_dom: xml.etree.Element, optional
        根据 conf 查找 default 对应的值是否存在, 若不存在, 则 append
                                                 若存在, 则 update
        eg.
        dev_dom: </default>
        vcpu_conf: {\"cpu\": 4}
        @ret: <vcpu>4</vcpu>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3648 3651])
                            ("conf" variable nil (reparse-symbol function_parameters) [3653 3657])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [3659 3666]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3619 4130]))                  
                :type "class")
                nil [3125 4130])
            ("Memory" type
               (:documentation "虚拟内存"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [4172 4196])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [4201 4216])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [4221 4241])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4285 4288])
                            ("conf" variable nil (reparse-symbol function_parameters) [4290 4294]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4247 4644])
                    ("set_xml" function
                       (:documentation "
        将虚拟内存配置参数转换成 xml
        @mem: dict, required

        eg.
        conf: {\"memory\": 4096}
        dev_dom: <default />
        @ret: <memory unit=\"MiB\">4096</memory>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4678 4681])
                            ("conf" variable nil (reparse-symbol function_parameters) [4683 4687])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [4689 4696]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4649 5044]))                  
                :type "class")
                nil [4132 5044])
            ("OS" type
               (:documentation "虚机系统"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [5082 5113])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [5118 5135])
                    ("_TAG" variable nil (reparse-symbol indented_block_body) [5140 5151])
                    ("set_xml" function
                       (:documentation "虚拟机系统模型配置参数转换成 xml
        @conf: dict, required
        引导设备可选值有 cdrom 和 hd, 默认为 hd

        eg.
        conf: {\"boot_dev\": \"hd/cdrom\"}
        dev_dom: <default />
        @ret: <os>
                <type arch='x86_64' machine='pc-0.14'>hvm</type>
                <boot dev=\"hd\">
              </os>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5927 5930])
                            ("conf" variable nil (reparse-symbol function_parameters) [5932 5936])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [5938 5945]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5898 6780]))                  
                :type "class")
                nil [5046 6780])
            ("Interface" type
               (:documentation "虚拟网卡
    <interface type='bridge'>
      <source bridge=$src_br/>
      <virtualport type='openvswitch'>
        <parameters profileid='menial' interface_id=$interface_id/>
      </virtualport>
      <alias name=\"$dev_id\"/>
    </interface>
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [7066 7093])
                    ("\"\"\"
<interface type='bridge'>
    <source bridge='$src_br'/>
    <virtualport type='openvswitch'>
        <parameters profileid='menial' interfaceid='$interface_id'/>
    </virtualport>
    <alias name='$dev_id'/>
</interface>
\"\"\"" code nil (reparse-symbol indented_block_body) [7121 7351])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: list, required, list 中每个元素为 dict
        @ret: list
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7395 7398])
                            ("conf" variable nil (reparse-symbol function_parameters) [7400 7404]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7357 7875])
                    ("set_xml" function
                       (:documentation "虚拟网卡设备配置参数转换成 xml
        @conf: dict, required.
        @dev_dom: xml.etree.Element, optional

        eg.
        conf: {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx}
        dev_dom: <Interface />
        @ret:
        <interface type=\"bridge\">
            <source bridge=xxx />
            <virtualport type=\"openvswitch\">
                <parameters interface_id=xxx profileid=\"menial\" />
            </virtualport>
            <alias name=xxx />
        </interface>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7909 7912])
                            ("conf" variable nil (reparse-symbol function_parameters) [7914 7918])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [7920 7927]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7880 8605])
                    ("set_dev_group_xml" function
                       (:documentation "批量转换虚拟网卡 conf 为 xml
        @conf_group: list, 每个元素为 dict, 对应一个网卡设备
        @dev_dom: xml.etree.Element

        eg.
        conf_group: [
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
        ]
        par_dev_dom:
            <domain>
              <devices />
            <domain/>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8649 8652])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [8654 8664])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [8666 8677]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8610 9314]))                  
                :type "class")
                nil [6782 9314])
            ("CDROM" type
               (:documentation "虚拟光驱"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [9355 9378])
                    ("_FTP_PORT" variable nil (reparse-symbol indented_block_body) [9383 9397])
                    ("_SFTP_PORT" variable nil (reparse-symbol indented_block_body) [9402 9417])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source file='$file_path' />
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <serial>'$dev_id'</serial>
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [9447 9663])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source name='$file_path' protocol='$protocol'>
        <host name='$name' port='$port' />
    </source>
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <serial />
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [9694 9970])
                    ("set_default_conf" function
                       (:documentation "检查单项配置的合法性, 填充默认值
        @conf: dict, required

        若是 boot 设备, 则从 hda 开始编号
        否则, 从 hde 往前编号
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10014 10017])
                            ("conf" variable nil (reparse-symbol function_parameters) [10019 10023]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9976 11422])
                    ("set_xml" function
                       (:documentation "虚拟光驱设备配置参数转换成 xml
        @conf: dict, required
        @dev_dom: rccpxuanyuan.virt.vmxml.Element, optional

        1. 若 key-value 形式为 str-list, 则将 domain 这个节点传给 dev_dom,
           上层不去区分是什么设备
        2. 若 key-value 形式为 str-str, 则将当前节点传进来
        3. 根据 conf, 查找 dev_dom 中对应节点和值是否存在
           若不存在, 则 append
           若存在, 则 update
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11456 11459])
                            ("conf" variable nil (reparse-symbol function_parameters) [11461 11465])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [11467 11474]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11427 12437])
                    ("_parse_local_filepath" function
                       (:documentation "返回本地文件路径, eg:
        /test/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12485 12488])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [12490 12501]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12442 12617])
                    ("_parse_remote_filepath" function
                       (:documentation "解析远程光驱设备路径
        standard:
        ftp://[user ID:password@]<host name>[:port]/[path name/]

        ftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        sftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12666 12669])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [12671 12682]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12622 13658])
                    ("set_dev_group_xml" function
                       (:documentation "批量虚拟设备统一处理接口
        获取 par_dev_dom, 根据 par_dev_dom 的信息完善 conf
        @conf: list, required
        @par_dev_dom: xml.etree.ElementTree.Element, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13702 13705])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [13707 13717])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [13719 13730]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13663 14148])
                    ("_is_local_iso" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14188 14191])
                            ("file_path" variable nil (reparse-symbol function_parameters) [14193 14202]))                          )
                        (reparse-symbol indented_block_body) [14153 14285]))                  
                :type "class")
                nil [9316 14285])
            ("Disk" type
               (:documentation "
    virtual disk model
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [14349 14442])
                    ("_CONF" variable nil (reparse-symbol indented_block_body) [14448 14651])
                    ("_set_booter" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("conf_group" variable nil (reparse-symbol function_parameters) [15012 15022]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14978 15457])
                    ("_set_vdiskid" function
                       (:documentation "
        conf = {
            \"disk_path\": \"1/2\"}
        parse conf = {
            \"vdisk_id\": \"1\",
            \"volume_id\": \"2\",
            \"vdisk_value\": \"socket,id=spdk_vhost_scsi, path=/usr/vdisk/1\"}
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15496 15499])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [15501 15511]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15462 16620])
                    ("" code nil (reparse-symbol indented_block_body) [16656 16714])
                    ("" code nil (reparse-symbol indented_block_body) [16736 16784])
                    ("set_default_conf" function
                       (:documentation "
        定义：根据上层硬盘设备配置组参数，设置其中默认参数lun_id, vdisk_id,
              vdisk_value, volume_id。
        职责：
            1. 检查设备配置组合法性，主要检查所有虚拟硬盘使用相同的vdisk_id；
            2. 根据设备配置组字段设置默认配置,
                主要解析disk_path和boot字段，设置vdisk_id,
                vdisk_value, volume_id, lun_id
            3. 提取公共参数
        参数 conf：上层设备配置组；
        类型：列表；
        示例：[
            {
                \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                \"disk_path\": \"1/2\",
                \"boot\": True,
            }
        ]
        设置后：[
            {
                \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                \"disk_path\": \"1/2\",
                \"boot\": True,
                \"vdisk_id\": \"1\",
                \"volume_id\": \"2\",
                \"vdisk_value\": \"socket,id=spdk_vhost_scsi, path=/usr/vdisk/1\"}
                \"lun_id\": 0,
            }
        ]
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16810 16813])
                            ("conf" variable nil (reparse-symbol function_parameters) [16815 16819]))                          )
                        (reparse-symbol indented_block_body) [16789 17818])
                    ("" code nil (reparse-symbol indented_block_body) [17858 17896])
                    ("get_mutex_resource" function
                       (:documentation "
        定义：根据虚拟硬盘配置，获取虚拟硬盘VDisk互斥资源。
        职责：
            1. 根据上层虚拟硬盘配置返回虚拟硬盘试用VDisk标识。
        参数 conf：同set_default_conf中conf_group；
        返回值：虚拟硬盘互斥资源vdisk_id；
        类型：字符串列表；
        "
                        :arguments 
                          ( ("conf" variable nil (reparse-symbol function_parameters) [17924 17928]))                          )
                        (reparse-symbol indented_block_body) [17901 18177])
                    ("" code nil (reparse-symbol indented_block_body) [18216 18262])
                    ("set_dev_group_xml" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置设备组总线/公共配置。
        职责：
            1. 根据设备配置组参数，设置设备组总线/公共配置；
        参数 conf_group：上层设备配置组；
        类型：列表；
        参数 dev_dom：想要设置的设备domain对象；
        类型：xml.etree.ElementTree对象；
        示例：
        <domain>
        </domain>
        设置后：
        <domain xmlns:qemu=\"http://libvirt.org/schemas/domain/qemu/1.0\">
          <qemu:commandline>
            <qemu:arg value='-chardev'/>
            <qemu:arg value='$vdisk_value'/>
            <qemu:arg value='-device'/>
            <qemu:arg value='vhost-user-scsi-pci,id=scsi,
                             chardev=spdk_vhost_scsi,num_queues=1'/>
            <qemu:evn vdisk_id=\"$vdisk_id\"/>
          </qemu:commandline>
        </domain>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18289 18292])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [18294 18304])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [18306 18317]))                          )
                        (reparse-symbol indented_block_body) [18267 19241])
                    ("" code nil (reparse-symbol indented_block_body) [19278 19310])
                    ("" code nil (reparse-symbol indented_block_body) [19331 19360])
                    ("_remove_vhostscsilun" function
                       (:documentation "
        定义：封装POSDriver移除lun接口
        职责：
            1. 执行POSDriver.remove_vhostscsilun接口
            1. 封装POSDriver.remove_vhostscsilun异常，VDisk接口允许移除lun失败
        "
                        :arguments 
                          ( ("vdisk_id" variable nil (reparse-symbol function_parameters) [19390 19398]))                          )
                        (reparse-symbol indented_block_body) [19365 19630])
                    ("" code nil (reparse-symbol indented_block_body) [19666 19698])
                    ("" code nil (reparse-symbol indented_block_body) [19720 19762])
                    ("setup_dev_group" function
                       (:documentation "
        定义：虚拟一组硬盘安装接口。
        职责：
            1. 完成虚拟所有硬盘的环境依赖。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数参考set_xml接口。
        注意：
            本接口非多线程安全，vhostscsicontroller的配置会被弄脏
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19787 19790])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [19792 19802]))                          )
                        (reparse-symbol indented_block_body) [19767 20433])
                    ("" code nil (reparse-symbol indented_block_body) [20469 20501])
                    ("" code nil (reparse-symbol indented_block_body) [20522 20554])
                    ("" code nil (reparse-symbol indented_block_body) [20576 20620])
                    ("teardown" function
                       (:documentation "
        定义：虚拟硬盘卸载接口。
        职责：
            1. 完成虚拟硬盘依赖的环境清理。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20638 20641])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [20643 20650]))                          )
                        (reparse-symbol indented_block_body) [20625 21017])
                    ("" code nil (reparse-symbol indented_block_body) [21055 21072])
                    ("_parse_disk_path" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [21098 21101])
                        ("disk_path" variable nil (reparse-symbol function_parameters) [21103 21112]))                      ) (reparse-symbol indented_block_body) [21077 21285])
                    ("compose_vdisk_id" function
                       (:documentation "
        使用底层P-OS存储中的池ID和vDisk ID来合成vdisk_id。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [21328 21331])
                            ("original_pool_id" variable nil (reparse-symbol function_parameters) [21333 21349])
                            ("original_vdisk_id" variable nil (reparse-symbol function_parameters) [21351 21368]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21290 21502])
                    ("decompose_vdisk_id" function
                       (:documentation "
        从已合成的vdisk_id中分解出底层P-OS存储中的池ID和vDisk ID。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [21547 21550])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [21552 21560]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21507 21813]))                  
                :type "class")
                nil [14287 21813])
            ("Graphics" type
               (:documentation "暂时使用默认 XML"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [21863 21889])
                    ("\"\"\"
<graphics type='vnc' port='5901' autoport='yes' passwd='123456'>
    <listen address='0.0.0.0' type='address' />
</graphics>
\"\"\"" code nil (reparse-symbol indented_block_body) [21916 22048])
                    ("\"\"\"
<video>
    <model type='qxl' />
</video>
\"\"\"" code nil (reparse-symbol indented_block_body) [22072 22121])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        @ret: dict
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22165 22168])
                            ("conf" variable nil (reparse-symbol function_parameters) [22170 22174]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22127 22290])
                    ("set_dev_group_xml" function
                       (:documentation "图形界面 xml 配置
        @conf_group: dict, required
        @ret:
        <graphics type=\"spice\" port=5912 listen=\"0.0.0.0\" defaultMode=\"insecure\" passwd=\"\"
          <listen address=\"0.0.0.0\" type=\"address\" />
        </graphics>
        <video>
          <model type=\"qxl\" />
        </video>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22334 22337])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [22339 22349])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [22351 22362]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22295 23060]))                  
                :type "class")
                nil [21815 23060]))          
      :file "core.py"
      :pointmax 23060
      :fsize 25951
      :lastmodtime '(23939 6180 47988 967000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "posdriver.py"
      :fsize 5186
      :lastmodtime '(23937 63450 710974 301000)))
  :file "!root!spec-bak!rccpxuanyuan!virt!vmdevices!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
