;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
host_device主机设备管理模块
职责：
    提供主机设备功能的公共常量；
    提供主机设备功能的公共工具函数；
    申明主机设备功能接口；
    组合主机设备类；
\"\"\"" code nil nil [1 101])
            ("abc" include nil nil [103 133])
            ("subprocess" include nil nil [134 172])
            ("subprocess" include nil nil [173 209])
            ("dmidecode" include nil nil [211 227])
            ("rccpxuanyuan" include nil nil [229 259])
            ("rccpxuanyuan.common" include nil nil [260 301])
            ("rccpxuanyuan.host" include nil nil [302 339])
            ("rccpxuanyuan.host" include nil nil [340 380])
            ("rccpxuanyuan.host" include nil nil [381 422])
            ("rccpxuanyuan.host" include nil nil [423 463])
            ("HOSTDEV_UNKNOW_INFO_STR" variable nil nil [466 501])
            ("HOSTDEV_UNKNOW_INFO_INT" variable nil nil [502 529])
            ("HOSTDEV_UNKNOW_INFO_DICT" variable nil nil [530 559])
            ("_get_value" function
               (:documentation "
    主机设备信息查询工具函数，用于获取传入数据中的关注信息，当获取失败时，返回
    设置的默认值。
    业务逻辑:
    1. src是字符串，当与key相等时返回默认值，当不等时返回key；
    2. src字典或列表, 从字典中取值
    3. src是函数，入参(key, *args, **kargs)返回运行结果
    其他情况和各类异常返回设置默认值
    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [577 580])
                    ("key" variable nil (reparse-symbol function_parameters) [582 585])
                    ("default_value" variable nil (reparse-symbol function_parameters) [587 600])
                    ("args" variable nil (reparse-symbol function_parameters) [602 607])
                    ("kargs" variable nil (reparse-symbol function_parameters) [609 616]))                  )
                nil [562 1183])
            ("_get_type_value" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1204 1207])
                ("key" variable nil (reparse-symbol function_parameters) [1209 1212])
                ("val_type" variable nil (reparse-symbol function_parameters) [1214 1222])
                ("default_value" variable nil (reparse-symbol function_parameters) [1224 1237])
                ("args" variable nil (reparse-symbol function_parameters) [1239 1244])
                ("kargs" variable nil (reparse-symbol function_parameters) [1246 1253]))              ) nil [1184 1406])
            ("_get_float" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1422 1425])
                ("key" variable nil (reparse-symbol function_parameters) [1427 1430])
                ("args" variable nil (reparse-symbol function_parameters) [1432 1437])
                ("kargs" variable nil (reparse-symbol function_parameters) [1439 1446]))              ) nil [1407 1561])
            ("_get_int" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1576 1579])
                ("key" variable nil (reparse-symbol function_parameters) [1581 1584])
                ("args" variable nil (reparse-symbol function_parameters) [1586 1591])
                ("kargs" variable nil (reparse-symbol function_parameters) [1593 1600]))              ) nil [1563 1713])
            ("_get_str" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1728 1731])
                ("key" variable nil (reparse-symbol function_parameters) [1733 1736])
                ("args" variable nil (reparse-symbol function_parameters) [1738 1743])
                ("kargs" variable nil (reparse-symbol function_parameters) [1745 1752]))              ) nil [1715 1865])
            ("_get_dict" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1881 1884])
                ("key" variable nil (reparse-symbol function_parameters) [1886 1889])
                ("args" variable nil (reparse-symbol function_parameters) [1891 1896])
                ("kargs" variable nil (reparse-symbol function_parameters) [1898 1905]))              ) nil [1867 2020])
            ("HostDev" type
               (:documentation "
    主机设备基类
    职责：
        组合设备相关属性；
        实现、组合设备静态函数；
        申明设备公共接口；
    "
                :members 
                  ( ("get_info" function
                       (:documentation "
        主机设备查询设备信息功能接口
        职责：
            查询设备配置信息
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2184 2187]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2134 2270])
                    ("_execute_cmd" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2309 2312])
                            ("cmd" variable nil (reparse-symbol function_parameters) [2314 2317]))                          )
                        (reparse-symbol indented_block_body) [2275 2470]))                  
                :type "class")
                nil [2022 2470])
            ("PowerInterface" type
               (:documentation "
    主机电源设备接口类
    职责：
        申明电源设备接口；
    "
                :members 
                  ( ("shutdown" function
                       (:documentation "
        服务器关机功能接口
        职责：
            关闭服务器
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2605 2608]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2555 2683])
                    ("reboot" function
                       (:documentation "
        服务器重启功能接口
        职责：
            重启服务器
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2736 2739]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2688 2814]))                  
                :type "class")
                nil [2472 2814])
            ("Mainboard" type
               (:documentation "
    主机主板设备类
    职责：
        组合设备属性；
        实现设备功能接口；
        组合设备功能接口；
    "
                :superclasses ("HostDev")
                :members 
                  ( ("get_info" function
                       (:documentation "
        主板信息查询接口，用于查询主板信息。
        业务逻辑:
        1. 返回主板信息字典
        2. 返回字典中的键列表为：
            [\"manufacturer\", \"product_name\", \"family\", \"version\", \"uuid\",
             \"serial_number\"]
        3. 键值的类型映射为：
            {
                \"manufacturer\": str,
                \"product_name\": str,
                \"family\": str,
                \"version\": str,
                \"uuid\": str,
                \"serial_number\": str
            }
        4. 替换\"Not Specified\"值为HOSTDEV_UNKNOW_INFO_STR
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2965 2968]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2935 4125]))                  
                :type "class")
                nil [2816 4125])
            ("CPU" type
               (:documentation "
    主机CPU设备类
    职责：
        组合设备属性；
        实现设备功能接口；
        组合设备功能接口；
    "
                :superclasses ("HostDev")
                :members 
                  ( ("_parse_frequency" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4279 4282])
                            ("frequency" variable nil (reparse-symbol function_parameters) [4284 4293]))                          )
                        (reparse-symbol indented_block_body) [4241 4327])
                    ("get_state" function
                       (:documentation "
        1. 返回CPU信息字典
        2. 键值的类型映射为：
            {
                \"avai\": int
            }
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4363 4366]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4332 4491])
                    ("get_info" function
                       (:documentation "
        1. 返回CPU信息字典
        2. 键值的类型映射为：
            {
                \"vendor_id\": str,
                \"model\": str,
                \"family\": str,
                \"frequency\": float,
                \"flags\": list,
                \"cpus\": int,
                \"cores\": int,
                \"processors\": int
            }
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4526 4529]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4496 5545]))                  
                :type "class")
                nil [4127 5545])
            ("Memory" type
               (:documentation "
    主机内存设备类
    职责：
        组合设备属性；
        实现设备功能接口；
        组合设备功能接口；
    "
                :superclasses ("HostDev")
                :members 
                  ( ("get_state" function
                       (:documentation "
        1. 返回MEM信息字典
        2. 键值的类型映射为：
            {
                \"avai\": int
            }
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5694 5697]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5663 5946])
                    ("_parse_mem_size" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5988 5991])
                            ("size" variable nil (reparse-symbol function_parameters) [5993 5997]))                          )
                        (reparse-symbol indented_block_body) [5951 6026])
                    ("_parse_speed" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6065 6068])
                            ("speed" variable nil (reparse-symbol function_parameters) [6070 6075]))                          )
                        (reparse-symbol indented_block_body) [6031 6105])
                    ("_parse_datawidth" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6148 6151])
                            ("data_width" variable nil (reparse-symbol function_parameters) [6153 6163]))                          )
                        (reparse-symbol indented_block_body) [6110 6198])
                    ("get_info" function
                       (:documentation "
        1. 返回Memory信息字典
        2. 键值的类型映射为：
            {
                \"maxnumber_of_devices\": int,
                \"max_capacity\": int,
                \"number_of_devices\": int,
                \"capacity\": int,
                \"dev_list\": list,
                \"manufacturer\": str,
                \"part_number\": str,
                \"serial_number\": str,
                \"mem_type\": str,
                \"size\": int,
                \"speed\": int,
                \"data_width\": int
            }
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6233 6236]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6203 8646]))                  
                :type "class")
                nil [5547 8646])
            ("Nic" type
               (:documentation "
    主机网卡设备类
    职责：
        组合设备属性；
        实现设备功能接口；
        组合设备功能接口；
    "
                :superclasses ("HostDev")
                :members 
                  ( ("get_info" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8791 8794]))                          )
                        (reparse-symbol indented_block_body) [8761 8815]))                  
                :type "class")
                nil [8648 8815])
            ("Disk" type
               (:documentation "
    主机硬盘设备类
    职责：
        组合设备属性；
        实现设备功能接口；
        组合设备功能接口；
    "
                :superclasses ("HostDev")
                :members 
                  ( ("_parse_disk_capacity" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8973 8976])
                            ("capacity" variable nil (reparse-symbol function_parameters) [8978 8986]))                          )
                        (reparse-symbol indented_block_body) [8931 9072])
                    ("_parse_disk_iftype" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9117 9120])
                            ("iftype" variable nil (reparse-symbol function_parameters) [9122 9128]))                          )
                        (reparse-symbol indented_block_body) [9077 9161])
                    ("_parse_disk_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9204 9207])
                            ("rotational" variable nil (reparse-symbol function_parameters) [9209 9219]))                          )
                        (reparse-symbol indented_block_body) [9166 9394])
                    ("_parse_rotation_rate" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9441 9444])
                            ("rotation_rate" variable nil (reparse-symbol function_parameters) [9446 9459]))                          )
                        (reparse-symbol indented_block_body) [9399 9497])
                    ("get_info" function
                       (:documentation "
        1. 返回Disk信息字典
        2. 键值的类型映射为：
            {
                \"number_of_devices\": int,
                \"total_capacity\": int,
                \"total_used\": int,
                \"system_disk\": str,
                \"dev_list\": list,
                \"vendor\": str,
                \"family\": str,
                \"model\": str,
                \"name\": str,
                \"device_file\": str,
                \"disk_sn\": str,
                \"capacity\": int,
                \"used\": int,
                \"disk_type\": str,
                \"rotation_rate\": int,
                \"interface_type\": str
                \"device_file\": str
            }
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9532 9535]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9502 12640]))                  
                :type "class")
                nil [8817 12640])
            ("Power" type
               (:documentation "
    主机电源设备类
    职责：
        组合设备属性；
        实现设备功能接口；
        组合设备功能接口；
    "
                :superclasses ("HostDev" "PowerInterface")
                :members 
                  ( ("get_info" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12803 12806]))                          )
                        (reparse-symbol indented_block_body) [12773 12827])
                    ("shutdown" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("callutils.async_call" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12888 12891]))                          )
                        (reparse-symbol indented_block_body) [12832 12968])
                    ("reboot" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("callutils.async_call" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13027 13030]))                          )
                        (reparse-symbol indented_block_body) [12973 13106]))                  
                :type "class")
                nil [12642 13106]))          
      :file "host_device.py"
      :pointmax 13106
      :fsize 14357
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((NAME 11498 . 11502) (IF 11518 . 11520) (ELSE 11556 . 11560) (NAME 10744 . 10748) (IF 10773 . 10775) (ELSE 10788 . 10792)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
host组件
职责：
    1. 实现服务管理功能和接口
    2. 管理服务器级别资源
\"\"\"" code nil nil [820 874])
            ("logging" include nil nil [877 891])
            ("time" include nil nil [892 903])
            ("uuid" include nil nil [904 915])
            ("rccpxuanyuan.config" include nil nil [1038 1090])
            ("rccpxuanyuan.common" include nil nil [1172 1211])
            ("rccpxuanyuan.common" include nil nil [1212 1253])
            ("rccpxuanyuan.common" include nil nil [1310 1350])
            ("rccpxuanyuan.common" include nil nil [1351 1392])
            ("rccpxuanyuan.common" include nil nil [1393 1434])
            ("rccpxuanyuan.common.vip" include nil nil [1435 1474])
            ("rccpxuanyuan.ntp.ntp" include nil nil [1475 1524])
            ("rccpxuanyuan.host" include nil nil [1547 1588])
            ("rccpxuanyuan.host.interface" include nil nil [1589 1642])
            ("P_HOST_CONFIG" code nil nil [1645 1706])
            ("F_HOSTNAME" variable nil nil [1707 1735])
            ("Host" type
               (:documentation "
    服务器模型
    职责：
        1. 继承服务器模型接口
        2. 实现服务器模型功能
        3. 组合服务器子模型资源
    "
                :superclasses ("HostInterface")
                :members 
                  ( ("static_config" variable nil (reparse-symbol indented_block_body) [5334 5385])
                    ("_get_hostname" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5426 5429]))                          )
                        (reparse-symbol indented_block_body) [5391 5593])
                    ("uuid" function
                       (:documentation "
        查询主机标识:
        1. 优先使用主机名作为uuid
        2. 当主机名为非法uuid，则通过bios uuid和时间戳生成uuid
        3. 当以上都无法获取合法uuid抛异常
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5624 5627]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5598 7506])
                    ("get_host_info" function
                       (:documentation "
        查询服务器主板信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7546 7549]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7511 7671])
                    ("get_mainboard_info" function
                       (:documentation "
        查询服务器主板信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7716 7719]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7676 7817])
                    ("get_cpu_info" function
                       (:documentation "
        查询服务器CPU信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7856 7859]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7822 7981])
                    ("get_cpu_state" function
                       (:documentation "
        查询服务器CPU运行状态外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8021 8024]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7986 8120])
                    ("get_mem_info" function
                       (:documentation "
        查询服务器Mem信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8159 8162]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8125 8287])
                    ("get_mem_state" function
                       (:documentation "
        查询服务器mem运行信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8327 8330]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8292 8429])
                    ("get_disk_info" function
                       (:documentation "
        查询服务器Disk信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8469 8472]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8434 8567])
                    ("shutdown" function
                       (:documentation "
        关闭服务器接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8602 8605]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8572 8686])
                    ("reboot" function
                       (:documentation "
        重启服务器接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8719 8722]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8691 8801])
                    ("set_ntp" function
                       (:documentation "
        设置 NTP
        param servers: NTP 同步源
        type servers: list
        param threshold: NTP 误差阈值
        type threshold: float
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8835 8838])
                            ("servers" variable nil (reparse-symbol function_parameters) [8840 8847])
                            ("threshold" variable nil (reparse-symbol function_parameters) [8849 8858]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8806 9119])
                    ("get_ntp_info" function
                       (:documentation "
        获取 NTP 信息, 包括同步源和阈值
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9158 9161]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9124 9355])
                    ("open_ntp" function
                       (:documentation "
        开启 NTP 服务
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9390 9393]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9360 9475])
                    ("close_ntp" function
                       (:documentation "
        关闭 NTP 服务
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9511 9514]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9480 9597])
                    ("get_messaging_ip" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation " 获取 vip ")
                        (reparse-symbol indented_block_body) [9602 9697]))                  
                :type "class")
                nil [5204 9697]))          
      :file "api.py"
      :pointmax 9697
      :fsize 10178
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax '((INDENT_BLOCK 7293 . 7480) (NEWLINE 7292 . 7293) (COLON 7291 . 7292) (TRY 5977 . 5980) (AS 7285 . 7287)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
interface.py
\"\"\"" code nil nil [1 21])
            ("abc" include nil nil [24 54])
            ("HostInterface" type
               (:documentation "
    主机管理类接口抽象类
    职责:
        1. 声明主机管理类需要实现的外部接口
    "
                :members 
                  ( ("get_mainboard_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        查询服务器主板信息外部接口
        ")
                        (reparse-symbol indented_block_body) [150 260])
                    ("get_cpu_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        查询服务器CPU信息外部接口
        ")
                        (reparse-symbol indented_block_body) [265 370])
                    ("get_mem_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        查询服务器Mem信息外部接口
        ")
                        (reparse-symbol indented_block_body) [375 480])
                    ("get_disk_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        查询服务器Disk信息外部接口
        ")
                        (reparse-symbol indented_block_body) [485 592])
                    ("shutdown" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        关闭服务器接口
        ")
                        (reparse-symbol indented_block_body) [597 691])
                    ("reboot" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil)
                            ("abstractmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        重启服务器接口
        ")
                        (reparse-symbol indented_block_body) [696 788]))                  
                :type "class")
                nil [57 788]))          
      :file "interface.py"
      :pointmax 788
      :fsize 963
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
hwinfo_help.py
\"\"\"" code nil nil [1 23])
            ("rccpxuanyuan.common" include nil nil [25 65])
            ("rccpxuanyuan.common" include nil nil [66 107])
            ("LSBLK_MOUNTPOINT" variable nil nil [110 146])
            ("DF_AVAIL_OPTION" variable nil nil [147 183])
            ("_exe_hwinfo" function (:arguments 
              ( ("options" variable nil (reparse-symbol function_parameters) [217 224]))              ) nil [201 279])
            ("_exe_hwinfo_disk" function (:arguments 
              ( ("directory" variable nil (reparse-symbol function_parameters) [302 311]))              ) nil [281 390])
            ("_parse_hwsession" function (:arguments 
              ( ("hwsession" variable nil (reparse-symbol function_parameters) [413 422]))              ) nil [392 848])
            ("get_hwinfo_disk" function
               (:documentation "
    查询指定硬盘设备文件的hwinfo信息，返回信息字典
    "
                :arguments 
                  ( ("dev_file" variable nil (reparse-symbol function_parameters) [870 878]))                  )
                nil [850 1029])
            ("_exe_lsblk_mountpoint" function (:arguments 
              ( ("dev_file" variable nil (reparse-symbol function_parameters) [1071 1079]))              ) nil [1045 1154])
            ("get_disk_mountpoint" function
               (:documentation "
    查询指定硬盘设备文件的挂载点，返回挂载点列表
    "
                :arguments 
                  ( ("dev_file" variable nil (reparse-symbol function_parameters) [1180 1188]))                  )
                nil [1156 1501])
            ("_exe_df" function (:arguments 
              ( ("option" variable nil (reparse-symbol function_parameters) [1526 1532])
                ("directory" variable nil (reparse-symbol function_parameters) [1534 1543]))              ) nil [1514 1605])
            ("get_df_avail" function
               (:documentation "
    查询指定路径可用空间，返回可用容量
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [1624 1633]))                  )
                nil [1607 1910])
            ("get_disk_avail" function
               (:documentation "
    查询指定硬盘设备可用空间，返回可用容量
    "
                :arguments 
                  ( ("dev_file" variable nil (reparse-symbol function_parameters) [1931 1939]))                  )
                nil [1912 2165])
            ("_exe_sys_block_rotational" function (:arguments 
              ( ("block_name" variable nil (reparse-symbol function_parameters) [2215 2225]))              ) nil [2185 2347])
            ("get_disk_rotational" function
               (:documentation "
    查询指定硬盘设备可旋转标志
    "
                :arguments 
                  ( ("block_name" variable nil (reparse-symbol function_parameters) [2373 2383]))                  )
                nil [2349 2470]))          
      :file "hwinfo_help.py"
      :pointmax 2470
      :fsize 2651
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
smart_help.py模块
提供解析smartctl输出接口
\"\"\"" code nil nil [1 41])
            ("os" include nil nil [43 52])
            ("rccpxuanyuan.common" include nil nil [53 93])
            ("SMART_ALL_INFO_SECTION_HEADER" variable nil nil [96 166])
            ("_exe_smartctl" function (:arguments 
              ( ("options" variable nil (reparse-symbol function_parameters) [187 194]))              ) nil [169 251])
            ("_smartctl_dev_info" function (:arguments 
              ( ("device_file" variable nil (reparse-symbol function_parameters) [276 287]))              ) nil [253 359])
            ("_smartctl_dev_scan" function nil nil [361 450])
            ("_get_dev_list" function nil nil [452 1067])
            ("_smart_info_parse" function (:arguments 
              ( ("smart_info" variable nil (reparse-symbol function_parameters) [1091 1101]))              ) nil [1069 1401])
            ("_get_smart_dev_info" function (:arguments 
              ( ("device_file" variable nil (reparse-symbol function_parameters) [1427 1438]))              ) nil [1403 1711])
            ("get_smart_info" function (:documentation " get hardware info ") nil [1713 2192]))          
      :file "smart_help.py"
      :pointmax 2192
      :fsize 2211
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Collect host capabilities\"\"\"" code nil nil [821 852])
            ("__future__" include nil nil [853 891])
            ("__future__" include nil nil [892 923])
            ("os" include nil nil [925 934])
            ("logging" include nil nil [935 949])
            ("libvirt" include nil nil [951 965])
            ("rccpxuanyuan.common" include nil nil [967 1004])
            ("rccpxuanyuan.common" include nil nil [1005 1044])
            ("rccpxuanyuan.common" include nil nil [1045 1087])
            ("rccpxuanyuan.common" include nil nil [1088 1125])
            ("rccpxuanyuan.common" include nil nil [1126 1165])
            ("rccpxuanyuan.common" include nil nil [1166 1215])
            ("rccpxuanyuan.config" include nil nil [1216 1254])
            ("rccpxuanyuan.host" include nil nil [1255 1295])
            ("rccpxuanyuan.storage" include nil nil [1296 1332])
            ("rccpxuanyuan.host" include nil nil [1333 1370])
            ("rccpxuanyuan" include nil nil [1371 1400])
            ("rccpxuanyuan" include nil nil [1401 1435])
            ("rccpxuanyuan" include nil nil [1436 1472])
            ("rccpxuanyuan" include nil nil [1473 1502])
            ("rccpxuanyuan" include nil nil [1503 1534])
            ("rccpxuanyuan" include nil nil [1535 1565])
            ("try" code nil nil [1567 1672])
            ("_parseKeyVal" function (:arguments 
              ( ("lines" variable nil (reparse-symbol function_parameters) [1691 1696])
                ("delim" variable nil (reparse-symbol function_parameters) [1698 1703]))              ) nil [1674 1898])
            ("_getIscsiIniName" function nil nil [1900 2139])
            ("get" function nil nil [2141 4608])
            ("_dropVersion" function (:arguments 
              ( ("vstring" variable nil (reparse-symbol function_parameters) [4627 4634])
                ("logMessage" variable nil (reparse-symbol function_parameters) [4636 4646]))              ) nil [4610 5028])
            ("_getVersionInfo" function (:decorators 
              ( ("cache.Memoized" function (:type "decorator") nil nil))              ) nil [5030 6297])
            ("_isHostedEngineDeployed" function nil nil [6299 6674])
            ("_isVncEncrypted" function (:documentation "
    If VNC is configured to use encrypted connections, libvirt's qemu.conf
    contains the following flag:
        vnc_tls = 1
    ") nil [6676 7113]))          
      :file "caps.py"
      :pointmax 7113
      :fsize 7112
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
sysfs_help.py
\"\"\"" code nil nil [1 22])
            ("os" include nil nil [24 33])
            ("re" include nil nil [34 43])
            ("rccpxuanyuan.common" include nil nil [45 86])
            ("rccpxuanyuan.common" include nil nil [87 127])
            ("SCSI_DISK_PATH" variable nil nil [130 169])
            ("SCSI_DISK_BLOCK_PATH" variable nil nil [170 209])
            ("SCSI_DISK_MODEL" variable nil nil [210 244])
            ("DEVNAME_PATTERN" variable nil nil [245 273])
            ("DEV_NAME" variable nil nil [274 295])
            ("parse_scsi_disk" function
               (:documentation "
    解析/sys/class/scsi_disk目录下单块盘信息
    正常情况返回例子scsi_disk_info =
        {
            \"bus_id\": \"0:0:0:0\",
            \"dev_name\": \"sda\",
            \"model\": \"xxxxxx\",
            \"vendor\", # options
        }
    异常情况返回例子：
        raise FileNotFoundError, KeyError异常
    "
                :arguments 
                  ( ("bus_id" variable nil (reparse-symbol function_parameters) [318 324]))                  )
                nil [298 1383])
            ("parse_scsi_disks" function (:documentation "
    解析/sys/class/scsi_disk所有块盘信息
    正常情况返回例子：
        {
            \"0:0:0:0\": scsi_disk_info,
            \"1:0:0:0\": scsi_disk_info,
        }
    异常情况返回例子：
        1. scsi_disk_paths不存在: raise FileNotFoundError;
        2. bus_id错误: 返回{}
    ") nil [1385 1964])
            ("parse_scsi_disks_help" function (:documentation "
    建立从设备名(sda)到scsi_disk单块盘信息的映射
    正常情况返回例子：
        {
            \"sda\": scsi_disks_info,
            \"sdb\": scsi_disks_info,
        }
    异常返回:
        1. scsi_disk_paths不存在: raise FileNotFoundError;
        2. bus_id错误: 返回{}
    ") nil [1966 2445]))          
      :file "sysfs_help.py"
      :pointmax 2445
      :fsize 2638
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuan!rccpxuanyuan!host!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
