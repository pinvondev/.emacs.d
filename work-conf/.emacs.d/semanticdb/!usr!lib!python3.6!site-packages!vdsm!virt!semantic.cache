;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-automake-mode
      :tags 
        '( ("$(top_srcdir)/build-aux/Makefile.subs" include nil nil [819 865])
            ("SUBDIRS" variable (:default-value ("jobs" "libvirthook" "vmdevices")) nil [866 903])
            ("vdsmvirtdir" variable (:default-value ("$(vdsmpylibdir)/virt")) nil [904 939])
            ("dist_vdsmvirt_PYTHON" variable (:default-value ("__init__.py" "backup.py" "displaynetwork.py" "domain_descriptor.py" "domxml_preprocess.py" "drivemonitor.py" "events.py" "guestagent.py" "libvirtnetwork.py" "libvirtxml.py" "metadata.py" "migration.py" "periodic.py" "qemuguestagent.py" "guestagenthelpers.py" "recovery.py" "sampling.py" "saslpasswd2.py" "secret.py" "utils.py" "virdomain.py" "vm.py" "vmchannels.py" "vmexitreason.py" "vmpowerdown.py" "vmstats.py" "vmstatus.py" "vmtune.py" "vmxml.py" "xmlconstants.py" "$(NULL)")) nil [939 1473]))          
      :file "Makefile.am"
      :pointmax 1473
      :fsize 1472
      :lastmodtime '(23968 6112 223983 693000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("__future__" include nil nil [860 891])
            ("\"\"\"
Code to perform periodic maintenance and bookkeeping of the VMs.
\"\"\"" code nil nil [893 965])
            ("logging" include nil nil [967 981])
            ("threading" include nil nil [982 998])
            ("libvirt" include nil nil [1000 1014])
            ("six" include nil nil [1015 1025])
            ("vdsm" include nil nil [1027 1052])
            ("vdsm" include nil nil [1053 1074])
            ("vdsm" include nil nil [1075 1104])
            ("vdsm.common" include nil nil [1105 1135])
            ("vdsm.common" include nil nil [1136 1169])
            ("vdsm.common" include nil nil [1170 1211])
            ("vdsm.config" include nil nil [1212 1242])
            ("vdsm.virt" include nil nil [1243 1274])
            ("vdsm.virt" include nil nil [1275 1305])
            ("vdsm.virt" include nil nil [1306 1336])
            ("vdsm.virt" include nil nil [1337 1368])
            ("vdsm.virt" include nil nil [1369 1399])
            ("_WORKERS" variable nil nil [1544 1600])
            ("_TASK_PER_WORKER" variable nil nil [1601 1673])
            ("_TASKS" code nil nil [1674 1710])
            ("_MAX_WORKERS" variable nil nil [1711 1766])
            ("_THROTTLING_INTERVAL" variable nil nil [1767 1792])
            ("_operations" variable nil nil [1805 1821])
            ("_executor" variable nil nil [1822 1838])
            ("Error" type
               (:superclasses ("errors.Base")
                :members 
                  ( ("msg" variable nil (reparse-symbol indented_block_body) [1871 1920]))                  
                :type "class")
                nil [1841 1921])
            ("InvalidValue" type
               (:superclasses ("Error")
                :members 
                  ( ("msg" variable nil (reparse-symbol indented_block_body) [1954 2026])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2081 2103])
                            ("self" variable nil (reparse-symbol indented_block_body) [2112 2126])
                            ("self" variable nil (reparse-symbol indented_block_body) [2135 2153]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2045 2049])
                            ("op_desc" variable nil (reparse-symbol function_parameters) [2051 2058])
                            ("key" variable nil (reparse-symbol function_parameters) [2060 2063])
                            ("value" variable nil (reparse-symbol function_parameters) [2065 2070]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2032 2154]))                  
                :type "class")
                nil [1923 2154])
            ("_timeout_from" function
               (:documentation "
    Estimate a sensible timeout given a periodic interval.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [2174 2182]))                  )
                nil [2156 2285])
            ("start" function
               (:documentation "
    Starts all the periodic Operations, to be run in one executor.Executor
    instance owned by the `periodic` module.
    There is no guarantee on the order on which the operations will be
    started; this function only guarantees that it will attempt to
    start every known Operation.
    "
                :arguments 
                  ( ("cif" variable nil (reparse-symbol function_parameters) [2297 2300])
                    ("scheduler" variable nil (reparse-symbol function_parameters) [2302 2311]))                  )
                nil [2287 3235])
            ("stop" function nil nil [3237 3326])
            ("Operation" type
               (:documentation "
    Operation runs a callable with a given period until
    someone stops it.
    Operation builds on Schedule and on Executor,
    so that the underlying \"func\" is called periodically.
    It would be called again even if a former call is blocked.
    "
                :superclasses ("object")
                :members 
                  ( ("_log" variable nil (reparse-symbol indented_block_body) [3623 3674])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        parameters:

        func: callable, without arguments (task interface).
        period: `func' will be invoked every `period' seconds.
                Please note that timing may not be exact due to
                (OS) scheduling constraings.
        timeout: same meaning of Executor.dispatch
        scheduler: Scheduler instance to use
        executor: Executor instance to use
        exclusive: boolean flag to control the exclusiveness of the operation.
                   Exclusive operations are scheduled again when and only when
                   completed (conservative approach). Non-exclusive operations
                   are scheduled again just after being dispatched to the
                   executor (optimistic approach).
                   The operations are non-exclusive by default.
        discard: boolean flag to pass to the underlying executor.
                 See the documentation of the 'Executor.dispatch' method.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3807 4780])
                            ("self" variable nil (reparse-symbol indented_block_body) [4789 4806])
                            ("self" variable nil (reparse-symbol indented_block_body) [4815 4836])
                            ("timeout" code nil (reparse-symbol indented_block_body) [4904 4911])
                            ("self" variable nil (reparse-symbol indented_block_body) [4920 4947])
                            ("executor" code nil (reparse-symbol indented_block_body) [5008 5016])
                            ("self" variable nil (reparse-symbol indented_block_body) [5025 5052])
                            ("self" variable nil (reparse-symbol indented_block_body) [5061 5084])
                            ("self" variable nil (reparse-symbol indented_block_body) [5093 5122])
                            ("self" variable nil (reparse-symbol indented_block_body) [5131 5152])
                            ("self" variable nil (reparse-symbol indented_block_body) [5161 5178])
                            ("self" variable nil (reparse-symbol indented_block_body) [5187 5215]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3693 3697])
                            ("func" variable nil (reparse-symbol function_parameters) [3699 3703])
                            ("period" variable nil (reparse-symbol function_parameters) [3705 3711])
                            ("scheduler" variable nil (reparse-symbol function_parameters) [3713 3722])
                            ("timeout" variable nil (reparse-symbol function_parameters) [3724 3731])
                            ("executor" variable nil (reparse-symbol function_parameters) [3735 3743])
                            ("exclusive" variable nil (reparse-symbol function_parameters) [3767 3776])
                            ("discard" variable nil (reparse-symbol function_parameters) [3784 3791]))                          
                        :documentation "
        parameters:

        func: callable, without arguments (task interface).
        period: `func' will be invoked every `period' seconds.
                Please note that timing may not be exact due to
                (OS) scheduling constraings.
        timeout: same meaning of Executor.dispatch
        scheduler: Scheduler instance to use
        executor: Executor instance to use
        exclusive: boolean flag to control the exclusiveness of the operation.
                   Exclusive operations are scheduled again when and only when
                   completed (conservative approach). Non-exclusive operations
                   are scheduled again just after being dispatched to the
                   executor (optimistic approach).
                   The operations are non-exclusive by default.
        discard: boolean flag to pass to the underlying executor.
                 See the documentation of the 'Executor.dispatch' method.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3680 5216])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5231 5235]))                          )
                        (reparse-symbol indented_block_body) [5221 5766])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5780 5784]))                          )
                        (reparse-symbol indented_block_body) [5771 6058])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6076 6080]))                          )
                        (reparse-symbol indented_block_body) [6063 6298])
                    ("_reschedule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6319 6323]))                          
                        :documentation "
        Schedule a next call of `func'.
        ")
                        (reparse-symbol indented_block_body) [6303 6519])
                    ("_try_to_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6545 6549]))                          
                        :documentation "
        Dispatch another Execution, if Operation is still running.
        ")
                        (reparse-symbol indented_block_body) [6524 6731])
                    ("_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6750 6754]))                          
                        :documentation "
        Send `func' to Executor to be run as soon as possible.
        ")
                        (reparse-symbol indented_block_body) [6736 7437])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7455 7459]))                          )
                        (reparse-symbol indented_block_body) [7442 7556]))                  
                :type "class")
                nil [3328 7556])
            ("VmDispatcher" type
               (:documentation "
    Adapter class. Dispatch an Operation to all VMs, to improve
    isolation among them.
    "
                :superclasses ("object")
                :members 
                  ( ("_log" variable nil (reparse-symbol indented_block_body) [7697 7751])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        get_vms: callable which will return a dict which maps
                 vm_ids to vm_instances
        executor: executor.Executor instance
        create: callable to obtain the real callable to
                dispatch, with its timeout
        timeout: per-vm operation timeout, in seconds
                 (fractions allowed).
        \"\"\"" code nil (reparse-symbol indented_block_body) [7821 8174])
                            ("self" variable nil (reparse-symbol indented_block_body) [8183 8206])
                            ("self" variable nil (reparse-symbol indented_block_body) [8215 8240])
                            ("self" variable nil (reparse-symbol indented_block_body) [8249 8270])
                            ("self" variable nil (reparse-symbol indented_block_body) [8279 8302]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7770 7774])
                            ("get_vms" variable nil (reparse-symbol function_parameters) [7776 7783])
                            ("executor" variable nil (reparse-symbol function_parameters) [7785 7793])
                            ("create" variable nil (reparse-symbol function_parameters) [7795 7801])
                            ("timeout" variable nil (reparse-symbol function_parameters) [7803 7810]))                          
                        :documentation "
        get_vms: callable which will return a dict which maps
                 vm_ids to vm_instances
        executor: executor.Executor instance
        create: callable to obtain the real callable to
                dispatch, with its timeout
        timeout: per-vm operation timeout, in seconds
                 (fractions allowed).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7757 8303])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8321 8325]))                          )
                        (reparse-symbol indented_block_body) [8308 9638])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9656 9660]))                          )
                        (reparse-symbol indented_block_body) [9643 9765]))                  
                :type "class")
                nil [7558 9765])
            ("_RunnableOnVm" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9832 9845]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9813 9817])
                            ("vm" variable nil (reparse-symbol function_parameters) [9819 9821]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9800 9846])
                    ("required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9878 9882]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9851 10048])
                    ("runnable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10080 10084]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10053 10138])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10156 10160]))                          )
                        (reparse-symbol indented_block_body) [10143 11141])
                    ("_execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11159 11163]))                          )
                        (reparse-symbol indented_block_body) [11146 11200])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11218 11222]))                          )
                        (reparse-symbol indented_block_body) [11205 11334]))                  
                :type "class")
                nil [9767 11334])
            ("UpdateVolumes" type
               (:superclasses ("_RunnableOnVm")
                :members 
                  ( ("required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11404 11408]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11377 11586])
                    ("_execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11604 11608]))                          )
                        (reparse-symbol indented_block_body) [11591 11869]))                  
                :type "class")
                nil [11336 11869])
            ("BlockjobMonitor" type
               (:superclasses ("_RunnableOnVm")
                :members 
                  ( ("required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11941 11945]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11914 12307])
                    ("_execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12325 12329]))                          )
                        (reparse-symbol indented_block_body) [12312 12364]))                  
                :type "class")
                nil [11871 12364])
            ("DriveWatermarkMonitor" type
               (:superclasses ("_RunnableOnVm")
                :members 
                  ( ("required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12442 12446]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12415 12573])
                    ("_execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12591 12595]))                          )
                        (reparse-symbol indented_block_body) [12578 12632]))                  
                :type "class")
                nil [12366 12632])
            ("_kill_long_paused_vms" function (:arguments 
              ( ("cif" variable nil (reparse-symbol function_parameters) [12660 12663]))              ) nil [12634 12927])
            ("_create" function (:arguments 
              ( ("cif" variable nil (reparse-symbol function_parameters) [12941 12944])
                ("scheduler" variable nil (reparse-symbol function_parameters) [12946 12955]))              ) nil [12929 15194]))          
      :file "periodic.py"
      :pointmax 15194
      :fsize 15193
      :lastmodtime '(23968 6112 225983 729000)
      :unmatched-syntax '((INDENT_BLOCK 10650 . 11141) (NEWLINE 10649 . 10650) (COLON 10648 . 10649) (TRY 10214 . 10217) (AS 10644 . 10646) (INDENT_BLOCK 7256 . 7345) (NEWLINE 7255 . 7256) (COLON 7254 . 7255) (FINALLY 7247 . 7254) (INDENT_BLOCK 6231 . 6298) (NEWLINE 6230 . 6231) (COLON 6229 . 6230) (FINALLY 6222 . 6229) (NAME 4956 . 4960) (IF 4983 . 4985) (ELSE 5003 . 5007) (NAME 4845 . 4849) (IF 4883 . 4885) (ELSE 4899 . 4903) (INDENT_BLOCK 3175 . 3235) (NEWLINE 3174 . 3175) (COLON 3173 . 3174) (TRY 3120 . 3123) (AS 3169 . 3171))))
  :file "!usr!lib!python3.6!site-packages!vdsm!virt!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
