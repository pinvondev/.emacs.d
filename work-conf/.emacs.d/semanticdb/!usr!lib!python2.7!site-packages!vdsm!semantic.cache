;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-automake-mode
      :tags 
        '( ("$(top_srcdir)/build-aux/Makefile.subs" include nil nil [820 866])
            ("SUBDIRS" variable (:default-value ("api" "common" "tool" "profiling" "rpc" "network" "virt" "storage" "hook" "host" "metrics" "gluster" "supervdsm_api")) nil [867 970])
            ("dist_vdsmpylib_PYTHON" variable (:default-value ("__init__.py" "alignmentScan.py" "API.py" "client.py" "clientIF.py" "constants.py" "config.py" "cpuinfo.py" "dmidecodeUtil.py" "executor.py" "health.py" "hugepages.py" "jobs.py" "jsonrpcvdscli.py" "kvm2ovirt.py" "logUtils.py" "machinetype.py" "moduleloader.py" "momIF.py" "mkimage.py" "numa.py" "osinfo.py" "ppc64HardwareInfo.py" "protocoldetector.py" "schedule.py" "sslutils.py" "supervdsm_server.py" "taskset.py" "throttledlog.py" "utils.py" "v2v.py" "vdsmd.py" "virtsparsify.py" "virtsysprep.py" "$(NULL)")) nil [971 1539])
            ("nodist_vdsmpylib_PYTHON" variable (:default-value ("$(NULL)")) nil [1540 1577])
            ("nodist_noinst_DATA" variable (:default-value ("vdsm.conf.sample" "$(NULL)")) nil [1578 1629])
            ("CLEANFILES" variable (:default-value ("$(nodist_vdsmpylib_PYTHON)" "$(nodist_noinst_DATA)" "$(NULL)")) nil [1630 1709])
            ("EXTRA_DIST" variable (:default-value ("vdsm.conf.sample" "$(NULL)")) nil [1711 1755])
            ("vdsm.conf.sample" function (:arguments ("Makefile" "$(srcdir)/common/config.py")) nil [1756 1876])
            ("install-data-local" function (:arguments ("install-data-sample-vdsm-conf")) nil [1877 1970])
            ("uninstall-local" function (:arguments ("uninstall-data-sample-vdsm-conf")) nil [1971 2023])
            ("install-data-sample-vdsm-conf" function nil nil [2024 2165])
            ("uninstall-data-sample-vdsm-conf" function nil nil [2166 2241]))          
      :file "Makefile.am"
      :pointmax 2308
      :fsize 2307
      :lastmodtime '(23968 6112 180982 924000)
      :unmatched-syntax '((semantic-list 2287 . 2307) (punctuation 2286 . 2287) (semantic-list 2257 . 2282) (punctuation 2256 . 2257) (punctuation 2251 . 2252) (symbol 2242 . 2251) (bol 2242 . 2242)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("\"\"\"
A module containing miscellaneous functions and classes that are used
plentifuly around vdsm.

.. attribute:: utils.symbolerror

    Contains a reverse dictionary pointing from error string to its error code.
\"\"\"" code nil nil [861 1077])
            ("collections" include nil nil [1078 1132])
            ("contextlib" include nil nil [1133 1170])
            ("errno" include nil nil [1171 1183])
            ("functools" include nil nil [1184 1200])
            ("logging" include nil nil [1201 1215])
            ("six" include nil nil [1216 1226])
            ("sys" include nil nil [1227 1237])
            ("os" include nil nil [1238 1247])
            ("socket" include nil nil [1248 1261])
            ("threading" include nil nil [1262 1278])
            ("time" include nil nil [1279 1290])
            ("vdsm.common" include nil nil [1292 1333])
            ("vdsm.common.compat" include nil nil [1334 1371])
            ("vdsm.common.proc" include nil nil [1372 1408])
            ("_THP_STATE_PATH" variable nil nil [1410 1473])
            ("if" code nil nil [1474 1589])
            ("IOCLASS" type
               (:members 
                  ( ("REALTIME" variable nil (reparse-symbol indented_block_body) [1610 1622])
                    ("BEST_EFFORT" variable nil (reparse-symbol indented_block_body) [1627 1642])
                    ("IDLE" variable nil (reparse-symbol indented_block_body) [1647 1655]))                  
                :type "class")
                nil [1591 1656])
            ("NICENESS" type
               (:members 
                  ( ("NORMAL" variable nil (reparse-symbol indented_block_body) [1678 1688])
                    ("HIGH" variable nil (reparse-symbol indented_block_body) [1693 1702]))                  
                :type "class")
                nil [1658 1703])
            ("_parseMemInfo" function
               (:documentation "
    Parse the content of ``/proc/meminfo`` as list of strings
    and return its content as a dictionary.
    "
                :arguments 
                  ( ("lines" variable nil (reparse-symbol function_parameters) [1723 1728]))                  )
                nil [1705 1986])
            ("readMemInfo" function (:documentation "
    Parse ``/proc/meminfo`` and return its content as a dictionary.

    For a reason unknown to me, ``/proc/meminfo`` is sometimes
    empty when opened. If that happens, the function retries to open it
    3 times.

    :returns: a dictionary representation of ``/proc/meminfo``
    ") nil [1988 2707])
            ("_parseCmdLine" function (:arguments 
              ( ("pid" variable nil (reparse-symbol function_parameters) [2727 2730]))              ) nil [2709 2833])
            ("getCmdArgs" function (:arguments 
              ( ("pid" variable nil (reparse-symbol function_parameters) [2850 2853]))              ) nil [2835 3177])
            ("convertToStr" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [3196 3199]))              ) nil [3179 3363])
            ("Canceled" type
               (:documentation "
    Raised by methods decorated with @cancelpoint.

    Objects using cancellation points may like to handle this exception for
    cleaning up after cancellation.

    Inherits from BaseException so it can propagate through normal Exception
    handlers.
    "
                :superclasses ("BaseException")
                :type "class")
                nil [3365 3668])
            ("cancelpoint" function
               (:documentation "
    Decorate a method so it raises Canceled exception if the methods is invoked
    after the object was canceled.

    Decorated object must implement __canceled__ method, returning truthy value
    if the object is canceled.
    "
                :arguments 
                  ( ("meth" variable nil (reparse-symbol function_parameters) [3686 3690]))                  )
                nil [3670 4195])
            ("symbolerror" variable nil nil [4197 4213])
            ("for" code nil nil [4214 4310])
            ("closing" type
               (:documentation "
    Context Manager that is responsible for closing the object it gets upon
    completion of the with statement.
    __exit__ will be called in the end of the with statement and in case of
    exception during the object lifetime.

    Adaptation from https://docs.python.org/2.7/library/contextlib.html
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4714 4728])
                            ("self" variable nil (reparse-symbol indented_block_body) [4737 4751]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4673 4677])
                            ("obj" variable nil (reparse-symbol function_parameters) [4679 4682])
                            ("log" variable nil (reparse-symbol function_parameters) [4684 4687]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4660 4752])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4771 4775]))                          )
                        (reparse-symbol indented_block_body) [4757 4802])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4820 4824])
                            ("t" variable nil (reparse-symbol function_parameters) [4826 4827])
                            ("v" variable nil (reparse-symbol function_parameters) [4829 4830])
                            ("tb" variable nil (reparse-symbol function_parameters) [4832 4834]))                          )
                        (reparse-symbol indented_block_body) [4807 5055]))                  
                :type "class")
                nil [4312 5055])
            ("Callback" type
               (:members 
                  ( ("log" variable nil (reparse-symbol indented_block_body) [5130 5171])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5190 5194]))                          )
                        (reparse-symbol indented_block_body) [5177 5552]))                  
                :type "class")
                nil [5057 5552])
            ("CallbackChain" type
               (:documentation "
    Encapsulates the pattern of calling multiple alternative functions
    to achieve some action.

    The chain ends when the action succeeds (indicated by a callback
    returning True) or when it runs out of alternatives.
    "
                :superclasses ("threading.Thread")
                :members 
                  ( ("log" variable nil (reparse-symbol indented_block_body) [5839 5885])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :param callbacks:
            iterable of callback objects. Individual callback should be
            callable and when invoked should return True/False based on whether
            it was successful in accomplishing the chain's action.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5933 6193])
                            ("super" code nil (reparse-symbol indented_block_body) [6202 6239])
                            ("self" variable nil (reparse-symbol indented_block_body) [6248 6266])
                            ("self" variable nil (reparse-symbol indented_block_body) [6275 6308]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5904 5908])
                            ("callbacks" variable nil (reparse-symbol function_parameters) [5910 5919]))                          
                        :documentation "
        :param callbacks:
            iterable of callback objects. Individual callback should be
            callable and when invoked should return True/False based on whether
            it was successful in accomplishing the chain's action.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5891 6309])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6322 6326]))                          
                        :documentation "Invokes serially the callback objects until any reports success.")
                        (reparse-symbol indented_block_body) [6314 6897])
                    ("addCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6918 6922])
                            ("func" variable nil (reparse-symbol function_parameters) [6924 6928])
                            ("args" variable nil (reparse-symbol function_parameters) [6930 6935])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6937 6945]))                          
                        :documentation "
        :param func:
            the callback function
        :param args:
            args of the callback
        :param kwargs:
            kwargs of the callback
        :return:
        ")
                        (reparse-symbol indented_block_body) [6902 7216]))                  
                :type "class")
                nil [5554 7216])
            ("RollbackContext" type
               (:superclasses ("object")
                :members 
                  ( ("'''
    A context manager for recording and playing rollback.
    The first exception will be remembered and re-raised after rollback

    Sample usage:
    with RollbackContext() as rollback:
        step1()
        rollback.prependDefer(lambda: undo step1)
        def undoStep2(arg): pass
        step2()
        rollback.prependDefer(undoStep2, arg)

    More examples see tests/utilsTests.py
    '''" code nil (reparse-symbol indented_block_body) [7253 7657])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7715 7733])
                            ("self" variable nil (reparse-symbol indented_block_body) [7742 7785]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7675 7679])
                            ("on_exception_only" variable nil (reparse-symbol function_parameters) [7681 7698]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7662 7786])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7805 7809]))                          )
                        (reparse-symbol indented_block_body) [7791 7832])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7850 7854])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [7856 7864])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [7866 7875])
                            ("traceback" variable nil (reparse-symbol function_parameters) [7877 7886]))                          
                        :documentation "
        If this function doesn't return True (or raises a different
        exception), python re-raises the original exception once this
        function is finished.
        ")
                        (reparse-symbol indented_block_body) [7837 8611])
                    ("defer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8626 8630])
                            ("func" variable nil (reparse-symbol function_parameters) [8632 8636])
                            ("args" variable nil (reparse-symbol function_parameters) [8638 8643])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8645 8653]))                          )
                        (reparse-symbol indented_block_body) [8616 8707])
                    ("prependDefer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8729 8733])
                            ("func" variable nil (reparse-symbol function_parameters) [8735 8739])
                            ("args" variable nil (reparse-symbol function_parameters) [8741 8746])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8748 8756]))                          )
                        (reparse-symbol indented_block_body) [8712 8813]))                  
                :type "class")
                nil [7218 8813])
            ("running" function
               (:decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("runnable" variable nil (reparse-symbol function_parameters) [8843 8851]))                  )
                nil [8815 8944])
            ("get_selinux_enforce_mode" function (:documentation "
    Returns the SELinux mode as reported by kernel.

    1 = enforcing - SELinux security policy is enforced.
    0 = permissive - SELinux prints warnings instead of enforcing.
    -1 = disabled - No SELinux policy is loaded.
    ") nil [8946 9568])
            ("picklecopy" function
               (:documentation "
    Returns a deep copy of argument,
    like copy.deepcopy() does, but faster.

    To be faster, this function leverages the pickle
    module. The following types are safely handled:

    * None, True, and False
    * integers, long integers, floating point numbers,
      complex numbers
    * normal and Unicode strings
    * tuples, lists, sets, and dictionaries containing
      only picklable objects
    * functions defined at the top level of a module
    * built-in functions defined at the top level of a module
    * classes that are defined at the top level of a module
    * instances of such classes whose __dict__ or the
      result of calling __getstate__() is picklable.

    Attempts to pickle unpicklable objects will raise the
    PicklingError exception;
    For full documentation, see:
    https://docs.python.org/2/library/pickle.html
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [9585 9588]))                  )
                nil [9570 10537])
            ("round" function
               (:documentation "
    Round number n to the next multiple of size
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [10549 10550])
                    ("size" variable nil (reparse-symbol function_parameters) [10552 10556]))                  )
                nil [10539 10685])
            ("create_connected_socket" function (:arguments 
              ( ("host" variable nil (reparse-symbol function_parameters) [10715 10719])
                ("port" variable nil (reparse-symbol function_parameters) [10721 10725])
                ("sslctx" variable nil (reparse-symbol function_parameters) [10727 10733])
                ("timeout" variable nil (reparse-symbol function_parameters) [10740 10747]))              ) nil [10687 11103])
            ("stopwatch" function
               (:decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [11135 11142])
                    ("level" variable nil (reparse-symbol function_parameters) [11144 11149])
                    ("log" variable nil (reparse-symbol function_parameters) [11179 11182]))                  )
                nil [11105 11447])
            ("unique" function
               (:documentation "
    Return unique items from iterable of hashable objects, keeping the
    original order.
    "
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [11460 11468]))                  )
                nil [11449 11633])
            ("log_success" function (:arguments 
              ( ("success" variable nil (reparse-symbol function_parameters) [11651 11658])
                ("log" variable nil (reparse-symbol function_parameters) [11660 11663])
                ("msg_ok" variable nil (reparse-symbol function_parameters) [11665 11671])
                ("msg_fail" variable nil (reparse-symbol function_parameters) [11673 11681]))              ) nil [11635 11781]))          
      :file "utils.py"
      :pointmax 11781
      :fsize 11780
      :lastmodtime '(23968 6112 222983 676000)
      :unmatched-syntax '((NAME 5072 . 5082) (PAREN_BLOCK 5082 . 5123)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [822 860])
            ("os" include nil nil [862 871])
            ("collections" include nil nil [872 890])
            ("threading" include nil nil [891 907])
            ("vdsm" include nil nil [909 932])
            ("vdsm.common" include nil nil [933 962])
            ("vdsm.common" include nil nil [963 994])
            ("vdsm.common" include nil nil [995 1028])
            ("vdsm.config" include nil nil [1029 1059])
            ("_PATH" variable nil nil [1062 1096])
            ("_VM" variable nil nil [1097 1118])
            ("lock" variable nil nil [1120 1143])
            ("DEFAULT_HUGEPAGESIZE" variable nil nil [1145 1225])
            ("NonContiguousMemory" type
               (:documentation "Raised when the memory is too fragmented to allocate hugepages"
                :superclasses ("Exception")
                :type "class")
                nil [1228 1339])
            ("supported" function
               (:documentation "Small cached helper to get available hugepage sizes.

    Cached as the sizes don't change in the system's runtime.

    Args:
        path: A path to the hugepages directory. (mostly for testing purposes)

    Returns:
        A list of supported hugepage sizes available on the system.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [1371 1375]))                  
                :decorators 
                  ( ("cache.memoized" function (:type "decorator") nil nil))                  )
                nil [1341 1723])
            ("alloc" function
               (:documentation "Thread *unsafe* function to allocate hugepages.

    The default size depends on the architecture:
        x86_64: 2 MiB
        POWER8: 16 MiB

    It is a responsibility of the caller to properly handle concurrency.

    Args:
        count (int): Number of huge pages to be allocated.

    Returns:
        int: The number of successfully allocated hugepages.
    "
                :arguments 
                  ( ("count" variable nil (reparse-symbol function_parameters) [1735 1740])
                    ("size" variable nil (reparse-symbol function_parameters) [1742 1746])
                    ("path" variable nil (reparse-symbol function_parameters) [1763 1767]))                  )
                nil [1725 2252])
            ("dealloc" function
               (:documentation "Thread *unsafe* function to deallocate hugepages.

    The default size depends on the architecture:
        x86_64: 2 MiB
        POWER8: 16 MiB

    It is a responsibility of the caller to properly handle concurrency.

    Args:
        count (int): Number of huge pages to be deallocated.

    Returns:
        int: The number of successfully deallocated hugepages.
    "
                :arguments 
                  ( ("count" variable nil (reparse-symbol function_parameters) [2266 2271])
                    ("size" variable nil (reparse-symbol function_parameters) [2273 2277])
                    ("path" variable nil (reparse-symbol function_parameters) [2296 2300]))                  )
                nil [2254 2796])
            ("_alloc" function
               (:documentation "Helper to actually (de)allocate hugepages, called by public facing
        methods.

    Args:
        count: Number of hugepages to allocate (can be negative)
        size: The target hugepage size (must be supported by the system)
        path: Path to the hugepages directory.

    Returns: The amount of allocated pages (can be negative,
        implicating deallocation).

    Raises:
    "
                :arguments 
                  ( ("count" variable nil (reparse-symbol function_parameters) [2809 2814])
                    ("size" variable nil (reparse-symbol function_parameters) [2816 2820])
                    ("path" variable nil (reparse-symbol function_parameters) [2822 2826]))                  )
                nil [2798 3526])
            ("state" function
               (:documentation "Read the state of hugepages on the system.

    Args:
        path: A path to the hugepages directory. (mostly for testing purposes)

    Returns:
        A (default)dict of hugepage sizes and their properties
            (e.g. free, allocated hugepages of given size)
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [3538 3542]))                  )
                nil [3528 4778])
            ("calculate_required_allocation" function
               (:documentation "

    Args:
        cif: The ClientIF instance. Used as we need to iterate over VMs to
            reason about hugepages consumed by them.
        vm_hugepages: The number of hugepages VM requires.
        vm_hugepagesz: VM's hugepage size.

    It is a responsibility of the caller to properly handle concurrency.

    Returns:
        Number of hugepages to be allocated considering system resources at
        our disposal.
    "
                :arguments 
                  ( ("cif" variable nil (reparse-symbol function_parameters) [4814 4817])
                    ("vm_hugepages" variable nil (reparse-symbol function_parameters) [4819 4831])
                    ("vm_hugepagesz" variable nil (reparse-symbol function_parameters) [4833 4846]))                  )
                nil [4780 6508])
            ("calculate_required_deallocation" function
               (:documentation "

    Args:
        vm_hugepages: The number of hugepages VM requires.
        vm_hugepagesz: VM's hugepage size.

    It is a responsibility of the caller to properly handle concurrency.

    Returns:
        Number of hugepages to be deallocated while making sure not to break
        any constraints (reserved and preallocated pages).
    "
                :arguments 
                  ( ("vm_hugepages" variable nil (reparse-symbol function_parameters) [6546 6558])
                    ("vm_hugepagesz" variable nil (reparse-symbol function_parameters) [6560 6573]))                  )
                nil [6510 7664])
            ("_all_vm_hugepages" function (:arguments 
              ( ("cif" variable nil (reparse-symbol function_parameters) [7688 7691])
                ("vm_hugepages" variable nil (reparse-symbol function_parameters) [7693 7705])
                ("vm_hugepagesz" variable nil (reparse-symbol function_parameters) [7707 7720]))              ) nil [7666 7861])
            ("_preallocated_hugepages" function (:arguments 
              ( ("vm_hugepagesz" variable nil (reparse-symbol function_parameters) [7891 7904]))              ) nil [7863 8366])
            ("_reserved_hugepages" function (:arguments 
              ( ("hugepagesz" variable nil (reparse-symbol function_parameters) [8392 8402]))              ) nil [8368 8748])
            ("_cmdline_hugepagesz_to_kb" function (:arguments 
              ( ("cmdline" variable nil (reparse-symbol function_parameters) [8780 8787]))              ) nil [8750 8906])
            ("_size_from_dir" function
               (:documentation "Get the size portion of a hugepages directory.

    Example: _size_from_dir('hugepages-1048576Kb') ~> 1048576

    Args:
        path: Path to the hugepages directory.

    Returns:
        Just the hugepage size from the name of directory specified in path.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8927 8931]))                  )
                nil [8908 9236]))          
      :file "hugepages.py"
      :pointmax 9236
      :fsize 9235
      :lastmodtime '(23968 13267 169813 286000)
      :unmatched-syntax nil))
  :file "!usr!lib!python2.7!site-packages!vdsm!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
