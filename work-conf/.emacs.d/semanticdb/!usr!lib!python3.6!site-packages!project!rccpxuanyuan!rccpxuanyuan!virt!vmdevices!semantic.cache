;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
虚拟设备实现
\"\"\"" code nil nil [1 15])
            ("re" include nil nil [18 27])
            ("urllib.parse" include nil nil [28 61])
            ("rccpxuanyuan.common" include nil nil [63 98])
            ("rccpxuanyuan.common" include nil nil [99 139])
            ("rccpxuanyuan.common.exception" include nil nil [140 204])
            ("rccpxuanyuan.common.exception" include nil nil [205 273])
            ("rccpxuanyuan.common.exception" include nil nil [274 336])
            ("rccpxuanyuan.common.exception" include nil nil [337 400])
            ("rccpxuanyuan.common.exception" include nil nil [401 461])
            ("rccpxuanyuan.virt.vmdevices.posdriver" include nil nil [462 579])
            ("rccpxuanyuan.virt" include nil nil [580 628])
            ("_DISK_NAMESPACE" variable nil nil [631 693])
            ("_DISK_ALIA_NAME" code nil nil [694 755])
            ("Base" type
               (:documentation "
    虚拟设备基类
    职责：
        1. 声明虚拟设备公共接口和成员变量，支持上层使用
    约定：
        1. 在继承Base后，虚拟设备需要设置设备自身的别名，别名是指上层模型和
           libvirt模型中设备的名字，比如CPU设备对应别名有(\"cpu\", \"vcpu\")。设置别
           名后，上层可以通过别名查找对应设备类。
    "
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [988 1003])
                    ("_CONF" variable nil (reparse-symbol indented_block_body) [1009 1019])
                    ("_DEV_GROUP_XML" variable nil (reparse-symbol indented_block_body) [1025 1044])
                    ("set_default_conf" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置其中默认参数。
        职责：
            1. 检查设备配置组合法性；
            2. 根据上层设备配置设置改配置缺省字段；
            3. 提取公共参数
        参数 conf：上层设备配置；
        类型：泛型根据具体设备类约定入参类型；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1088 1091])
                            ("conf" variable nil (reparse-symbol function_parameters) [1093 1097]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1050 1304])
                    ("get_mutex_resource" function
                       (:documentation "
        定义：根据虚拟设备配置，获取设备多线程互斥资源。
        职责：
            1. 根据上层设备配置返回设备互斥资源标识。
        参数 conf：上层设备配置；
        类型：泛型根据具体设备类约定入参类型；
        返回值：设备互斥资源标识组合。
        类型：字符串列表；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1350 1353])
                            ("conf" variable nil (reparse-symbol function_parameters) [1355 1359]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1310 1560])
                    ("set_dev_group_xml" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置设备组总线/公共配置。
        职责：
            1. 根据上层一组设备配置，设置对应底层设备libvirt配置；
        参数 conf_group：同set_default_conf接口描述；
        类型：列表；
        参数 par_dev_dom：设置一组同类设备；
        类型：xml.etree.ElementTree对象；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1604 1607])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [1609 1619])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [1621 1632]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1565 1882])
                    ("set_xml" function
                       (:documentation "
        定义：单一虚拟设备配置翻译接口。
        职责：
            1. 翻译上层设备模型配置为libvirt XML对象；
            2. 设置设备libvirt XML缺省参数；
        参数 conf：上层单一设备模型配置；
        类型：字典{}；
        参数 dev_dom：底层设备libvirt参数；
        类型：xml.etree.ElementTree；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1916 1919])
                            ("conf" variable nil (reparse-symbol function_parameters) [1921 1925])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [1927 1934]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1887 2188])
                    ("update_xml" function
                       (:documentation "
        定义：单一虚拟设备配置翻译接口。
        职责：
            1. 翻译上层设备模型配置为libvirt XML对象；
            2. 设置设备libvirt XML缺省参数；
        参数 conf：上层单一设备模型配置；
        类型：字典{}；
        参数 dev_dom：底层设备libvirt参数；
        类型：xml.etree.ElementTree；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2225 2228])
                            ("conf" variable nil (reparse-symbol function_parameters) [2230 2234])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [2236 2243]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2193 2497])
                    ("setup_dev_group" function
                       (:documentation "
        定义：一组虚拟设备安装接口。
        职责：
            1. 完成一组虚拟设备依赖的环境配置。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数 conf_group：同set_default_conf接口描述；
        类型：列表；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2539 2542])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [2544 2554]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2502 2752])
                    ("setup" function
                       (:documentation "
        定义：单一虚拟设备安装接口。
        职责：
            1. 完成虚拟设备依赖的环境配置。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2784 2787])
                            ("conf" variable nil (reparse-symbol function_parameters) [2789 2793]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2757 2952])
                    ("teardown" function
                       (:documentation "
        定义：单一虚拟设备卸载接口。
        职责：
            1. 完成虚拟设备依赖的环境清理。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2987 2990])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [2992 2999]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2957 3114]))                  
                :type "class")
                nil [758 3114])
            ("CPU" type
               (:documentation "虚拟CPU"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [3154 3182])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [3187 3199])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [3204 3222])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3266 3269])
                            ("conf" variable nil (reparse-symbol function_parameters) [3271 3275]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3228 3693])
                    ("set_xml" function
                       (:documentation "
        将 vcpu 配置参数转换成 xml
        @cpu_conf: dict, required
        @dev_dom: xml.etree.Element, optional
        根据 conf 查找 default 对应的值是否存在, 若不存在, 则 append
                                                 若存在, 则 update
        eg.
        dev_dom: </default>
        vcpu_conf: {\"cpu\": 4}
        @ret: <vcpu>4</vcpu>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3727 3730])
                            ("conf" variable nil (reparse-symbol function_parameters) [3732 3736])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [3738 3745]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3698 4209]))                  
                :type "class")
                nil [3116 4209])
            ("Memory" type
               (:documentation "虚拟内存"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [4251 4275])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [4280 4295])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [4300 4320])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4364 4367])
                            ("conf" variable nil (reparse-symbol function_parameters) [4369 4373]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4326 4811])
                    ("set_xml" function
                       (:documentation "
        将虚拟内存配置参数转换成 xml
        @mem: dict, required

        eg.
        conf: {\"memory\": 4096}
        dev_dom: <default />
        @ret: <memory unit=\"MiB\">4096</memory>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4845 4848])
                            ("conf" variable nil (reparse-symbol function_parameters) [4850 4854])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [4856 4863]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4816 5211]))                  
                :type "class")
                nil [4211 5211])
            ("OS" type
               (:documentation "虚机系统"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [5249 5280])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [5285 5302])
                    ("_TAG" variable nil (reparse-symbol indented_block_body) [5307 5318])
                    ("\"\"\"
<os>
    <type arch=\"x86_64\" machine=\"pc-i440fx-2.11\">hvm</type>
    <boot dev='$boot_dev' />
</os>
\"\"\"" code nil (reparse-symbol indented_block_body) [5339 5446])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        @ret: dict
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5490 5493])
                            ("conf" variable nil (reparse-symbol function_parameters) [5495 5499]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5452 6252])
                    ("set_xml" function
                       (:documentation "虚拟机系统模型配置参数转换成 xml
        @conf: dict, required
        引导设备可选值有 cdrom 和 hd, 默认为 hd

        eg.
        conf: {\"boot_dev\": \"hd/cdrom\"}
        dev_dom: <default />
        @ret: <os>
                <type arch='x86_64' machine='pc-0.14'>hvm</type>
                <boot dev=\"hd\">
              </os>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6286 6289])
                            ("conf" variable nil (reparse-symbol function_parameters) [6291 6295])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [6297 6304]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6257 6788]))                  
                :type "class")
                nil [5213 6788])
            ("Interface" type
               (:documentation "虚拟网卡
    <interface type='bridge'>
      <source bridge=$src_br/>
      <virtualport type='openvswitch'>
        <parameters profileid='menial' interface_id=$interface_id/>
      </virtualport>
      <alias name=\"$dev_id\"/>
    </interface>
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [7107 7134])
                    ("\"\"\"
<interface type='bridge'>
    <mac address='$mac'/>
    <source bridge='$src_br'/>
    <virtualport type='openvswitch'>
        <parameters profileid='menial' interfaceid='$interface_id'/>
    </virtualport>
    <alias name='$dev_id'/>
</interface>
\"\"\"" code nil (reparse-symbol indented_block_body) [7162 7418])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: list, required, list 中每个元素为 dict
        @ret: list
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7462 7465])
                            ("conf" variable nil (reparse-symbol function_parameters) [7467 7471]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7424 8043])
                    ("set_xml" function
                       (:documentation "虚拟网卡设备配置参数转换成 xml
        @conf: dict, required.
        @dev_dom: xml.etree.Element, optional

        eg.
        conf: {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx}
        dev_dom: <Interface />
        @ret:
        <Interface type=\"bridge\">
            <source bridge=xxx />
            <virtualport type=\"openvswitch\">
                <parameters interface_id=xxx profileid=\"menial\" />
            </virtualport>
            <alias name=xxx />
        </Interface>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8077 8080])
                            ("conf" variable nil (reparse-symbol function_parameters) [8082 8086])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [8088 8095]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8048 8782])
                    ("set_dev_group_xml" function
                       (:documentation "批量转换虚拟网卡 conf 为 xml
        @conf_group: list, 每个元素为 dict, 对应一个网卡设备
        @dev_dom: xml.etree.Element

        eg.
        conf_group: [
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
        ]
        par_dev_dom:
            <domain>
              <devices />
            <domain/>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8826 8829])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [8831 8841])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [8843 8854]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8787 9486]))                  
                :type "class")
                nil [6823 9486])
            ("CDROM" type
               (:documentation "虚拟光驱"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [9527 9550])
                    ("_FTP_PORT" variable nil (reparse-symbol indented_block_body) [9555 9569])
                    ("_SFTP_PORT" variable nil (reparse-symbol indented_block_body) [9574 9589])
                    ("_BOOT_DEV_NUM" variable nil (reparse-symbol indented_block_body) [9594 9611])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source file='$file_path' />
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <serial>'$dev_id'</serial>
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [9641 9857])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source name='$file_path' protocol='$protocol'>
        <host name='$name' port='$port' />
    </source>
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <serial />
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [9888 10164])
                    ("set_default_conf" function
                       (:documentation "检查单项配置的合法性, 填充默认值
        @conf: dict, required

        若是 boot 设备, 则从 hda 开始编号
        否则, 从 hde 往前编号
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10208 10211])
                            ("conf" variable nil (reparse-symbol function_parameters) [10213 10217]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10170 11747])
                    ("set_xml" function
                       (:documentation "虚拟光驱设备配置参数转换成 xml
        @conf: dict, required
        @dev_dom: rccpxuanyuan.virt.vmxml.Element, optional

        1. 若 key-value 形式为 str-list, 则将 domain 这个节点传给 dev_dom,
           上层不去区分是什么设备
        2. 若 key-value 形式为 str-str, 则将当前节点传进来
        3. 根据 conf, 查找 dev_dom 中对应节点和值是否存在
           若不存在, 则 append
           若存在, 则 update
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11781 11784])
                            ("conf" variable nil (reparse-symbol function_parameters) [11786 11790])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [11792 11799]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11752 12548])
                    ("_parse_local_filepath" function
                       (:documentation "返回本地文件路径, eg:
        /test/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12596 12599])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [12601 12612]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12553 12728])
                    ("_parse_remote_filepath" function
                       (:documentation "解析远程光驱设备路径
        standard:
        ftp://[user ID:password@]<host name>[:port]/[path name/]

        ftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        sftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12777 12780])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [12782 12793]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12733 13769])
                    ("set_dev_group_xml" function
                       (:documentation "批量虚拟设备统一处理接口
        获取 par_dev_dom, 根据 par_dev_dom 的信息完善 conf
        @conf: list, required
        @par_dev_dom: xml.etree.ElementTree.Element, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13813 13816])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [13818 13828])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [13830 13841]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13774 14259])
                    ("_is_local_iso" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14299 14302])
                            ("file_path" variable nil (reparse-symbol function_parameters) [14304 14313]))                          )
                        (reparse-symbol indented_block_body) [14264 14396])
                    ("update_xml" function
                       (:documentation "
        1. 准备 conf
        2. 根据 conf 生成新的 xml
        3. 将新 xml 拷贝给旧 xml
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14433 14436])
                            ("conf" variable nil (reparse-symbol function_parameters) [14438 14442])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [14444 14451]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14401 15029]))                  
                :type "class")
                nil [9488 15029])
            ("Disk" type
               (:documentation "
    virtual disk model
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [15093 15131])
                    ("_set_booter" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("conf_group" variable nil (reparse-symbol function_parameters) [15740 15750]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15706 16185])
                    ("" code nil (reparse-symbol indented_block_body) [17528 17683])
                    ("set_default_conf" function
                       (:documentation "
        定义：根据上层硬盘设备配置组参数，设置其中默认参数lun_id, vdisk_id,
              vdisk_value, volume_id。
        职责：
            1. 检查设备配置组合法性，主要检查所有虚拟硬盘使用相同的vdisk_id；
            2. 根据设备配置组字段设置默认配置,
                主要解析disk_path和boot字段，设置vdisk_id,
                vdisk_value, volume_id, lun_id
            3. 提取公共参数
        参数 conf：上层设备配置组；
        类型：列表；
        示例：[
            {
                \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                \"disk_path\": \"1/2\",
                \"boot\": True,
            }
        ]
        设置后：[
            {
                \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                \"disk_path\": \"0/1/2\",
                \"boot\": True,
                \"vdisk_id\": \"1\",
                \"volume_id\": \"2\",
                \"vdisk_value\": \"socket,id=vdisk1,path=/var/run/vhost/0_1\"}
                \"lun_id\": 0,
            }
        ]
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17709 17712])
                            ("conf" variable nil (reparse-symbol function_parameters) [17714 17718]))                          )
                        (reparse-symbol indented_block_body) [17688 18714])
                    ("get_mutex_resource" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("conf" variable nil (reparse-symbol function_parameters) [18760 18764]))                          
                        :documentation "
        定义：根据虚拟硬盘配置，获取虚拟硬盘VDisk互斥资源。
        职责：
            1. 根据上层虚拟硬盘配置返回虚拟硬盘试用VDisk标识。
        参数 conf：同set_default_conf中conf_group；
        返回值：虚拟硬盘互斥资源vdisk_id；
        类型：字符串列表；
        ")
                        (reparse-symbol indented_block_body) [18719 19013])
                    ("set_dev_group_xml" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置设备组总线/公共配置。
        职责：
            1. 根据设备配置组参数，设置设备组总线/公共配置；
        参数 conf_group：上层设备配置组；
        类型：列表；
        参数 dev_dom：想要设置的设备domain对象；
        类型：xml.etree.ElementTree对象；
        示例：
        <domain>
        </domain>
        设置后：
        <domain xmlns:qemu=\"http://libvirt.org/schemas/domain/qemu/1.0\">
          <qemu:commandline>
            <qemu:arg value='-chardev'/>
            <qemu:arg value='$vdisk_value'/>
            <qemu:arg value='-device'/>
            <qemu:arg value='vhost-user-scsi-pci,id=scsi,
                             chardev=spdk_vhost_scsi,num_queues=1,watch'/>
          </qemu:commandline>
        </domain>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19057 19060])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [19062 19072])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [19074 19085]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19018 19992])
                    ("" code nil (reparse-symbol indented_block_body) [20046 20132])
                    ("" code nil (reparse-symbol indented_block_body) [20153 20182])
                    ("_remove_vhostscsilun" function
                       (:documentation "
        定义：封装POSDriver移除lun接口
        职责：
            1. 执行POSDriver.remove_static_vhostscsilun接口
            1. 封装POSDriver.remove_vhostscsilun异常，VDisk接口允许移除lun失败
        "
                        :arguments 
                          ( ("pool_id" variable nil (reparse-symbol function_parameters) [20212 20219])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [20221 20229]))                          )
                        (reparse-symbol indented_block_body) [20187 20484])
                    ("" code nil (reparse-symbol indented_block_body) [20537 20623])
                    ("setup_dev_group" function
                       (:documentation "
        定义：虚拟一组硬盘安装接口。
        职责：
            1. 完成虚拟所有硬盘的环境依赖。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数参考set_xml接口。
        注意：
            本接口非多线程安全，vhostscsicontroller的配置会被弄脏
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20648 20651])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [20653 20663]))                          )
                        (reparse-symbol indented_block_body) [20628 21335])
                    ("" code nil (reparse-symbol indented_block_body) [21373 21384])
                    ("teardown" function
                       (:documentation "
        定义：虚拟硬盘卸载接口。
        职责：
            1. 完成虚拟硬盘依赖的环境清理。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [21402 21405])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [21407 21414]))                          )
                        (reparse-symbol indented_block_body) [21389 21646])
                    ("_parse_disk_path" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22127 22130])
                            ("disk_path" variable nil (reparse-symbol function_parameters) [22132 22141]))                          )
                        (reparse-symbol indented_block_body) [22089 22341])
                    ("_compose_vdisk_id" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("original_pool_id" variable nil (reparse-symbol function_parameters) [22386 22402])
                            ("original_vdisk_id" variable nil (reparse-symbol function_parameters) [22404 22421]))                          
                        :documentation "
        使用底层P-OS存储中的池ID和vDisk ID来合成vdisk_id。
        ")
                        (reparse-symbol indented_block_body) [22346 22555])
                    ("_decompose_vdisk_id" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("vdisk_id" variable nil (reparse-symbol function_parameters) [22602 22610]))                          
                        :documentation "
        从已合成的vdisk_id中分解出底层P-OS存储中的池ID和vDisk ID。
        ")
                        (reparse-symbol indented_block_body) [22560 22863]))                  
                :type "class")
                nil [15031 22863])
            ("Graphics" type
               (:documentation "暂时使用默认 XML"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [22913 22939])
                    ("\"\"\"
<graphics type=\"spice\" autoport=\"yes\" listen=\"0.0.0.0\" defaultMode=\"insecure\" \\
passwd=\"\">
    <listen address=\"0.0.0.0\" type=\"address\" />
</graphics>
\"\"\"" code nil (reparse-symbol indented_block_body) [22966 23124])
                    ("\"\"\"
<video>
    <model type=\"qxl\" />
</video>
\"\"\"" code nil (reparse-symbol indented_block_body) [23148 23197])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        @ret: dict
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23241 23244])
                            ("conf" variable nil (reparse-symbol function_parameters) [23246 23250]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23203 23366])
                    ("set_dev_group_xml" function
                       (:documentation "图形界面 xml 配置
        @conf_group: dict, required
        @ret:
        <graphics type=\"spice\" autoport=\"yes\" listen=\"0.0.0.0\" \\
defaultMode=\"insecure\" passwd=\"\"
          <listen address=\"0.0.0.0\" type=\"address\" />
        </graphics>
        <video>
          <model type=\"qxl\" />
        </video>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23410 23413])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [23415 23425])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [23427 23438]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23371 24156]))                  
                :type "class")
                nil [22865 24156]))          
      :file "core.py"
      :pointmax 24156
      :fsize 27195
      :lastmodtime '(23977 9380 799642 596000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
virtual device package
\"\"\"" code nil nil [1 31])
            ("__future__" include nil nil [33 71])
            ("__future__" include nil nil [72 103])
            ("rccpxuanyuan.virt.vmdevices.interface" include nil nil [105 164])
            ("rccpxuanyuan.virt.vmdevices.interface" include nil nil [165 237]))          
      :file "__init__.py"
      :pointmax 238
      :fsize 237
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
业务层封装 POS 接口
Create on: 2019/7/24
\"\"\"" code nil nil [1 42])
            ("enum" include nil nil [45 66])
            ("rccpxuanyuan.virt.vmdevices.vhost" include nil nil [67 118])
            ("rccpxuanyuan.rpc" include nil nil [119 161])
            ("rccpxuanyuan.common" include nil nil [162 203])
            ("rccpxuanyuan.common.exception" include nil nil [204 264])
            ("_LUN_OPEN_STATE" variable nil nil [267 291])
            ("POSVHostErrorType" type
               (:documentation "POS Ctrl 错误码"
                :superclasses ("Enum")
                :members 
                  ( ("SCSI_ERR_CTRL_EXIST" variable nil (reparse-symbol indented_block_body) [352 379])
                    ("SCSI_ERR_NO_LUN" variable nil (reparse-symbol indented_block_body) [394 417])
                    ("SCSI_ERR_LUN_IN_USED" variable nil (reparse-symbol indented_block_body) [433 461])
                    ("SCSI_ERR_ALREADY_MARKED_TO_RM" variable nil (reparse-symbol indented_block_body) [478 515]))                  
                :type "class")
                nil [294 530])
            ("RemovePOSVHostSCSILunFailed" type
               (:documentation "删除 vdisk 时, ID 不存在"
                :superclasses ("POSDriverException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [621 665]))                  
                :type "class")
                nil [532 666])
            ("POSVHostExistError" type
               (:documentation "控制器已存在"
                :superclasses ("POSDriverException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [736 777]))                  
                :type "class")
                nil [668 778])
            ("ClearVHostSCSIControllerFailed" type
               (:documentation "删除指定VHost失败异常"
                :superclasses ("POSDriverException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [867 897]))                  
                :type "class")
                nil [780 898])
            ("POSDriver" type
               (:documentation "封装 VHost POS API"
                :members 
                  ( ("_raise_other_error" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [989 992])
                            ("response" variable nil (reparse-symbol function_parameters) [994 1002]))                          )
                        (reparse-symbol indented_block_body) [949 1144])
                    ("setup_vhostscsicontroller" function
                       (:documentation "
        创建 VHostSCSIController
        调用 VHost.ConstructVhostSCSIController()
        @vdisk_id: str, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1239 1242])
                            ("pool_id" variable nil (reparse-symbol function_parameters) [1244 1251])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [1253 1261]))                          )
                        (reparse-symbol indented_block_body) [1209 1739])
                    ("clear_vhostscsicontroller" function
                       (:documentation "
        清理 VHostSCSIController
        调用 VHost.RemoveVhostController()
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1834 1837])
                            ("pool_id" variable nil (reparse-symbol function_parameters) [1839 1846])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [1848 1856]))                          )
                        (reparse-symbol indented_block_body) [1804 2264])
                    ("add_vhostscsilun" function
                       (:documentation "
        挂载 VHostSCSILun
        调用 VHost.AddVhostSCSILUN()
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2360 2363])
                            ("pool_id" variable nil (reparse-symbol function_parameters) [2365 2372])
                            ("scsi_target_num" variable nil (reparse-symbol function_parameters) [2384 2399])
                            ("volume_id" variable nil (reparse-symbol function_parameters) [2426 2435])
                            ("snapshot_id" variable nil (reparse-symbol function_parameters) [2437 2448]))                          )
                        (reparse-symbol indented_block_body) [2339 2950])
                    ("remove_vhostscsilun_static" function
                       (:documentation "
        静态移除，暂无热移除
        卸载 VHostSCSILun
        如果处于 Open 状态则抛异常
        否则调用 VHost.RemoveVhostSCSILUN()
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3046 3049])
                            ("pool_id" variable nil (reparse-symbol function_parameters) [3051 3058])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [3060 3068]))                          )
                        (reparse-symbol indented_block_body) [3015 4404])
                    ("get_vhostcontrollers" function
                       (:documentation "获取所有 vhost controller"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4819 4822]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4777 4933])
                    ("" code nil (reparse-symbol indented_block_body) [4977 4988])
                    ("_parse_diskpath" function
                       (:documentation "解析 disk_path 为 vdisk_id 和 volume_id"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5013 5016])
                            ("disk_path" variable nil (reparse-symbol function_parameters) [5018 5027]))                          )
                        (reparse-symbol indented_block_body) [4993 5150])
                    ("_is_vhostscsicontroller_open" function
                       (:documentation "
        查询 VHostSCSIController 运行状态
        调用 VHost.GetVhostControllers() 并解析得到状态
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5258 5261])
                            ("pool_id" variable nil (reparse-symbol function_parameters) [5263 5270])
                            ("scsi_target_num" variable nil (reparse-symbol function_parameters) [5282 5297])
                            ("volume_id" variable nil (reparse-symbol function_parameters) [5336 5345]))                          )
                        (reparse-symbol indented_block_body) [5225 6023]))                  
                :type "class")
                nil [900 6023]))          
      :file "posdriver.py"
      :pointmax 6023
      :fsize 6246
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
封装 RPC 调用 POS 接口
Create on: 2019/7/24
\"\"\"" code nil nil [1 46])
            ("logging" include nil nil [48 62])
            ("time" include nil nil [63 74])
            ("functools" include nil nil [75 104])
            ("rccpxuanyuan.common.config" include nil nil [105 150])
            ("rccpxuanyuan.rpc" include nil nil [151 193])
            ("rccpxuanyuan.rpc.jsonrpcclient" include nil nil [194 261])
            ("LOG" variable nil nil [264 294])
            ("RPC_TRIES" variable nil nil [295 308])
            ("VHostResponseError" type
               (:documentation "Raised when response error"
                :superclasses ("Exception")
                :type "class")
                nil [323 397])
            ("_jsonrpcclient_retry" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [525 529])
                ("expected_exception" variable nil (reparse-symbol function_parameters) [531 549])
                ("tries" variable nil (reparse-symbol function_parameters) [551 556])
                ("sleep" variable nil (reparse-symbol function_parameters) [558 563]))              ) nil [500 888])
            ("_vhost_rpc" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [905 909])
                ("params" variable nil (reparse-symbol function_parameters) [911 917]))              ) nil [890 1234])
            ("_get_res" function
               (:documentation "整理最终返回的结果"
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [1249 1255])
                    ("response" variable nil (reparse-symbol function_parameters) [1257 1265]))                  )
                nil [1236 1989])
            ("VHost" type
               (:documentation "POS 接口封装"
                :members 
                  ( ("ConstructVhostSCSIController" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("pool_id" variable nil (reparse-symbol function_parameters) [2103 2110])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [2112 2120]))                          
                        :documentation "
        创建 VHostSCSIController
        @vdisk_id: str, required
        ")
                        (reparse-symbol indented_block_body) [2052 2335])
                    ("GetVhostControllers" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "获取 VHostSCSIContrller 信息")
                        (reparse-symbol indented_block_body) [3616 3753]))                  
                :type "class")
                nil [2015 3753]))          
      :file "vhost.py"
      :pointmax 3753
      :fsize 3912
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
virtual device interface
\"\"\"" code nil nil [1 33])
            ("inspect" include nil nil [35 49])
            ("rccpxuanyuan.common.exception" include nil nil [51 109])
            ("rccpxuanyuan.virt.vmdevices" include nil nil [110 154])
            ("VMDeviceException" type
               (:documentation "
    虚拟设备层异常
    "
                :superclasses ("ContextException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [233 278]))                  
                :type "class")
                nil [157 279])
            ("VMDeviceAliasNameConflict" type
               (:documentation "
    虚拟设备别名冲突
    "
                :superclasses ("VMDeviceException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [367 422]))                  
                :type "class")
                nil [281 423])
            ("VMDeviceAliasNameError" type
               (:documentation "
    虚拟设备别名错误
    "
                :superclasses ("VMDeviceException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [508 560]))                  
                :type "class")
                nil [425 561])
            ("_get_module_classes" function
               (:documentation "
    定义：获取python模块内类列表
    "
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [587 593]))                  )
                nil [563 785])
            ("_regist_device" function (:documentation "
    定义：扫描virt.devices.core模块中虚拟设备列表并进行注册
    :return:返回设备别名和设备类映射字典，如
    {
        \"cpu\": CPU,
        \"disk\": Disk,
        ......
    }
    ") nil [787 1322])
            ("DeviceMap" type
               (:documentation "
    define: virtual device map class
    duty:
        1. check core device naming conflict
        2. register core device
        3. map virtual device
    "
                :members 
                  ( ("_dev_map" variable nil (reparse-symbol indented_block_body) [1516 1543]))                  
                :type "class")
                nil [1324 1829]))          
      :file "interface.py"
      :pointmax 1829
      :fsize 1966
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
)
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuan!rccpxuanyuan!virt!vmdevices!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
