;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Handle actual output from the cli.\"\"\"" code nil nil [789 829])
            ("__future__" include nil nil [831 869])
            ("__future__" include nil nil [870 907])
            ("__future__" include nil nil [908 947])
            ("libdnf.transaction" include nil nil [949 974])
            ("copy" include nil nil [976 1001])
            ("dnf.cli.format" include nil nil [1002 1055])
            ("dnf.i18n" include nil nil [1056 1137])
            ("dnf.pycomp" include nil nil [1138 1194])
            ("dnf.yum.rpmtrans" include nil nil [1195 1249])
            ("dnf.db.history" include nil nil [1250 1301])
            ("dnf.base" include nil nil [1302 1317])
            ("dnf.callback" include nil nil [1318 1337])
            ("dnf.cli.progress" include nil nil [1338 1361])
            ("dnf.cli.term" include nil nil [1362 1381])
            ("dnf.conf" include nil nil [1382 1397])
            ("dnf.crypto" include nil nil [1398 1415])
            ("dnf.i18n" include nil nil [1416 1431])
            ("dnf.transaction" include nil nil [1432 1454])
            ("dnf.util" include nil nil [1455 1470])
            ("dnf.yum.misc" include nil nil [1471 1490])
            ("fnmatch" include nil nil [1491 1505])
            ("hawkey" include nil nil [1506 1519])
            ("itertools" include nil nil [1520 1536])
            ("logging" include nil nil [1537 1551])
            ("operator" include nil nil [1552 1567])
            ("pwd" include nil nil [1568 1578])
            ("sys" include nil nil [1579 1589])
            ("time" include nil nil [1590 1601])
            ("logger" variable nil nil [1603 1636])
            ("_make_lists" function (:arguments 
              ( ("transaction" variable nil (reparse-symbol function_parameters) [1654 1665])
                ("goal" variable nil (reparse-symbol function_parameters) [1667 1671]))              ) nil [1638 3429])
            ("_spread_in_columns" function (:arguments 
              ( ("cols_count" variable nil (reparse-symbol function_parameters) [3454 3464])
                ("label" variable nil (reparse-symbol function_parameters) [3466 3471])
                ("lst" variable nil (reparse-symbol function_parameters) [3473 3476]))              ) nil [3431 3859])
            ("Output" type
               (:documentation "Main output class for the yum command line."
                :superclasses ("object")
                :members 
                  ( ("GRP_PACKAGE_INDENT" code nil (reparse-symbol indented_block_body) [3942 3970])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4016 4032])
                            ("self" variable nil (reparse-symbol indented_block_body) [4041 4057])
                            ("self" variable nil (reparse-symbol indented_block_body) [4066 4097])
                            ("self" variable nil (reparse-symbol indented_block_body) [4106 4126]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3989 3993])
                            ("base" variable nil (reparse-symbol function_parameters) [3995 3999])
                            ("conf" variable nil (reparse-symbol function_parameters) [4001 4005]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3976 4127])
                    ("_banner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4144 4148])
                            ("col_data" variable nil (reparse-symbol function_parameters) [4150 4158])
                            ("row" variable nil (reparse-symbol function_parameters) [4160 4163]))                          )
                        (reparse-symbol indented_block_body) [4132 4336])
                    ("_col_widths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4357 4361])
                            ("rows" variable nil (reparse-symbol function_parameters) [4363 4367]))                          )
                        (reparse-symbol indented_block_body) [4341 4751])
                    ("_highlight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4771 4775])
                            ("highlight" variable nil (reparse-symbol function_parameters) [4777 4786]))                          )
                        (reparse-symbol indented_block_body) [4756 5884])
                    ("_sub_highlight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5908 5912])
                            ("haystack" variable nil (reparse-symbol function_parameters) [5914 5922])
                            ("highlight" variable nil (reparse-symbol function_parameters) [5924 5933])
                            ("needles" variable nil (reparse-symbol function_parameters) [5935 5942])
                            ("kwds" variable nil (reparse-symbol function_parameters) [5944 5950]))                          )
                        (reparse-symbol indented_block_body) [5889 6073])
                    ("_calc_columns_spaces_helps" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("current" variable nil (reparse-symbol function_parameters) [6127 6134])
                            ("data_tups" variable nil (reparse-symbol function_parameters) [6136 6145])
                            ("left" variable nil (reparse-symbol function_parameters) [6147 6151]))                          
                        :documentation " Spaces left on the current field will help how many pkgs? ")
                        (reparse-symbol indented_block_body) [6078 6383])
                    ("history" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6414 6418]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6388 6454])
                    ("sack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6482 6486]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6459 6519])
                    ("calcColumns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6540 6544])
                            ("data" variable nil (reparse-symbol function_parameters) [6546 6550])
                            ("columns" variable nil (reparse-symbol function_parameters) [6552 6559])
                            ("remainder_column" variable nil (reparse-symbol function_parameters) [6566 6582])
                            ("total_width" variable nil (reparse-symbol function_parameters) [6606 6617])
                            ("indent" variable nil (reparse-symbol function_parameters) [6624 6630]))                          
                        :documentation "Dynamically calculate the widths of the columns that the
        fields in data should be placed into for output.

        :param data: a list of dictionaries that represent the data to
           be output.  Each dictionary in the list corresponds to a
           column of output. The keys of the dictionary are the
           lengths of the items to be output, and the value associated
           with a key is the number of items of that length.
        :param columns: a list containing the minimum amount of space
           that must be allocated for each row. This can be used to
           ensure that there is space available in a column if, for
           example, the actual lengths of the items being output
           cannot be given in *data*
        :param remainder_column: number of the column to receive a few
           extra spaces that may remain after other allocation has
           taken place
        :param total_width: the total width of the output.
           self.term.real_columns is used by default
        :param indent: string that will be prefixed to a line of
           output to create e.g. an indent
        :return: a list of the widths of the columns that the fields
           in data should be placed into for output
        ")
                        (reparse-symbol indented_block_body) [6524 12077])
                    ("_fmt_column_align_width" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("width" variable nil (reparse-symbol function_parameters) [12128 12133]))                          
                        :documentation "Returns tuple of (align_left, width)")
                        (reparse-symbol indented_block_body) [12082 12273])
                    ("_col_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12292 12296])
                            ("col_data" variable nil (reparse-symbol function_parameters) [12298 12306]))                          )
                        (reparse-symbol indented_block_body) [12278 12644])
                    ("fmtColumns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12664 12668])
                            ("columns" variable nil (reparse-symbol function_parameters) [12670 12677])
                            ("msg" variable nil (reparse-symbol function_parameters) [12679 12682])
                            ("end" variable nil (reparse-symbol function_parameters) [12688 12691]))                          
                        :documentation "Return a row of data formatted into a string for output.
        Items can overflow their columns.

        :param columns: a list of tuples containing the data to
           output.  Each tuple contains first the item to be output,
           then the amount of space allocated for the column, and then
           optionally a type of highlighting for the item
        :param msg: a string to begin the line of output with
        :param end: a string to end the line of output with
        :return: a row of data formatted into a string for output
        ")
                        (reparse-symbol indented_block_body) [12649 14723])
                    ("simpleList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14743 14747])
                            ("pkg" variable nil (reparse-symbol function_parameters) [14749 14752])
                            ("ui_overflow" variable nil (reparse-symbol function_parameters) [14754 14765])
                            ("indent" variable nil (reparse-symbol function_parameters) [14773 14779])
                            ("highlight" variable nil (reparse-symbol function_parameters) [14784 14793])
                            ("columns" variable nil (reparse-symbol function_parameters) [14820 14827]))                          
                        :documentation "Print a package as a line.

        :param pkg: the package to be printed
        :param ui_overflow: unused
        :param indent: string to be prefixed onto the line to provide
           e.g. an indent
        :param highlight: highlighting options for the name of the
           package
        :param colums: tuple containing the space allocated for each
           column of output.  The columns are the package name, version,
           and repository
        ")
                        (reparse-symbol indented_block_body) [14728 15613])
                    ("simpleEnvraList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15638 15642])
                            ("pkg" variable nil (reparse-symbol function_parameters) [15644 15647])
                            ("ui_overflow" variable nil (reparse-symbol function_parameters) [15649 15660])
                            ("indent" variable nil (reparse-symbol function_parameters) [15692 15698])
                            ("highlight" variable nil (reparse-symbol function_parameters) [15703 15712])
                            ("columns" variable nil (reparse-symbol function_parameters) [15720 15727]))                          
                        :documentation "Print a package as a line, with the package itself in envra
        format so it can be passed to list/install/etc.

        :param pkg: the package to be printed
        :param ui_overflow: unused
        :param indent: string to be prefixed onto the line to provide
           e.g. an indent
        :param highlight: highlighting options for the name of the
           package
        :param colums: tuple containing the space allocated for each
           column of output.  The columns the are the package envra and
           repository
        ")
                        (reparse-symbol indented_block_body) [15618 16595])
                    ("simple_name_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16621 16625])
                            ("pkg" variable nil (reparse-symbol function_parameters) [16627 16630]))                          
                        :documentation "Print a package as a line containing its name.")
                        (reparse-symbol indented_block_body) [16600 16723])
                    ("simple_nevra_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16750 16754])
                            ("pkg" variable nil (reparse-symbol function_parameters) [16756 16759]))                          
                        :documentation "Print a package as a line containing its NEVRA.")
                        (reparse-symbol indented_block_body) [16728 16848])
                    ("fmtKeyValFill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16871 16875])
                            ("key" variable nil (reparse-symbol function_parameters) [16877 16880])
                            ("val" variable nil (reparse-symbol function_parameters) [16882 16885]))                          
                        :documentation "Return a key value pair in the common two column output
        format.

        :param key: the key to be formatted
        :param val: the value associated with *key*
        :return: the key value pair formatted in two columns for output
        ")
                        (reparse-symbol indented_block_body) [16853 17791])
                    ("fmtSection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17811 17815])
                            ("name" variable nil (reparse-symbol function_parameters) [17817 17821])
                            ("fill" variable nil (reparse-symbol function_parameters) [17823 17827]))                          
                        :documentation "Format and return a section header.  The format of the
        header is a line with *name* centred, and *fill* repeated on
        either side to fill an entire line on the terminal.

        :param name: the name of the section
        :param fill: the character to repeat on either side of *name*
          to fill an entire line.  *fill* must be a single character.
        :return: a string formatted to be a section header
        ")
                        (reparse-symbol indented_block_body) [17796 18617])
                    ("infoOutput" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18637 18641])
                            ("pkg" variable nil (reparse-symbol function_parameters) [18643 18646])
                            ("highlight" variable nil (reparse-symbol function_parameters) [18648 18657]))                          
                        :documentation "Print information about the given package.

        :param pkg: the package to print information about
        :param hightlight: highlighting options for the name of the
           package
        ")
                        (reparse-symbol indented_block_body) [18622 21370])
                    ("updatesObsoletesList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21400 21404])
                            ("uotup" variable nil (reparse-symbol function_parameters) [21406 21411])
                            ("changetype" variable nil (reparse-symbol function_parameters) [21413 21423])
                            ("columns" variable nil (reparse-symbol function_parameters) [21425 21432]))                          
                        :documentation "Print a simple string that explains the relationship
        between the members of an update or obsoletes tuple.

        :param uotup: an update or obsoletes tuple.  The first member
           is the new package, and the second member is the old
           package
        :param changetype: a string indicating what the change between
           the packages is, e.g. 'updates' or 'obsoletes'
        :param columns: a tuple containing information about how to
           format the columns of output.  The absolute value of each
           number in the tuple indicates how much space has been
           allocated for the corresponding column.  If the number is
           negative, the text in the column will be left justified,
           and if it is positive, the text will be right justified.
           The columns of output are the package name, version, and repository
        ")
                        (reparse-symbol indented_block_body) [21375 23153])
                    ("listPkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23171 23175])
                            ("lst" variable nil (reparse-symbol function_parameters) [23177 23180])
                            ("description" variable nil (reparse-symbol function_parameters) [23182 23193])
                            ("outputType" variable nil (reparse-symbol function_parameters) [23195 23205])
                            ("highlight_na" variable nil (reparse-symbol function_parameters) [23207 23219])
                            ("columns" variable nil (reparse-symbol function_parameters) [23241 23248])
                            ("highlight_modes" variable nil (reparse-symbol function_parameters) [23255 23270]))                          
                        :documentation "Prints information about the given list of packages.

        :param lst: a list of packages to print information about
        :param description: string describing what the list of
           packages contains, e.g. 'Available Packages'
        :param outputType: The type of information to be printed.
           Current options::

              'list' - simple pkg list
              'info' - similar to rpm -qi output
              'name' - simple name list
              'nevra' - simple nevra list
        :param highlight_na: a dictionary containing information about
              packages that should be highlighted in the output.  The
              dictionary keys are (name, arch) tuples for the package,
              and the associated values are the package objects
              themselves.
        :param columns: a tuple containing information about how to
           format the columns of output.  The absolute value of each
           number in the tuple indicates how much space has been
           allocated for the corresponding column.  If the number is
           negative, the text in the column will be left justified,
           and if it is positive, the text will be right justified.
           The columns of output are the package name, version, and
           repository
        :param highlight_modes: dictionary containing information
              about to highlight the packages in *highlight_na*.
              *highlight_modes* should contain the following keys::

                 'not_in' - highlighting used for packages not in *highlight_na*
                 '=' - highlighting used when the package versions are equal
                 '<' - highlighting used when the package has a lower version
                       number
                 '>' - highlighting used when the package has a higher version
                       number
        :return: (exit_code, [errors])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string

        ")
                        (reparse-symbol indented_block_body) [23158 26798])
                    ("userconfirm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26819 26823])
                            ("msg" variable nil (reparse-symbol function_parameters) [26825 26828])
                            ("defaultyes_msg" variable nil (reparse-symbol function_parameters) [26835 26849]))                          
                        :documentation "Get a yes or no from the user, and default to No

        :msg: String for case with [y/N]
        :defaultyes_msg: String for case with [Y/n]
        :return: True if the user selects yes, and False if the user
           selects no
        ")
                        (reparse-symbol indented_block_body) [26803 28312])
                    ("_pkgs2name_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28337 28341])
                            ("sections" variable nil (reparse-symbol function_parameters) [28343 28351]))                          )
                        (reparse-symbol indented_block_body) [28317 28764])
                    ("_pkgs2col_lengths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28791 28795])
                            ("sections" variable nil (reparse-symbol function_parameters) [28797 28805])
                            ("name_dict" variable nil (reparse-symbol function_parameters) [28807 28816]))                          )
                        (reparse-symbol indented_block_body) [28769 29352])
                    ("_display_packages" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29379 29383])
                            ("pkg_names" variable nil (reparse-symbol function_parameters) [29385 29394]))                          )
                        (reparse-symbol indented_block_body) [29357 29488])
                    ("_display_packages_verbose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29523 29527])
                            ("pkg_names" variable nil (reparse-symbol function_parameters) [29529 29538])
                            ("name_dict" variable nil (reparse-symbol function_parameters) [29540 29549])
                            ("columns" variable nil (reparse-symbol function_parameters) [29551 29558]))                          )
                        (reparse-symbol indented_block_body) [29493 30193])
                    ("display_pkgs_in_groups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30225 30229])
                            ("group" variable nil (reparse-symbol function_parameters) [30231 30236]))                          
                        :documentation "Output information about the packages in a given group

        :param group: a Group object to output information about
        ")
                        (reparse-symbol indented_block_body) [30198 31840])
                    ("display_groups_in_environment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31879 31883])
                            ("environment" variable nil (reparse-symbol function_parameters) [31885 31896]))                          
                        :documentation "Output information about the packages in a given environment

        :param environment: an Environment object to output information about
        ")
                        (reparse-symbol indented_block_body) [31845 32824])
                    ("matchcallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32847 32851])
                            ("po" variable nil (reparse-symbol function_parameters) [32853 32855])
                            ("values" variable nil (reparse-symbol function_parameters) [32857 32863])
                            ("matchfor" variable nil (reparse-symbol function_parameters) [32865 32873])
                            ("verbose" variable nil (reparse-symbol function_parameters) [32880 32887])
                            ("highlight" variable nil (reparse-symbol function_parameters) [32916 32925]))                          
                        :documentation "Output search/provides type callback matches.

        :param po: the package object that matched the search
        :param values: the information associated with *po* that
           matched the search
        :param matchfor: a list of strings to be highlighted in the
           output
        :param verbose: whether to output extra verbose information
        :param highlight: highlighting options for the highlighted matches
        ")
                        (reparse-symbol indented_block_body) [32829 37045])
                    ("matchcallback_verbose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37076 37080])
                            ("po" variable nil (reparse-symbol function_parameters) [37082 37084])
                            ("values" variable nil (reparse-symbol function_parameters) [37086 37092])
                            ("matchfor" variable nil (reparse-symbol function_parameters) [37094 37102]))                          
                        :documentation "Output search/provides type callback matches.  This will
        output more information than :func:`matchcallback`.

        :param po: the package object that matched the search
        :param values: the information associated with *po* that
           matched the search
        :param matchfor: a list of strings to be highlighted in the
           output
        ")
                        (reparse-symbol indented_block_body) [37050 37564])
                    ("reportDownloadSize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37592 37596])
                            ("packages" variable nil (reparse-symbol function_parameters) [37598 37606])
                            ("installonly" variable nil (reparse-symbol function_parameters) [37608 37619]))                          
                        :documentation "Report the total download size for a set of packages

        :param packages: a list of package objects
        :param installonly: whether the transaction consists only of installations
        ")
                        (reparse-symbol indented_block_body) [37569 39218])
                    ("reportRemoveSize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39244 39248])
                            ("packages" variable nil (reparse-symbol function_parameters) [39250 39258]))                          
                        :documentation "Report the total size of packages being removed.

        :param packages: a list of package objects
        ")
                        (reparse-symbol indented_block_body) [39223 39985])
                    ("list_group_transaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40017 40021])
                            ("comps" variable nil (reparse-symbol function_parameters) [40023 40028])
                            ("history" variable nil (reparse-symbol function_parameters) [40030 40037])
                            ("diff" variable nil (reparse-symbol function_parameters) [40039 40043]))                          )
                        (reparse-symbol indented_block_body) [39990 41117])
                    ("_skipped_packages" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41144 41148])
                            ("report_problems" variable nil (reparse-symbol function_parameters) [41150 41165]))                          
                        :documentation "returns set of conflicting packages and set of packages with broken dependency that would
        be additionally installed when --best and --allowerasing")
                        (reparse-symbol indented_block_body) [41122 42069])
                    ("list_transaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42095 42099])
                            ("transaction" variable nil (reparse-symbol function_parameters) [42101 42112]))                          
                        :documentation "Return a string representation of the transaction in an
        easy-to-read format.
        ")
                        (reparse-symbol indented_block_body) [42074 56099])
                    ("post_transaction_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56132 56136])
                            ("transaction" variable nil (reparse-symbol function_parameters) [56138 56149]))                          
                        :documentation "Returns a human-readable summary of the results of the
        transaction.

        :return: a string containing a human-readable summary of the
           results of the transaction
        ")
                        (reparse-symbol indented_block_body) [56104 59051])
                    ("setup_progress_callbacks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59085 59089]))                          
                        :documentation "Set up the progress callbacks and various
           output bars based on debug level.
        ")
                        (reparse-symbol indented_block_body) [59056 59536])
                    ("download_callback_total_cb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59572 59576])
                            ("remote_size" variable nil (reparse-symbol function_parameters) [59578 59589])
                            ("download_start_timestamp" variable nil (reparse-symbol function_parameters) [59591 59615]))                          
                        :documentation "Outputs summary information about the download process.

        :param remote_size: the total amount of information that was
           downloaded, in bytes
        :param download_start_timestamp: the time when the download
           process started, in seconds since the epoch
        ")
                        (reparse-symbol indented_block_body) [59541 60367])
                    ("_history_uiactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60395 60399])
                            ("hpkgs" variable nil (reparse-symbol function_parameters) [60401 60406]))                          )
                        (reparse-symbol indented_block_body) [60372 61061])
                    ("_pwd_ui_username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61087 61091])
                            ("uid" variable nil (reparse-symbol function_parameters) [61093 61096])
                            ("limit" variable nil (reparse-symbol function_parameters) [61098 61103]))                          )
                        (reparse-symbol indented_block_body) [61066 62408])
                    ("_historyRangeRTIDs" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("old" variable nil (reparse-symbol function_parameters) [62454 62457])
                            ("tid" variable nil (reparse-symbol function_parameters) [62459 62462]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [62413 63508])
                    ("_historyRangeTIDs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63535 63539])
                            ("rtids" variable nil (reparse-symbol function_parameters) [63541 63546]))                          )
                        (reparse-symbol indented_block_body) [63513 64151])
                    ("_history_list_transactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64187 64191])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [64193 64200]))                          )
                        (reparse-symbol indented_block_body) [64156 64965])
                    ("historyListCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64989 64993])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [64995 65002]))                          
                        :documentation "Output a list of information about the history of yum
        transactions.

        :param extcmds: list of extra command line arguments
        :return: (exit_code, [errors])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
        ")
                        (reparse-symbol indented_block_body) [64970 67767])
                    ("historyInfoCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67791 67795])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [67797 67804])
                            ("pats" variable nil (reparse-symbol function_parameters) [67806 67810])
                            ("mtids" variable nil (reparse-symbol function_parameters) [67815 67820]))                          
                        :documentation "Output information about a transaction in history

        :param extcmds: list of extra command line arguments
        :return: (exit_code, [errors])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
        ")
                        (reparse-symbol indented_block_body) [67772 70314])
                    ("_historyInfoCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70339 70343])
                            ("old" variable nil (reparse-symbol function_parameters) [70345 70348])
                            ("pats" variable nil (reparse-symbol function_parameters) [70350 70354]))                          )
                        (reparse-symbol indented_block_body) [70319 76845])
                    ("_history_state2uistate" variable nil (reparse-symbol indented_block_body) [76869 77582])
                    ("historyInfoCmdPkgsAltered" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77617 77621])
                            ("old" variable nil (reparse-symbol function_parameters) [77623 77626])
                            ("pats" variable nil (reparse-symbol function_parameters) [77628 77632]))                          
                        :documentation "Print information about how packages are altered in a transaction.

        :param old: the :class:`DnfSwdbTrans` to
           print information about
        :param pats: a list of patterns.  Packages that match a patten
           in *pats* will be highlighted in the output
        ")
                        (reparse-symbol indented_block_body) [77587 80133])
                    ("historyPackageListCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80164 80168])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [80170 80177]))                          
                        :documentation "Print a list of information about transactions from history
        that involve the given package or packages.

        :param extcmds: list of extra command line arguments
        ")
                        (reparse-symbol indented_block_body) [80138 83400]))                  
                :type "class")
                nil [3861 83400])
            ("DepSolveProgressCallBack" type
               (:documentation "Provides text output callback functions for Dependency Solver callback."
                :superclasses ("dnf.callback.Depsolve")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"requires yum-cli log and errorlog functions as arguments\"\"\"" code nil (reparse-symbol indented_block_body) [83571 83633])
                            ("self" variable nil (reparse-symbol indented_block_body) [83642 83656]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83556 83560]))                          
                        :documentation "requires yum-cli log and errorlog functions as arguments"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [83543 83657])
                    ("pkg_added" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83676 83680])
                            ("pkg" variable nil (reparse-symbol function_parameters) [83682 83685])
                            ("mode" variable nil (reparse-symbol function_parameters) [83687 83691]))                          
                        :documentation "Print information about a package being added to the
        transaction set.

        :param pkgtup: tuple containing the package name, arch,
           version, and repository
        :param mode: a short string indicating why the package is
           being added to the transaction set.

        Valid current values for *mode* are::

           i = the package will be installed
           u = the package will be an update
           e = the package will be erased
           r = the package will be reinstalled
           d = the package will be a downgrade
           o = the package will be obsoleting another package
           ud = the package will be updated
           od = the package will be obsoleted
        ")
                        (reparse-symbol indented_block_body) [83662 85276])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85291 85295]))                          
                        :documentation "Perform setup at the beginning of the dependency solving
        process.
        ")
                        (reparse-symbol indented_block_body) [85281 85481])
                    ("end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85494 85498]))                          
                        :documentation "Output a message stating that dependency resolution has finished.")
                        (reparse-symbol indented_block_body) [85486 85643]))                  
                :type "class")
                nil [83401 85643])
            ("CliKeyImport" type
               (:superclasses ("dnf.callback.KeyImport")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [85735 85751])
                            ("self" variable nil (reparse-symbol indented_block_body) [85760 85780]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85706 85710])
                            ("base" variable nil (reparse-symbol function_parameters) [85712 85716])
                            ("output" variable nil (reparse-symbol function_parameters) [85718 85724]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [85693 85781])
                    ("_confirm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85799 85803])
                            ("id" variable nil (reparse-symbol function_parameters) [85805 85807])
                            ("userid" variable nil (reparse-symbol function_parameters) [85809 85815])
                            ("fingerprint" variable nil (reparse-symbol function_parameters) [85817 85828])
                            ("url" variable nil (reparse-symbol function_parameters) [85830 85833])
                            ("timestamp" variable nil (reparse-symbol function_parameters) [85835 85844]))                          )
                        (reparse-symbol indented_block_body) [85786 86472]))                  
                :type "class")
                nil [85645 86472])
            ("CliTransactionDisplay" type
               (:documentation "A YUM specific callback class for RPM operations."
                :superclasses ("LoggingTransactionDisplay")
                :members 
                  ( ("width" variable nil (reparse-symbol indented_block_body) [86595 86652])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [86686 86731])
                            ("self" variable nil (reparse-symbol indented_block_body) [86740 86757])
                            ("self" variable nil (reparse-symbol indented_block_body) [86766 86789])
                            ("self" variable nil (reparse-symbol indented_block_body) [86834 86852])
                            ("self" variable nil (reparse-symbol indented_block_body) [86891 86906])
                            ("self" variable nil (reparse-symbol indented_block_body) [86915 86930]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86671 86675]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [86658 86931])
                    ("progress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86949 86953])
                            ("package" variable nil (reparse-symbol function_parameters) [86955 86962])
                            ("action" variable nil (reparse-symbol function_parameters) [86964 86970])
                            ("ti_done" variable nil (reparse-symbol function_parameters) [86972 86979])
                            ("ti_total" variable nil (reparse-symbol function_parameters) [86981 86989])
                            ("ts_done" variable nil (reparse-symbol function_parameters) [86991 86998])
                            ("ts_total" variable nil (reparse-symbol function_parameters) [87000 87008]))                          
                        :documentation "Output information about an rpm operation.  This may
        include a text progress bar.

        :param package: the package involved in the event
        :param action: the type of action that is taking place.  Valid
           values are given by
           :func:`rpmtrans.LoggingTransactionDisplay.action.keys()`
        :param ti_done: a number representing the amount of work
           already done in the current transaction
        :param ti_total: a number representing the total amount of work
           to be done in the current transaction
        :param ts_done: the number of the current transaction in
           transaction set
        :param ts_total: the total number of transactions in the
           transaction set
        ")
                        (reparse-symbol indented_block_body) [86936 88233])
                    ("_max_action_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88260 88264]))                          )
                        (reparse-symbol indented_block_body) [88238 88621])
                    ("_out_progress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88644 88648])
                            ("ti_done" variable nil (reparse-symbol function_parameters) [88650 88657])
                            ("ti_total" variable nil (reparse-symbol function_parameters) [88659 88667])
                            ("ts_done" variable nil (reparse-symbol function_parameters) [88669 88676])
                            ("ts_total" variable nil (reparse-symbol function_parameters) [88678 88686])
                            ("percent" variable nil (reparse-symbol function_parameters) [88710 88717])
                            ("process" variable nil (reparse-symbol function_parameters) [88719 88726])
                            ("pkgname" variable nil (reparse-symbol function_parameters) [88728 88735])
                            ("wid1" variable nil (reparse-symbol function_parameters) [88737 88741]))                          )
                        (reparse-symbol indented_block_body) [88626 89423])
                    ("filelog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89440 89444])
                            ("package" variable nil (reparse-symbol function_parameters) [89446 89453])
                            ("action" variable nil (reparse-symbol function_parameters) [89455 89461]))                          )
                        (reparse-symbol indented_block_body) [89428 89477])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89492 89496])
                            ("message" variable nil (reparse-symbol function_parameters) [89498 89505]))                          )
                        (reparse-symbol indented_block_body) [89482 89521])
                    ("scriptout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89540 89544])
                            ("msgs" variable nil (reparse-symbol function_parameters) [89546 89550]))                          
                        :documentation "Print messages originating from a package script.

        :param msgs: the messages coming from the script
        ")
                        (reparse-symbol indented_block_body) [89526 89745])
                    ("_makefmt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89763 89767])
                            ("percent" variable nil (reparse-symbol function_parameters) [89769 89776])
                            ("ts_done" variable nil (reparse-symbol function_parameters) [89778 89785])
                            ("ts_total" variable nil (reparse-symbol function_parameters) [89787 89795])
                            ("progress" variable nil (reparse-symbol function_parameters) [89797 89805])
                            ("pkgname" variable nil (reparse-symbol function_parameters) [89829 89836])
                            ("wid1" variable nil (reparse-symbol function_parameters) [89843 89847]))                          )
                        (reparse-symbol indented_block_body) [89750 91659]))                  
                :type "class")
                nil [86474 91659])
            ("progressbar" function
               (:documentation "Output the current status to the terminal using a simple
    text progress bar consisting of 50 # marks.

    :param current: a number representing the amount of work
       already done
    :param total: a number representing the total amount of work
       to be done
    :param name: a name to label the progress bar with
    "
                :arguments 
                  ( ("current" variable nil (reparse-symbol function_parameters) [91676 91683])
                    ("total" variable nil (reparse-symbol function_parameters) [91685 91690])
                    ("name" variable nil (reparse-symbol function_parameters) [91692 91696]))                  )
                nil [91660 93390])
            ("CustomDisplay" type
               (:superclasses ("CliTransactionDisplay")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [93497 93534]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93453 93457]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [93440 93506])
                    ("progress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93524 93528])
                            ("package" variable nil (reparse-symbol function_parameters) [93530 93537])
                            ("action" variable nil (reparse-symbol function_parameters) [93539 93545])
                            ("ti_done" variable nil (reparse-symbol function_parameters) [93547 93554])
                            ("ti_total" variable nil (reparse-symbol function_parameters) [93556 93564])
                            ("ts_done" variable nil (reparse-symbol function_parameters) [93566 93573])
                            ("ts_total" variable nil (reparse-symbol function_parameters) [93575 93583]))                          
                        :documentation "Output information about an rpm operation.  This may
        include a text progress bar.

        :param package: the package involved in the event
        :param action: the type of action that is taking place.  Valid
           values are given by
           :func:`rpmtrans.LoggingTransactionDisplay.action.keys()`
        :param ti_done: a number representing the amount of work
           already done in the current transaction
        :param ti_total: a number representing the total amount of work
           to be done in the current transaction
        :param ts_done: the number of the current transaction in
           transaction set
        :param ts_total: the total number of transactions in the
           transaction set
        ")
                        (reparse-symbol indented_block_body) [93511 94808]))                  
                :type "class")
                nil [93392 94808]))          
      :file "output.py"
      :pointmax 94808
      :fsize 94807
      :lastmodtime '(23829 52935 290000 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [1009 1047])
            ("__future__" include nil nil [1048 1087])
            ("dnf.i18n" include nil nil [1088 1110])
            ("collections" include nil nil [1112 1130])
            ("dnf.cli" include nil nil [1131 1145])
            ("dnf.conf.config" include nil nil [1146 1186])
            ("dnf.exceptions" include nil nil [1187 1208])
            ("libdnf.conf" include nil nil [1209 1227])
            ("logging" include nil nil [1228 1242])
            ("os" include nil nil [1243 1252])
            ("os.path" include nil nil [1253 1267])
            ("logger" variable nil nil [1269 1302])
            ("ALIASES_DROPIN_DIR" variable nil nil [1304 1346])
            ("ALIASES_CONF_PATH" variable nil nil [1347 1415])
            ("ALIASES_USER_PATH" variable nil nil [1416 1481])
            ("AliasesConfig" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1551 1568])
                            ("self" variable nil (reparse-symbol indented_block_body) [1577 1618])
                            ("self" code nil (reparse-symbol indented_block_body) [1627 1656]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1530 1534])
                            ("path" variable nil (reparse-symbol function_parameters) [1536 1540]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1517 1657])
                    ("enabled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1688 1692]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1662 1911])
                    ("aliases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1942 1946]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1916 2316]))                  
                :type "class")
                nil [1484 2316])
            ("Aliases" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2373 2413])
                            ("self" variable nil (reparse-symbol indented_block_body) [2422 2438])
                            ("self" variable nil (reparse-symbol indented_block_body) [2447 2466])
                            ("if" code nil (reparse-symbol indented_block_body) [2476 2560])
                            ("self" code nil (reparse-symbol indented_block_body) [2569 2586])
                            ("if" code nil (reparse-symbol indented_block_body) [2596 2636])
                            ("self" code nil (reparse-symbol indented_block_body) [2645 2665]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2358 2362]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2345 2666])
                    ("_disabled_by_environ" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2696 2700]))                          )
                        (reparse-symbol indented_block_body) [2671 3145])
                    ("_load_conf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3165 3169])
                            ("path" variable nil (reparse-symbol function_parameters) [3171 3175]))                          )
                        (reparse-symbol indented_block_body) [3150 3508])
                    ("_load_main" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3528 3532]))                          )
                        (reparse-symbol indented_block_body) [3513 3751])
                    ("_load_aliases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3774 3778])
                            ("filenames" variable nil (reparse-symbol function_parameters) [3780 3789]))                          )
                        (reparse-symbol indented_block_body) [3756 4231])
                    ("_dropin_dir_filenames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4262 4266]))                          )
                        (reparse-symbol indented_block_body) [4236 5307])
                    ("_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5325 5329])
                            ("args" variable nil (reparse-symbol function_parameters) [5331 5335]))                          )
                        (reparse-symbol indented_block_body) [5312 6939]))                  
                :type "class")
                nil [2318 6939]))          
      :file "aliases.py"
      :pointmax 6939
      :fsize 6938
      :lastmodtime '(23599 23486 0 0)
      :unmatched-syntax '((INDENT_BLOCK 6851 . 6919) (NEWLINE 6850 . 6851) (COLON 6849 . 6850) (TRY 6757 . 6760) (AS 6845 . 6847) (NEWLINE 6719 . 6720) (COLON 6718 . 6719) (RPAREN 6717 . 6718) (DEDENT 6691 . 6695) (DEF 6695 . 6698) (LPAREN 6706 . 6707) (NEWLINE 6645 . 6646) (RPAREN 6644 . 6645) (DEDENT 6612 . 6620) (NAME 6620 . 6626) (LPAREN 6639 . 6640) (INDENT_BLOCK 5140 . 5188) (NEWLINE 5139 . 5140) (COLON 5138 . 5139) (TRY 4800 . 4803) (AS 5134 . 5136) (INDENT_BLOCK 4174 . 4231) (NEWLINE 4173 . 4174) (COLON 4172 . 4173) (TRY 4018 . 4021) (AS 4168 . 4170) (INDENT_BLOCK 3700 . 3751) (NEWLINE 3699 . 3700) (COLON 3698 . 3699) (TRY 3543 . 3546) (AS 3694 . 3696) (INDENT_BLOCK 3402 . 3508) (NEWLINE 3401 . 3402) (COLON 3400 . 3401) (AS 3396 . 3398) (EXCEPT 3381 . 3387) (INDENT_BLOCK 3264 . 3373) (NEWLINE 3263 . 3264) (COLON 3262 . 3263) (TRY 3186 . 3189) (AS 3258 . 3260)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [1012 1051])
            ("_BoolDefault" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1123 1145])
                            ("self" code nil (reparse-symbol indented_block_body) [1154 1221]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1099 1103])
                            ("default" variable nil (reparse-symbol function_parameters) [1105 1112]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1086 1222])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1239 1243])
                            ("obj" variable nil (reparse-symbol function_parameters) [1245 1248])
                            ("objtype" variable nil (reparse-symbol function_parameters) [1250 1257]))                          )
                        (reparse-symbol indented_block_body) [1227 1413])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1430 1434])
                            ("obj" variable nil (reparse-symbol function_parameters) [1436 1439])
                            ("val" variable nil (reparse-symbol function_parameters) [1441 1444]))                          )
                        (reparse-symbol indented_block_body) [1418 1711]))                  
                :type "class")
                nil [1054 1711])
            ("DemandSheet" type
               (:documentation "Collection of demands that different CLI parts have on other parts. :api"
                :superclasses ("object")
                :members 
                  ( ("allow_erasing" variable nil (reparse-symbol indented_block_body) [1841 1876])
                    ("available_repos" variable nil (reparse-symbol indented_block_body) [1881 1918])
                    ("resolving" variable nil (reparse-symbol indented_block_body) [1923 1954])
                    ("root_user" variable nil (reparse-symbol indented_block_body) [1959 1990])
                    ("sack_activation" variable nil (reparse-symbol indented_block_body) [1995 2032])
                    ("load_system_repo" variable nil (reparse-symbol indented_block_body) [2037 2074])
                    ("success_exit_status" variable nil (reparse-symbol indented_block_body) [2079 2102])
                    ("cacheonly" variable nil (reparse-symbol indented_block_body) [2108 2139])
                    ("fresh_metadata" variable nil (reparse-symbol indented_block_body) [2144 2179])
                    ("freshest_metadata" variable nil (reparse-symbol indented_block_body) [2184 2223])
                    ("changelogs" variable nil (reparse-symbol indented_block_body) [2228 2260])
                    ("transaction_display" variable nil (reparse-symbol indented_block_body) [2266 2292]))                  
                :type "class")
                nil [1712 2293]))          
      :file "demand.py"
      :pointmax 2293
      :fsize 2292
      :lastmodtime '(23599 23486 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [959 998])
            ("dnf.pycomp" include nil nil [999 1026])
            ("format_number" function
               (:documentation "Return a human-readable metric-like string representation
    of a number.

    :param number: the number to be converted to a human-readable form
    :param SI: If is 0, this function will use the convention
       that 1 kilobyte = 1024 bytes, otherwise, the convention
       that 1 kilobyte = 1000 bytes will be used
    :param space: string that will be placed between the number
       and the SI prefix
    :return: a human-readable metric-like string representation of
       *number*
    "
                :arguments 
                  ( ("number" variable nil (reparse-symbol function_parameters) [1046 1052])
                    ("SI" variable nil (reparse-symbol function_parameters) [1054 1056])
                    ("space" variable nil (reparse-symbol function_parameters) [1060 1065]))                  )
                nil [1028 2720])
            ("format_time" function
               (:documentation "Return a human-readable string representation of a number
    of seconds.  The string will show seconds, minutes, and
    optionally hours.

    :param seconds: the number of seconds to convert to a
       human-readable form
    :param use_hours: If use_hours is 0, the representation will
       be in minutes and seconds. Otherwise, it will be in hours,
       minutes, and seconds
    :return: a human-readable string representation of *seconds*
    "
                :arguments 
                  ( ("seconds" variable nil (reparse-symbol function_parameters) [2737 2744])
                    ("use_hours" variable nil (reparse-symbol function_parameters) [2746 2755]))                  )
                nil [2721 3770])
            ("indent_block" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3788 3789]))              ) nil [3771 3847]))          
      :file "format.py"
      :pointmax 3847
      :fsize 3846
      :lastmodtime '(23599 23486 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [999 1038])
            ("dnf.i18n" include nil nil [1039 1061])
            ("dnf.util" include nil nil [1062 1095])
            ("argparse" include nil nil [1097 1112])
            ("dnf.exceptions" include nil nil [1113 1134])
            ("dnf.rpm" include nil nil [1135 1149])
            ("dnf.yum.misc" include nil nil [1150 1169])
            ("logging" include nil nil [1170 1184])
            ("os.path" include nil nil [1185 1199])
            ("re" include nil nil [1200 1209])
            ("sys" include nil nil [1210 1220])
            ("logger" variable nil nil [1222 1255])
            ("OptionParser" type
               (:documentation "ArgumentParser like class to do things the \"yum way\"."
                :superclasses ("argparse.ArgumentParser")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [1399 1435])
                            ("self" variable nil (reparse-symbol indented_block_body) [1444 1464])
                            ("self" variable nil (reparse-symbol indented_block_body) [1523 1547])
                            ("self" variable nil (reparse-symbol indented_block_body) [1590 1628])
                            ("self" variable nil (reparse-symbol indented_block_body) [1637 1667]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1384 1388]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1371 1668])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1683 1687])
                            ("msg" variable nil (reparse-symbol function_parameters) [1689 1692]))                          
                        :documentation "Output an error message, and exit the program.
           This method overrides standard argparser's error
           so that error output goes to the logger.

        :param msg: the error message to output
        ")
                        (reparse-symbol indented_block_body) [1673 2031])
                    ("_RepoCallback" type
                       (:superclasses ("argparse.Action")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [2095 2099])
                                    ("parser" variable nil (reparse-symbol function_parameters) [2101 2107])
                                    ("namespace" variable nil (reparse-symbol function_parameters) [2109 2118])
                                    ("values" variable nil (reparse-symbol function_parameters) [2120 2126])
                                    ("opt_str" variable nil (reparse-symbol function_parameters) [2128 2135]))                                  )
                                (reparse-symbol indented_block_body) [2082 2341]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [2036 2341])
                    ("_RepoCallbackEnable" type
                       (:superclasses ("argparse.Action")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [2411 2415])
                                    ("parser" variable nil (reparse-symbol function_parameters) [2417 2423])
                                    ("namespace" variable nil (reparse-symbol function_parameters) [2425 2434])
                                    ("values" variable nil (reparse-symbol function_parameters) [2436 2442])
                                    ("opt_str" variable nil (reparse-symbol function_parameters) [2444 2451]))                                  )
                                (reparse-symbol indented_block_body) [2398 2566]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [2346 2566])
                    ("_SplitCallback" type
                       (:documentation " Split all strings in seq, at \",\" and whitespace.
        Returns a new list. "
                        :superclasses ("argparse._AppendAction")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [2731 2735])
                                    ("parser" variable nil (reparse-symbol function_parameters) [2737 2743])
                                    ("namespace" variable nil (reparse-symbol function_parameters) [2745 2754])
                                    ("values" variable nil (reparse-symbol function_parameters) [2756 2762])
                                    ("opt_str" variable nil (reparse-symbol function_parameters) [2764 2771]))                                  )
                                (reparse-symbol indented_block_body) [2718 2952]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [2571 2952])
                    ("_SplitExtendDictCallback" type
                       (:documentation " Split string at \",\" or whitespace to (key, value).
        Extends dict with {key: value}."
                        :superclasses ("argparse.Action")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [3133 3137])
                                    ("parser" variable nil (reparse-symbol function_parameters) [3139 3145])
                                    ("namespace" variable nil (reparse-symbol function_parameters) [3147 3156])
                                    ("values" variable nil (reparse-symbol function_parameters) [3158 3164])
                                    ("opt_str" variable nil (reparse-symbol function_parameters) [3166 3173]))                                  )
                                (reparse-symbol indented_block_body) [3120 3527]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [2957 3527])
                    ("_SetoptsCallback" type
                       (:documentation " Parse setopts arguments and put them into main_<setopts>
            and repo_<setopts>."
                        :superclasses ("argparse.Action")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [3698 3702])
                                    ("parser" variable nil (reparse-symbol function_parameters) [3704 3710])
                                    ("namespace" variable nil (reparse-symbol function_parameters) [3712 3721])
                                    ("values" variable nil (reparse-symbol function_parameters) [3723 3729])
                                    ("opt_str" variable nil (reparse-symbol function_parameters) [3731 3738]))                                  )
                                (reparse-symbol indented_block_body) [3685 4807]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [3532 4807])
                    ("ParseSpecGroupFileCallback" type
                       (:superclasses ("argparse.Action")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4884 4888])
                                    ("parser" variable nil (reparse-symbol function_parameters) [4890 4896])
                                    ("namespace" variable nil (reparse-symbol function_parameters) [4898 4907])
                                    ("values" variable nil (reparse-symbol function_parameters) [4909 4915])
                                    ("opt_str" variable nil (reparse-symbol function_parameters) [4917 4924]))                                  )
                                (reparse-symbol indented_block_body) [4871 4971]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [4812 4971])
                    ("PkgNarrowCallback" type
                       (:superclasses ("argparse.Action")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [5075 5094])
                                    ("kwargs" variable nil (reparse-symbol indented_block_body) [5424 5446])
                                    ("super" code nil (reparse-symbol indented_block_body) [5459 5528]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5039 5043])
                                    ("args" variable nil (reparse-symbol function_parameters) [5045 5050])
                                    ("kwargs" variable nil (reparse-symbol function_parameters) [5052 5060]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [5026 5529])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5551 5555])
                                    ("parser" variable nil (reparse-symbol function_parameters) [5557 5563])
                                    ("namespace" variable nil (reparse-symbol function_parameters) [5565 5574])
                                    ("values" variable nil (reparse-symbol function_parameters) [5576 5582])
                                    ("opt_str" variable nil (reparse-symbol function_parameters) [5584 5591]))                                  )
                                (reparse-symbol indented_block_body) [5538 5925]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [4976 5925])
                    ("ForceArchAction" type
                       (:superclasses ("argparse.Action")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5991 5995])
                                    ("parser" variable nil (reparse-symbol function_parameters) [5997 6003])
                                    ("namespace" variable nil (reparse-symbol function_parameters) [6005 6014])
                                    ("values" variable nil (reparse-symbol function_parameters) [6016 6022])
                                    ("opt_str" variable nil (reparse-symbol function_parameters) [6024 6031]))                                  )
                                (reparse-symbol indented_block_body) [5978 6110]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [5930 6110])
                    ("_main_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6132 6136]))                          
                        :documentation " Standard options known to all dnf subcommands. ")
                        (reparse-symbol indented_block_body) [6115 18571])
                    ("_command_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18596 18600])
                            ("command" variable nil (reparse-symbol function_parameters) [18602 18609]))                          )
                        (reparse-symbol indented_block_body) [18576 19225])
                    ("_add_cmd_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19249 19253])
                            ("cmd" variable nil (reparse-symbol function_parameters) [19255 19258])
                            ("group" variable nil (reparse-symbol function_parameters) [19260 19265]))                          
                        :documentation " store usage info about a single dnf command.")
                        (reparse-symbol indented_block_body) [19230 19549])
                    ("add_commands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19571 19575])
                            ("cli_cmds" variable nil (reparse-symbol function_parameters) [19577 19585])
                            ("group" variable nil (reparse-symbol function_parameters) [19587 19592]))                          
                        :documentation " store name & summary for dnf commands

        The stored information is used build usage information
        grouped by build-in & plugin commands.
        ")
                        (reparse-symbol indented_block_body) [19554 19855])
                    ("get_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19874 19878]))                          
                        :documentation " get the usage information to show the user. ")
                        (reparse-symbol indented_block_body) [19860 20579])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20601 20605])
                            ("args" variable nil (reparse-symbol function_parameters) [20607 20612])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20614 20622]))                          )
                        (reparse-symbol indented_block_body) [20584 20903])
                    ("parse_main_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20928 20932])
                            ("args" variable nil (reparse-symbol function_parameters) [20934 20938]))                          )
                        (reparse-symbol indented_block_body) [20908 21254])
                    ("parse_command_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21282 21286])
                            ("command" variable nil (reparse-symbol function_parameters) [21288 21295])
                            ("args" variable nil (reparse-symbol function_parameters) [21297 21301]))                          )
                        (reparse-symbol indented_block_body) [21259 21558])
                    ("print_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21579 21583])
                            ("file_" variable nil (reparse-symbol function_parameters) [21585 21590]))                          )
                        (reparse-symbol indented_block_body) [21563 21747])
                    ("print_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21767 21771])
                            ("command" variable nil (reparse-symbol function_parameters) [21773 21780]))                          )
                        (reparse-symbol indented_block_body) [21752 22104]))                  
                :type "class")
                nil [1257 22104]))          
      :file "option_parser.py"
      :pointmax 22104
      :fsize 22103
      :lastmodtime '(23652 31686 0 0)
      :unmatched-syntax '((INDENT_BLOCK 5279 . 5412) (NEWLINE 5278 . 5279) (COLON 5277 . 5278) (TRY 5107 . 5110) (AS 5273 . 5275) (NAME 2150 . 2159) (IF 2172 . 2174) (ELSE 2202 . 2206)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [959 998])
            ("dnf.cli.format" include nil nil [999 1052])
            ("dnf.cli.term" include nil nil [1053 1089])
            ("dnf.pycomp" include nil nil [1090 1120])
            ("time" include nil nil [1121 1142])
            ("sys" include nil nil [1144 1154])
            ("dnf.callback" include nil nil [1155 1174])
            ("dnf.util" include nil nil [1175 1190])
            ("MultiFileProgressMeter" type
               (:documentation "Multi-file download progress meter"
                :superclasses ("dnf.callback.DownloadProgress")
                :members 
                  ( ("STATUS_2_STR" variable nil (reparse-symbol indented_block_body) [1304 1515])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Creates a new progress meter instance

        update_period -- how often to update the progress bar
        tick_period -- how fast to cycle through concurrent downloads
        rate_average -- time constant for average speed calculation
        \"\"\"" code nil (reparse-symbol indented_block_body) [1618 1871])
                            ("self" variable nil (reparse-symbol indented_block_body) [1880 1892])
                            ("self" variable nil (reparse-symbol indented_block_body) [1901 1935])
                            ("self" variable nil (reparse-symbol indented_block_body) [1944 1974])
                            ("self" variable nil (reparse-symbol indented_block_body) [1983 2015])
                            ("self" variable nil (reparse-symbol indented_block_body) [2024 2048])
                            ("self" variable nil (reparse-symbol indented_block_body) [2057 2076])
                            ("self" variable nil (reparse-symbol indented_block_body) [2085 2118])
                            ("self" variable nil (reparse-symbol indented_block_body) [2127 2145])
                            ("self" variable nil (reparse-symbol indented_block_body) [2154 2173])
                            ("self" variable nil (reparse-symbol indented_block_body) [2182 2200])
                            ("self" variable nil (reparse-symbol indented_block_body) [2209 2225])
                            ("self" variable nil (reparse-symbol indented_block_body) [2234 2249])
                            ("self" variable nil (reparse-symbol indented_block_body) [2258 2276])
                            ("self" variable nil (reparse-symbol indented_block_body) [2285 2303])
                            ("self" variable nil (reparse-symbol indented_block_body) [2312 2328])
                            ("self" variable nil (reparse-symbol indented_block_body) [2337 2357])
                            ("self" variable nil (reparse-symbol indented_block_body) [2366 2385]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1534 1538])
                            ("fo" variable nil (reparse-symbol function_parameters) [1540 1542])
                            ("update_period" variable nil (reparse-symbol function_parameters) [1555 1568])
                            ("tick_period" variable nil (reparse-symbol function_parameters) [1574 1585])
                            ("rate_average" variable nil (reparse-symbol function_parameters) [1591 1603]))                          
                        :documentation "Creates a new progress meter instance

        update_period -- how often to update the progress bar
        tick_period -- how fast to cycle through concurrent downloads
        rate_average -- time constant for average speed calculation
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1521 2386])
                    ("message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2403 2407])
                            ("msg" variable nil (reparse-symbol function_parameters) [2409 2412]))                          )
                        (reparse-symbol indented_block_body) [2391 2481])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2496 2500])
                            ("total_files" variable nil (reparse-symbol function_parameters) [2502 2513])
                            ("total_size" variable nil (reparse-symbol function_parameters) [2515 2525])
                            ("total_drpms" variable nil (reparse-symbol function_parameters) [2527 2538]))                          )
                        (reparse-symbol indented_block_body) [2486 2919])
                    ("progress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2937 2941])
                            ("payload" variable nil (reparse-symbol function_parameters) [2943 2950])
                            ("done" variable nil (reparse-symbol function_parameters) [2952 2956]))                          )
                        (reparse-symbol indented_block_body) [2924 3548])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3565 3569])
                            ("now" variable nil (reparse-symbol function_parameters) [3571 3574]))                          )
                        (reparse-symbol indented_block_body) [3553 5824])
                    ("end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5837 5841])
                            ("payload" variable nil (reparse-symbol function_parameters) [5843 5850])
                            ("status" variable nil (reparse-symbol function_parameters) [5852 5858])
                            ("err_msg" variable nil (reparse-symbol function_parameters) [5860 5867]))                          )
                        (reparse-symbol indented_block_body) [5829 7610]))                  
                :type "class")
                nil [1193 7610]))          
      :file "progress.py"
      :pointmax 7610
      :fsize 7609
      :lastmodtime '(23599 23486 0 0)
      :unmatched-syntax '((NAME 5655 . 5659) (IF 5703 . 5705) (ELSE 5758 . 5762) (NAME 5491 . 5492) (IF 5497 . 5499) (ELSE 5506 . 5510)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [983 1021])
            ("__future__" include nil nil [1022 1061])
            ("curses" include nil nil [1062 1075])
            ("dnf.pycomp" include nil nil [1076 1093])
            ("fcntl" include nil nil [1094 1106])
            ("re" include nil nil [1107 1116])
            ("struct" include nil nil [1117 1130])
            ("sys" include nil nil [1131 1141])
            ("termios" include nil nil [1142 1156])
            ("_real_term_width" function
               (:documentation " Get the real terminal width "
                :arguments 
                  ( ("fd" variable nil (reparse-symbol function_parameters) [1180 1182]))                  )
                nil [1159 1420])
            ("_term_width" function
               (:documentation " Compute terminal width falling to default 80 in case of trouble"
                :arguments 
                  ( ("fd" variable nil (reparse-symbol function_parameters) [1438 1440]))                  )
                nil [1422 1649])
            ("Term" type
               (:documentation "A class to provide some terminal \"UI\" helpers based on curses."
                :superclasses ("object")
                :members 
                  ( ("__enabled" variable nil (reparse-symbol indented_block_body) [2059 2075])
                    ("real_columns" variable nil (reparse-symbol indented_block_body) [2081 2137])
                    ("columns" variable nil (reparse-symbol indented_block_body) [2142 2188])
                    ("__cap_names" variable nil (reparse-symbol indented_block_body) [2194 2303])
                    ("__colors" variable nil (reparse-symbol indented_block_body) [2309 2497])
                    ("__ansi_colors" variable nil (reparse-symbol indented_block_body) [2502 2695])
                    ("__ansi_forced_MODE" variable nil (reparse-symbol indented_block_body) [2700 2907])
                    ("__ansi_forced_FG_COLOR" variable nil (reparse-symbol indented_block_body) [2912 3186])
                    ("__ansi_forced_BG_COLOR" variable nil (reparse-symbol indented_block_body) [3191 3465])
                    ("__forced_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3489 3493]))                          )
                        (reparse-symbol indented_block_body) [3471 3644])
                    ("reinit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3660 3664])
                            ("term_stream" variable nil (reparse-symbol function_parameters) [3666 3677])
                            ("color" variable nil (reparse-symbol function_parameters) [3684 3689]))                          
                        :documentation "Reinitializes the :class:`Term`.

        :param term_stream:  the terminal stream that the
           :class:`Term` should be initialized to use.  If
           *term_stream* is not given, :attr:`sys.stdout` is used.
        :param color: when to colorize output.  Valid values are
           'always', 'auto', and 'never'.  'always' will use ANSI codes
           to always colorize output, 'auto' will decide whether do
           colorize depending on the terminal, and 'never' will never
           colorize.
        ")
                        (reparse-symbol indented_block_body) [3649 7025])
                    ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [7090 7121]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7043 7047])
                            ("term_stream" variable nil (reparse-symbol function_parameters) [7049 7060])
                            ("color" variable nil (reparse-symbol function_parameters) [7067 7072]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7030 7122])
                    ("_tigetstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7141 7145])
                            ("cap_name" variable nil (reparse-symbol function_parameters) [7147 7155]))                          )
                        (reparse-symbol indented_block_body) [7127 7498])
                    ("color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7513 7517])
                            ("color" variable nil (reparse-symbol function_parameters) [7519 7524])
                            ("s" variable nil (reparse-symbol function_parameters) [7526 7527]))                          
                        :documentation "Colorize string with color")
                        (reparse-symbol indented_block_body) [7503 7636])
                    ("bold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7650 7654])
                            ("s" variable nil (reparse-symbol function_parameters) [7656 7657]))                          
                        :documentation "Make string bold.")
                        (reparse-symbol indented_block_body) [7641 7729])
                    ("sub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7742 7746])
                            ("haystack" variable nil (reparse-symbol function_parameters) [7748 7756])
                            ("beg" variable nil (reparse-symbol function_parameters) [7758 7761])
                            ("end" variable nil (reparse-symbol function_parameters) [7763 7766])
                            ("needles" variable nil (reparse-symbol function_parameters) [7768 7775])
                            ("escape" variable nil (reparse-symbol function_parameters) [7777 7783])
                            ("ignore_case" variable nil (reparse-symbol function_parameters) [7790 7801]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        *beg*, and postfix each occurrence with *end*, then return the
        modified string.  For example::

           >>> yt = Term()
           >>> yt.sub('spam and eggs', 'x', 'z', ['and'])
           'spam xandz eggs'

        This is particularly useful for emphasizing certain words
        in output: for example, calling :func:`sub` with *beg* =
        MODE['bold'] and *end* = MODE['normal'] will return a string
        that when printed to the terminal will appear to be *haystack*
        with each occurrence of the strings in *needles* in bold
        face.  Note, however, that the :func:`sub_mode`,
        :func:`sub_bold`, :func:`sub_fg`, and :func:`sub_bg` methods
        provide convenient ways to access this same emphasizing functionality.

        :param haystack: the string to be modified
        :param beg: the string to be prefixed onto matches
        :param end: the string to be postfixed onto matches
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :param escape: a function that accepts a string and returns
           the same string with problematic characters escaped.  By
           default, :func:`re.escape` is used.
        :param ignore_case: whether case should be ignored when
           searching for matches
        :return: *haystack* with *beg* prefixing, and *end*
          postfixing, occurrences of the strings in *needles*
        ")
                        (reparse-symbol indented_block_body) [7734 9773])
                    ("sub_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9790 9794])
                            ("haystack" variable nil (reparse-symbol function_parameters) [9796 9804])
                            ("beg" variable nil (reparse-symbol function_parameters) [9806 9809])
                            ("needles" variable nil (reparse-symbol function_parameters) [9811 9818])
                            ("kwds" variable nil (reparse-symbol function_parameters) [9820 9826]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        *beg*, and postfix each occurrence with self.MODE['normal'],
        then return the modified string.  If *beg* is an ANSI escape
        code, such as given by self.MODE['bold'], this method will
        return *haystack* with the formatting given by the code only
        applied to the strings in *needles*.

        :param haystack: the string to be modified
        :param beg: the string to be prefixed onto matches
        :param end: the string to be postfixed onto matches
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with *beg* prefixing, and self.MODE['normal']
          postfixing, occurrences of the strings in *needles*
        ")
                        (reparse-symbol indented_block_body) [9777 10768])
                    ("sub_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10786 10790])
                            ("haystack" variable nil (reparse-symbol function_parameters) [10792 10800])
                            ("mode" variable nil (reparse-symbol function_parameters) [10802 10806])
                            ("needles" variable nil (reparse-symbol function_parameters) [10808 10815])
                            ("kwds" variable nil (reparse-symbol function_parameters) [10817 10823]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        self.MODE[*mode*], and postfix each occurrence with
        self.MODE['normal'], then return the modified string.  This
        will return a string that when printed to the terminal will
        appear to be *haystack* with each occurrence of the strings in
        *needles* in the given *mode*.

        :param haystack: the string to be modified
        :param mode: the mode to set the matches to be in.  Valid
           values are given by self.MODE.keys().
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with self.MODE[*mode*] prefixing, and
          self.MODE['normal'] postfixing, occurrences of the strings
          in *needles*
        ")
                        (reparse-symbol indented_block_body) [10773 11766])
                    ("sub_bold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11784 11788])
                            ("haystack" variable nil (reparse-symbol function_parameters) [11790 11798])
                            ("needles" variable nil (reparse-symbol function_parameters) [11800 11807])
                            ("kwds" variable nil (reparse-symbol function_parameters) [11809 11815]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        self.MODE['bold'], and postfix each occurrence with
        self.MODE['normal'], then return the modified string.  This
        will return a string that when printed to the terminal will
        appear to be *haystack* with each occurrence of the strings in
        *needles* in bold face.

        :param haystack: the string to be modified
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with self.MODE['bold'] prefixing, and
          self.MODE['normal'] postfixing, occurrences of the strings
          in *needles*
        ")
                        (reparse-symbol indented_block_body) [11771 12627])
                    ("sub_fg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12643 12647])
                            ("haystack" variable nil (reparse-symbol function_parameters) [12649 12657])
                            ("color" variable nil (reparse-symbol function_parameters) [12659 12664])
                            ("needles" variable nil (reparse-symbol function_parameters) [12666 12673])
                            ("kwds" variable nil (reparse-symbol function_parameters) [12675 12681]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        self.FG_COLOR[*color*], and postfix each occurrence with
        self.MODE['normal'], then return the modified string.  This
        will return a string that when printed to the terminal will
        appear to be *haystack* with each occurrence of the strings in
        *needles* in the given color.

        :param haystack: the string to be modified
        :param color: the color to set the matches to be in.  Valid
           values are given by self.FG_COLOR.keys().
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with self.FG_COLOR[*color*] prefixing, and
          self.MODE['normal'] postfixing, occurrences of the strings
          in *needles*
        ")
                        (reparse-symbol indented_block_body) [12632 13644])
                    ("sub_bg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13660 13664])
                            ("haystack" variable nil (reparse-symbol function_parameters) [13666 13674])
                            ("color" variable nil (reparse-symbol function_parameters) [13676 13681])
                            ("needles" variable nil (reparse-symbol function_parameters) [13683 13690])
                            ("kwds" variable nil (reparse-symbol function_parameters) [13692 13698]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        self.BG_COLOR[*color*], and postfix each occurrence with
        self.MODE['normal'], then return the modified string.  This
        will return a string that when printed to the terminal will
        appear to be *haystack* with each occurrence of the strings in
        *needles* highlighted in the given background color.

        :param haystack: the string to be modified
        :param color: the background color to set the matches to be in.  Valid
           values are given by self.BG_COLOR.keys().
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with self.BG_COLOR[*color*] prefixing, and
          self.MODE['normal'] postfixing, occurrences of the strings
          in *needles*
        ")
                        (reparse-symbol indented_block_body) [13649 14695]))                  
                :type "class")
                nil [1651 14695]))          
      :file "term.py"
      :pointmax 14695
      :fsize 14694
      :lastmodtime '(23599 23486 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Entrance point for the yum command line interface.
\"\"\"" code nil nil [789 847])
            ("__future__" include nil nil [849 886])
            ("__future__" include nil nil [887 925])
            ("__future__" include nil nil [926 965])
            ("dnf.conf" include nil nil [966 991])
            ("dnf.cli.cli" include nil nil [992 1019])
            ("dnf.cli.option_parser" include nil nil [1020 1066])
            ("dnf.i18n" include nil nil [1067 1091])
            ("dnf.cli.utils" include nil nil [1092 1133])
            ("dnf.i18n" include nil nil [1134 1156])
            ("dnf.cli" include nil nil [1158 1172])
            ("dnf.cli.cli" include nil nil [1173 1191])
            ("dnf.cli.option_parser" include nil nil [1192 1220])
            ("dnf.exceptions" include nil nil [1221 1242])
            ("dnf.i18n" include nil nil [1243 1258])
            ("dnf.logging" include nil nil [1259 1277])
            ("dnf.util" include nil nil [1278 1293])
            ("errno" include nil nil [1294 1306])
            ("logging" include nil nil [1307 1321])
            ("os" include nil nil [1322 1331])
            ("os.path" include nil nil [1332 1346])
            ("sys" include nil nil [1347 1357])
            ("logger" variable nil nil [1359 1392])
            ("ex_IOError" function (:arguments 
              ( ("e" variable nil (reparse-symbol function_parameters) [1410 1411]))              ) nil [1395 1511])
            ("ex_Error" function (:arguments 
              ( ("e" variable nil (reparse-symbol function_parameters) [1526 1527]))              ) nil [1513 1675])
            ("main" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [1686 1690])
                ("conf_class" variable nil (reparse-symbol function_parameters) [1692 1702])
                ("cli_class" variable nil (reparse-symbol function_parameters) [1709 1718])
                ("option_parser_class" variable nil (reparse-symbol function_parameters) [1724 1743]))              ) nil [1677 2430])
            ("_main" function
               (:documentation "Run the dnf program from a command line interface."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [2442 2446])
                    ("args" variable nil (reparse-symbol function_parameters) [2448 2452])
                    ("cli_class" variable nil (reparse-symbol function_parameters) [2454 2463])
                    ("option_parser" variable nil (reparse-symbol function_parameters) [2465 2478]))                  )
                nil [2432 2935])
            ("cli_run" function (:arguments 
              ( ("cli" variable nil (reparse-symbol function_parameters) [2949 2952])
                ("base" variable nil (reparse-symbol function_parameters) [2954 2958]))              ) nil [2937 4193])
            ("resolving" function
               (:documentation "Perform the depsolve, download and RPM transaction stage."
                :arguments 
                  ( ("cli" variable nil (reparse-symbol function_parameters) [4209 4212])
                    ("base" variable nil (reparse-symbol function_parameters) [4214 4218]))                  )
                nil [4195 4986])
            ("user_main" function
               (:documentation "Call one of the multiple main() functions based on environment variables.

    :param args: command line arguments passed into yum
    :param exit_code: if *exit_code* is True, this function will exit
       python with its exit code when it has finished executing.
       Otherwise, it will return its exit code.
    :return: the exit code from dnf.yum execution
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [5002 5006])
                    ("exit_code" variable nil (reparse-symbol function_parameters) [5008 5017]))                  )
                nil [4988 5494])
            ("if" code nil nil [5496 5567]))          
      :file "main.py"
      :pointmax 5567
      :fsize 5566
      :lastmodtime '(23599 23486 0 0)
      :unmatched-syntax '((INDENT_BLOCK 4937 . 4973) (NEWLINE 4936 . 4937) (COLON 4935 . 4936) (ELSE 4931 . 4935) (INDENT_BLOCK 4898 . 4927) (NEWLINE 4897 . 4898) (COLON 4896 . 4897) (AS 4892 . 4894) (EXCEPT 4877 . 4883) (INDENT_BLOCK 4769 . 4873) (NEWLINE 4768 . 4769) (COLON 4767 . 4768) (AS 4761 . 4763) (EXCEPT 4717 . 4723) (INDENT_BLOCK 4665 . 4713) (NEWLINE 4664 . 4665) (COLON 4663 . 4664) (TRY 4578 . 4581) (AS 4657 . 4659) (INDENT_BLOCK 3583 . 4076) (NEWLINE 3582 . 3583) (COLON 3581 . 3582) (TRY 3489 . 3492) (AS 3577 . 3579) (INDENT_BLOCK 3421 . 3450) (NEWLINE 3420 . 3421) (COLON 3419 . 3420) (AS 3415 . 3417) (INDENT_BLOCK 3288 . 3306) (NEWLINE 3287 . 3288) (COLON 3286 . 3287) (ELSE 3282 . 3286) (INDENT_BLOCK 3125 . 3278) (NEWLINE 3124 . 3125) (COLON 3123 . 3124) (TRY 3073 . 3076) (AS 3119 . 3121) (INDENT_BLOCK 2875 . 2904) (NEWLINE 2874 . 2875) (COLON 2873 . 2874) (TRY 2773 . 2776) (AS 2869 . 2871) (INDENT_BLOCK 2336 . 2430) (NEWLINE 2335 . 2336) (COLON 2334 . 2335) (AS 2330 . 2332) (EXCEPT 2305 . 2311) (INDENT_BLOCK 2272 . 2301) (NEWLINE 2271 . 2272) (COLON 2270 . 2271) (AS 2266 . 2268) (EXCEPT 2251 . 2257) (INDENT_BLOCK 2220 . 2247) (NEWLINE 2219 . 2220) (COLON 2218 . 2219) (AS 2214 . 2216) (EXCEPT 2186 . 2192) (INDENT_BLOCK 2165 . 2182) (NEWLINE 2164 . 2165) (COLON 2163 . 2164) (AS 2159 . 2161) (EXCEPT 2123 . 2129) (INDENT_BLOCK 2067 . 2119) (NEWLINE 2066 . 2067) (COLON 2065 . 2066) (AS 2061 . 2063) (EXCEPT 2029 . 2035) (INDENT_BLOCK 1942 . 2025) (NEWLINE 1941 . 1942) (COLON 1940 . 1941) (TRY 1763 . 1766) (AS 1936 . 1938)))
    (semanticdb-table "semanticdb-table"
      :file "utils.py"
      :fsize 4520
      :lastmodtime '(23599 23486 0 0)))
  :file "!usr!lib!python2.7!site-packages!dnf!cli!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
