;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
ClientIF主机资源管理系统主管理类
职责：
    1. 提供子系统各个组件公共资源和机制
\"\"\"" code nil nil [1 57])
            ("threading" include nil nil [59 75])
            ("rccpxuanyuan.config" include nil nil [77 115])
            ("rccpxuanyuan.config" include nil nil [116 175])
            ("rccpxuanyuan.common" include nil nil [176 217])
            ("rccpxuanyuan.common" include nil nil [218 259])
            ("rccpxuanyuan.common" include nil nil [260 306])
            ("rccpxuanyuan.common.define" include nil nil [307 363])
            ("rccpxuanyuan.common.callutils" include nil nil [364 421])
            ("rccpxuanyuan.common.vip" include nil nil [422 473])
            ("rccpxuanyuan.common.vip" include nil nil [474 513])
            ("rccpxuanyuan.network" include nil nil [515 560])
            ("_UNMANAGED_PLATFORM_ID" variable nil nil [563 607])
            ("ClientIF" type
               (:documentation "
    The client interface of rccpxuanyuan.

    Exposes rccpxuanyuan verbs as json-rpc or xml-rpc functions.
    "
                :members 
                  ( ("_instance" variable nil (reparse-symbol indented_block_body) [755 771])
                    ("_instance_lock" variable nil (reparse-symbol indented_block_body) [776 809])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the (single) ClientIF instance

        :param log: a log object to be used for this object's logging.
        :type log: :class:`logging.Logger`
        \"\"\"" code nil (reparse-symbol indented_block_body) [859 1039])
                            ("self" variable nil (reparse-symbol indented_block_body) [1049 1090])
                            ("self" variable nil (reparse-symbol indented_block_body) [1099 1146])
                            ("self" variable nil (reparse-symbol indented_block_body) [1155 1203])
                            ("self" variable nil (reparse-symbol indented_block_body) [1212 1226])
                            ("self" variable nil (reparse-symbol indented_block_body) [1235 1262])
                            ("self" variable nil (reparse-symbol indented_block_body) [1271 1299])
                            ("try" code nil (reparse-symbol indented_block_body) [1308 1685]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [828 832])
                            ("log" variable nil (reparse-symbol function_parameters) [834 837])
                            ("scheduler" variable nil (reparse-symbol function_parameters) [839 848]))                          
                        :documentation "
        Initialize the (single) ClientIF instance

        :param log: a log object to be used for this object's logging.
        :type log: :class:`logging.Logger`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [815 1685])
                    ("get_instance" function
                       (:documentation "
        通过get_instance获取ClientIF实例，完成cif单例模式
        params cls: ClientIF类
        params log: log管理的全局变量
        params scheduler: cif周期任务管理器
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1724 1727])
                            ("log" variable nil (reparse-symbol function_parameters) [1729 1732])
                            ("scheduler" variable nil (reparse-symbol function_parameters) [1739 1748]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1690 2259])
                    ("prepare_for_shutdown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2289 2293]))                          
                        :documentation "
        Prepare server for shutdown.
        Should be called before taking server down.
        ")
                        (reparse-symbol indented_block_body) [2264 2667])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2682 2686]))                          )
                        (reparse-symbol indented_block_body) [2672 2702])
                    ("cb_dispatch_libvirt_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2738 2742])
                            ("conn" variable nil (reparse-symbol function_parameters) [2744 2748])
                            ("dom" variable nil (reparse-symbol function_parameters) [2750 2753])
                            ("args" variable nil (reparse-symbol function_parameters) [2755 2760]))                          )
                        (reparse-symbol indented_block_body) [2707 2776])
                    ("get_service_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2802 2806]))                          
                        :documentation "
        查询xuanyuan服务信息接口
        ")
                        (reparse-symbol indented_block_body) [2781 2968])
                    ("add_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2986 2990])
                            ("platform_id" variable nil (reparse-symbol function_parameters) [2992 3003])
                            ("vip_info" variable nil (reparse-symbol function_parameters) [3005 3013]))                          
                        :documentation "
        主机纳管接口: 当当前平台id未设置或与设置id相同时允许设置,否则抛异常
        params platform_id: 服务纳管平台id
        params vip_info: 通信虚拟IP信息
        example: {\"vip\": \"172.21.110.119\", \"netmask\": \"255.255.255.0\"}
        ")
                        (reparse-symbol indented_block_body) [2973 3871])
                    ("remove_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3892 3896])
                            ("platform_id" variable nil (reparse-symbol function_parameters) [3898 3909]))                          
                        :documentation "
        设置主机脱管接口 : 当当前平台id与设置id相同时允许设置,否则抛异常
        params platform_id: 服务纳管平台id
        ")
                        (reparse-symbol indented_block_body) [3876 4678])
                    ("reset_host_management" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4709 4713]))                          
                        :documentation "
        重置主机纳管状态: 设置主机进入脱管状态
        ")
                        (reparse-symbol indented_block_body) [4683 4814])
                    ("require_network_semaphore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4849 4853])
                            ("blocking" variable nil (reparse-symbol function_parameters) [4855 4863])
                            ("timeout" variable nil (reparse-symbol function_parameters) [4870 4877]))                          
                        :documentation "
        申请网络驱动模块信号量
        params blocking: 阻塞标志
        params timeout: 超时时间
        ")
                        (reparse-symbol indented_block_body) [4819 5055])
                    ("release_network_semaphore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5090 5094]))                          
                        :documentation "
        释放网络驱动模块信号量
        ")
                        (reparse-symbol indented_block_body) [5060 5191])
                    ("set_netconfigdirty_flag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5224 5228])
                            ("flag" variable nil (reparse-symbol function_parameters) [5230 5234]))                          
                        :documentation "
        释放网络驱动模块信号量
        ")
                        (reparse-symbol indented_block_body) [5196 5319])
                    ("set_vip" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("vip_info" variable nil (reparse-symbol function_parameters) [5354 5362]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5324 5539]))                  
                :type "class")
                nil [610 5539]))          
      :file "client_if.py"
      :pointmax 5539
      :fsize 5942
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
api.py主机资源管理子系统对外接口层
职责：
    1. 显示声明子系统对外接口
    2. 完成接口入参反序列化、合法性检查、回参序列化过程
    3. 调用内部接口完成接口功能
\"\"\"" code nil nil [1 104])
            ("logging" include nil nil [106 120])
            ("rccpxuanyuan.network.errors" include nil nil [122 180])
            ("rccpxuanyuan" include nil nil [181 218])
            ("rccpxuanyuan.client_if" include nil nil [219 262])
            ("rccpxuanyuan.common" include nil nil [263 298])
            ("rccpxuanyuan.common" include nil nil [299 340])
            ("rccpxuanyuan.common" include nil nil [341 390])
            ("rccpxuanyuan.common" include nil nil [391 432])
            ("rccpxuanyuan.common" include nil nil [433 484])
            ("rccpxuanyuan.common" include nil nil [485 526])
            ("rccpxuanyuan.common.parameter" include nil nil [527 580])
            ("rccpxuanyuan.virt.interface" include nil nil [581 625])
            ("rccpxuanyuan.common.notify" include nil nil [626 681])
            ("rccpxuanyuan.xuanyuan_resource.resource" include nil nil [682 750])
            ("USER_SHUTDOWN_MESSAGE" variable nil nil [819 862])
            ("SHUTDOWN" variable nil nil [863 884])
            ("DESTROY" variable nil nil [885 904])
            ("REBOOT" variable nil nil [905 922])
            ("throttledlog" code nil nil [925 968])
            ("APIBase" type
               (:documentation "
    APIBase接口分组基类，设置子接口类功能资源和机制
    "
                :members 
                  ( ("ctorArgs" variable nil (reparse-symbol indented_block_body) [1039 1052])
                    ("__init__" function
                       (:suite 
                          ( ("log" variable nil (reparse-symbol indented_block_body) [1087 1117])
                            ("self" variable nil (reparse-symbol indented_block_body) [1126 1168])
                            ("self" variable nil (reparse-symbol indented_block_body) [1177 1201]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1071 1075]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1058 1202]))                  
                :type "class")
                nil [971 1202])
            ("GlobalAPI" type
               (:documentation "
    GlobalAPI 封装主机、服务管理外部调用接口，调用服务管理类、主机管理包
    主要职责：
        1. 接口的分组
        2. 接口入参反序列化
        3. 入参检查
        4. 同步接口和异步接口划分
        5. 返回值序列化
    "
                :superclasses ("APIBase")
                :members 
                  ( ("ctorArgs" variable nil (reparse-symbol indented_block_body) [1466 1479])
                    ("__init__" function
                       (:suite 
                          ( ("APIBase" code nil (reparse-symbol indented_block_body) [1513 1535]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1498 1502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1485 1536])
                    ("" code nil (reparse-symbol indented_block_body) [1598 1618])
                    ("" code nil (reparse-symbol indented_block_body) [1634 1653])
                    ("get_mainboard_info" function (:documentation "
        查询服务器主板信息外部接口
        ") (reparse-symbol indented_block_body) [1658 1796])
                    ("" code nil (reparse-symbol indented_block_body) [1831 1851])
                    ("" code nil (reparse-symbol indented_block_body) [1867 1886])
                    ("get_cpu_info" function (:documentation "
        查询服务器CPU信息外部接口
        ") (reparse-symbol indented_block_body) [1891 2018])
                    ("" code nil (reparse-symbol indented_block_body) [2053 2073])
                    ("" code nil (reparse-symbol indented_block_body) [2089 2108])
                    ("get_mem_info" function (:documentation "
        查询服务器Mem信息外部接口
        ") (reparse-symbol indented_block_body) [2113 2240])
                    ("" code nil (reparse-symbol indented_block_body) [2275 2295])
                    ("" code nil (reparse-symbol indented_block_body) [2311 2330])
                    ("set_ha_resource" function
                       (:documentation "
        服务主动设置预留cpu和内存，触发资源预留推送功能
        :param service_type: 服务类型
        :param resource: 设置的预留资源
        :return:
        "
                        :arguments 
                          ( ("resource" variable nil (reparse-symbol function_parameters) [2355 2363]))                          )
                        (reparse-symbol indented_block_body) [2335 2567])
                    ("" code nil (reparse-symbol indented_block_body) [2602 2622])
                    ("" code nil (reparse-symbol indented_block_body) [2638 2657])
                    ("get_disk_info" function (:documentation "
        查询服务器Disk信息外部接口
        ") (reparse-symbol indented_block_body) [2662 2792])
                    ("" code nil (reparse-symbol indented_block_body) [2809 2829])
                    ("" code nil (reparse-symbol indented_block_body) [2845 2864])
                    ("get_service_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2890 2894]))                          
                        :documentation "
        查询xuanyuan服务信息外部接口
        ")
                        (reparse-symbol indented_block_body) [2869 3206])
                    ("" code nil (reparse-symbol indented_block_body) [3223 3243])
                    ("" code nil (reparse-symbol indented_block_body) [3259 3278])
                    ("add_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3296 3300])
                            ("platform_id" variable nil (reparse-symbol function_parameters) [3302 3313])
                            ("vip_info" variable nil (reparse-symbol function_parameters) [3315 3323])
                            ("servers" variable nil (reparse-symbol function_parameters) [3325 3332]))                          
                        :documentation "
        设置主机纳管外部接口
        ")
                        (reparse-symbol indented_block_body) [3283 3578])
                    ("" code nil (reparse-symbol indented_block_body) [3595 3615])
                    ("" code nil (reparse-symbol indented_block_body) [3631 3650])
                    ("remove_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3671 3675])
                            ("platform_id" variable nil (reparse-symbol function_parameters) [3677 3688]))                          
                        :documentation "
        设置主机脱管外部接口
        ")
                        (reparse-symbol indented_block_body) [3655 3836])
                    ("" code nil (reparse-symbol indented_block_body) [3853 3873])
                    ("" code nil (reparse-symbol indented_block_body) [3889 3908])
                    ("reset_host_management" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3939 3943]))                          
                        :documentation "
        重置主机纳管状态: 设置主机进入脱管状态
        ")
                        (reparse-symbol indented_block_body) [3913 4042])
                    ("" code nil (reparse-symbol indented_block_body) [4077 4097])
                    ("" code nil (reparse-symbol indented_block_body) [4113 4132])
                    ("get_messaging_ip" function (:documentation "
        查询xuanyuan服务使用消息系统IP信息外部接口
        ") (reparse-symbol indented_block_body) [4137 4284])
                    ("" code nil (reparse-symbol indented_block_body) [4301 4321])
                    ("" code nil (reparse-symbol indented_block_body) [4337 4356])
                    ("get_caps" function
                       (:parent "dummy"
                        :decorators 
                          ( ("callutils.time_stamp" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4400 4404]))                          
                        :documentation "
        查询服务器服务信息汇总外部接口
        ")
                        (reparse-symbol indented_block_body) [4361 5439])
                    ("" code nil (reparse-symbol indented_block_body) [5474 5494])
                    ("" code nil (reparse-symbol indented_block_body) [5510 5529])
                    ("shutdown" function (:documentation "
        关闭服务器外部接口
        ") (reparse-symbol indented_block_body) [5534 5641])
                    ("" code nil (reparse-symbol indented_block_body) [5676 5696])
                    ("" code nil (reparse-symbol indented_block_body) [5712 5731])
                    ("reboot" function (:documentation "
        重启服务器外部接口
        ") (reparse-symbol indented_block_body) [5736 5839])
                    ("" code nil (reparse-symbol indented_block_body) [5874 5894])
                    ("" code nil (reparse-symbol indented_block_body) [5910 5929])
                    ("set_ntp" function
                       (:documentation "
        设置 NTP
        param servers: NTP 同步源
        type servers: list
        param threshold: NTP 误差阈值
        type threshold: float
        "
                        :arguments 
                          ( ("servers" variable nil (reparse-symbol function_parameters) [5946 5953])
                            ("threshold" variable nil (reparse-symbol function_parameters) [5960 5969]))                          )
                        (reparse-symbol indented_block_body) [5934 6204])
                    ("" code nil (reparse-symbol indented_block_body) [6239 6259])
                    ("" code nil (reparse-symbol indented_block_body) [6275 6294])
                    ("get_ntp_info" function (:documentation "
        获取 NTP 信息, 包括同步源和阈值
        ") (reparse-symbol indented_block_body) [6299 6431])
                    ("" code nil (reparse-symbol indented_block_body) [6466 6486])
                    ("" code nil (reparse-symbol indented_block_body) [6502 6521])
                    ("open_ntp" function (:documentation "
        启动 NTP 服务
        ") (reparse-symbol indented_block_body) [6526 6633])
                    ("" code nil (reparse-symbol indented_block_body) [6668 6688])
                    ("" code nil (reparse-symbol indented_block_body) [6704 6723])
                    ("close_ntp" function (:documentation "
        关闭 NTP 服务
        ") (reparse-symbol indented_block_body) [6728 6837])
                    ("" code nil (reparse-symbol indented_block_body) [6872 6892])
                    ("" code nil (reparse-symbol indented_block_body) [6908 6927])
                    ("set_vip" function
                       (:documentation "
        设置高可用VIP配置项
        "
                        :arguments 
                          ( ("vip_info" variable nil (reparse-symbol function_parameters) [6944 6952]))                          )
                        (reparse-symbol indented_block_body) [6932 7055])
                    ("" code nil (reparse-symbol indented_block_body) [16593 16613])
                    ("" code nil (reparse-symbol indented_block_body) [16629 16651])
                    ("get_nics_info" function
                       (:documentation "
        Report host nics info.
        "
                        :arguments 
                          ( ("nic_list" variable nil (reparse-symbol function_parameters) [16674 16682]))                          )
                        (reparse-symbol indented_block_body) [16656 16844])
                    ("" code nil (reparse-symbol indented_block_body) [16879 16899])
                    ("" code nil (reparse-symbol indented_block_body) [16915 16937])
                    ("get_bonds_info" function
                       (:documentation "
        Report host bonds info.
        "
                        :arguments 
                          ( ("bond_list" variable nil (reparse-symbol function_parameters) [16961 16970]))                          )
                        (reparse-symbol indented_block_body) [16942 17206])
                    ("" code nil (reparse-symbol indented_block_body) [17241 17261])
                    ("" code nil (reparse-symbol indented_block_body) [17277 17299])
                    ("get_net_dev_info" function (:documentation "
        Report host net devices info.
        ") (reparse-symbol indented_block_body) [17304 17567])
                    ("" code nil (reparse-symbol indented_block_body) [17584 17604])
                    ("" code nil (reparse-symbol indented_block_body) [17620 17642])
                    ("create_bond" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17663 17667])
                            ("bond_name" variable nil (reparse-symbol function_parameters) [17669 17678])
                            ("mode" variable nil (reparse-symbol function_parameters) [17680 17684])
                            ("slaves" variable nil (reparse-symbol function_parameters) [17686 17692]))                          
                        :documentation "create a new bond device")
                        (reparse-symbol indented_block_body) [17647 18245])
                    ("" code nil (reparse-symbol indented_block_body) [18262 18282])
                    ("" code nil (reparse-symbol indented_block_body) [18298 18320])
                    ("remove_bonds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18342 18346])
                            ("bond_list" variable nil (reparse-symbol function_parameters) [18348 18357]))                          
                        :documentation "remove bond devices.")
                        (reparse-symbol indented_block_body) [18325 18894])
                    ("" code nil (reparse-symbol indented_block_body) [18911 18931])
                    ("" code nil (reparse-symbol indented_block_body) [18947 18969])
                    ("modify_bond" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18990 18994])
                            ("bond_name" variable nil (reparse-symbol function_parameters) [18996 19005])
                            ("mode" variable nil (reparse-symbol function_parameters) [19007 19011])
                            ("slaves" variable nil (reparse-symbol function_parameters) [19018 19024]))                          
                        :documentation "修改bond设备的属性")
                        (reparse-symbol indented_block_body) [18974 19570])
                    ("" code nil (reparse-symbol indented_block_body) [19587 19607])
                    ("" code nil (reparse-symbol indented_block_body) [19623 19645])
                    ("set_dev_ip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19665 19669])
                            ("dev_name" variable nil (reparse-symbol function_parameters) [19671 19679])
                            ("dev_type" variable nil (reparse-symbol function_parameters) [19681 19689])
                            ("address" variable nil (reparse-symbol function_parameters) [19691 19698])
                            ("netmask" variable nil (reparse-symbol function_parameters) [19700 19707])
                            ("gateway" variable nil (reparse-symbol function_parameters) [19709 19716]))                          
                        :documentation "设置网络设备的IPv4地址.")
                        (reparse-symbol indented_block_body) [19650 20338])
                    ("" code nil (reparse-symbol indented_block_body) [20355 20375])
                    ("" code nil (reparse-symbol indented_block_body) [20391 20413])
                    ("set_dev_ipv6" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20435 20439])
                            ("dev_name" variable nil (reparse-symbol function_parameters) [20441 20449])
                            ("dev_type" variable nil (reparse-symbol function_parameters) [20451 20459])
                            ("address" variable nil (reparse-symbol function_parameters) [20461 20468])
                            ("gateway" variable nil (reparse-symbol function_parameters) [20470 20477]))                          
                        :documentation "设置网络设备的IPv6地址.")
                        (reparse-symbol indented_block_body) [20418 21094])
                    ("" code nil (reparse-symbol indented_block_body) [21111 21131])
                    ("" code nil (reparse-symbol indented_block_body) [21147 21169])
                    ("create_provider_ovs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21198 21202])
                            ("ovs_name" variable nil (reparse-symbol function_parameters) [21204 21212])
                            ("slave" variable nil (reparse-symbol function_parameters) [21214 21219])
                            ("vlan" variable nil (reparse-symbol function_parameters) [21221 21225]))                          
                        :documentation "创建provider ovs桥.")
                        (reparse-symbol indented_block_body) [21174 21773])
                    ("" code nil (reparse-symbol indented_block_body) [21790 21810])
                    ("" code nil (reparse-symbol indented_block_body) [21826 21848])
                    ("modify_provider_ovs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21877 21881])
                            ("ovs_name" variable nil (reparse-symbol function_parameters) [21883 21891])
                            ("slave" variable nil (reparse-symbol function_parameters) [21893 21898]))                          
                        :documentation "修个provider ovs的属性.")
                        (reparse-symbol indented_block_body) [21853 22437])
                    ("" code nil (reparse-symbol indented_block_body) [22454 22474])
                    ("" code nil (reparse-symbol indented_block_body) [22490 22512])
                    ("remove_provider_ovs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22541 22545])
                            ("ovs_list" variable nil (reparse-symbol function_parameters) [22547 22555]))                          
                        :documentation "删除provider ovs.")
                        (reparse-symbol indented_block_body) [22517 23084])
                    ("" code nil (reparse-symbol indented_block_body) [23119 23139])
                    ("" code nil (reparse-symbol indented_block_body) [23155 23177])
                    ("get_host_dns" function (:documentation "
        get host dns list info.
        ") (reparse-symbol indented_block_body) [23182 23415])
                    ("" code nil (reparse-symbol indented_block_body) [23433 23453])
                    ("" code nil (reparse-symbol indented_block_body) [23469 23491])
                    ("set_host_dns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23513 23517])
                            ("dns_list" variable nil (reparse-symbol function_parameters) [23519 23527]))                          
                        :documentation "设置主机DNS信息.")
                        (reparse-symbol indented_block_body) [23496 24096])
                    ("" code nil (reparse-symbol indented_block_body) [24131 24151])
                    ("" code nil (reparse-symbol indented_block_body) [24167 24187])
                    ("connect_iscsi_tgt" function
                       (:documentation "创建iscsi连接"
                        :arguments 
                          ( ("iqn" variable nil (reparse-symbol function_parameters) [24214 24217])
                            ("ip_addr" variable nil (reparse-symbol function_parameters) [24219 24226])
                            ("username" variable nil (reparse-symbol function_parameters) [24228 24236])
                            ("password" variable nil (reparse-symbol function_parameters) [24267 24275])
                            ("port" variable nil (reparse-symbol function_parameters) [24280 24284])
                            ("data" variable nil (reparse-symbol function_parameters) [24291 24295]))                          )
                        (reparse-symbol indented_block_body) [24192 24451])
                    ("" code nil (reparse-symbol indented_block_body) [24486 24506])
                    ("" code nil (reparse-symbol indented_block_body) [24522 24542])
                    ("disconnect_iscsi_tgt" function
                       (:documentation "断开iscsi连接"
                        :arguments 
                          ( ("iqn" variable nil (reparse-symbol function_parameters) [24572 24575])
                            ("ip_addr" variable nil (reparse-symbol function_parameters) [24577 24584])
                            ("port" variable nil (reparse-symbol function_parameters) [24586 24590]))                          )
                        (reparse-symbol indented_block_body) [24547 24703])
                    ("" code nil (reparse-symbol indented_block_body) [24738 24758])
                    ("" code nil (reparse-symbol indented_block_body) [24774 24794])
                    ("get_iscsi_luns" function (:documentation "
        获取本机的iscsi luns
        :return:
        ") (reparse-symbol indented_block_body) [24799 24947])
                    ("" code nil (reparse-symbol indented_block_body) [24982 25002])
                    ("" code nil (reparse-symbol indented_block_body) [25018 25043])
                    ("deploy_pos_node" function
                       (:documentation "部署P-OS服务，新增一个存储节点"
                        :arguments 
                          ( ("cluster_id" variable nil (reparse-symbol function_parameters) [25068 25078])
                            ("node_id" variable nil (reparse-symbol function_parameters) [25080 25087])
                            ("zk_id" variable nil (reparse-symbol function_parameters) [25089 25094])
                            ("sip" variable nil (reparse-symbol function_parameters) [25096 25099])
                            ("cache_disks" variable nil (reparse-symbol function_parameters) [25125 25136])
                            ("joined_nodes" variable nil (reparse-symbol function_parameters) [25138 25150]))                          )
                        (reparse-symbol indented_block_body) [25048 25311])
                    ("" code nil (reparse-symbol indented_block_body) [25346 25366])
                    ("" code nil (reparse-symbol indented_block_body) [25382 25407])
                    ("undeploy_pos_node" function
                       (:documentation "卸载P-OS服务，删除一个存储节点"
                        :arguments 
                          ( ("cluster_id" variable nil (reparse-symbol function_parameters) [25434 25444])
                            ("node_id" variable nil (reparse-symbol function_parameters) [25446 25453]))                          )
                        (reparse-symbol indented_block_body) [25412 25564]))                  
                :type "class")
                nil [1271 25564])
            ("VirtAPI" type
               (:documentation "虚机外部接口"
                :superclasses ("APIBase")
                :members 
                  ( ("ctorArgs" variable nil (reparse-symbol indented_block_body) [25611 25624])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"通过基类的初始化方法, 获取 log 对象和 cif 对象\"\"\"" code nil (reparse-symbol indented_block_body) [25658 25693])
                            ("APIBase" code nil (reparse-symbol indented_block_body) [25702 25724])
                            ("self" variable nil (reparse-symbol indented_block_body) [25733 25750]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25643 25647]))                          
                        :documentation "通过基类的初始化方法, 获取 log 对象和 cif 对象"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25630 25751])
                    ("" code nil (reparse-symbol indented_block_body) [25768 25781])
                    ("" code nil (reparse-symbol indented_block_body) [25797 25814])
                    ("start_vm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25832 25836])
                            ("conf" variable nil (reparse-symbol function_parameters) [25838 25842]))                          
                        :documentation "创建虚机")
                        (reparse-symbol indented_block_body) [25819 25899])
                    ("" code nil (reparse-symbol indented_block_body) [25917 25930])
                    ("" code nil (reparse-symbol indented_block_body) [25946 25963])
                    ("shutdown_vm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25984 25988])
                            ("vm_id" variable nil (reparse-symbol function_parameters) [25990 25995])
                            ("force" variable nil (reparse-symbol function_parameters) [25997 26002]))                          
                        :documentation "虚机关闭, 虚机断电
        @vm_id: string, required
        @force: bool, optional, default=False
        ")
                        (reparse-symbol indented_block_body) [25968 26304])
                    ("" code nil (reparse-symbol indented_block_body) [26321 26334])
                    ("" code nil (reparse-symbol indented_block_body) [26350 26367])
                    ("reboot_vm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26386 26390])
                            ("vm_id" variable nil (reparse-symbol function_parameters) [26392 26397]))                          
                        :documentation "虚机重启
        @vm_id: string, required
        ")
                        (reparse-symbol indented_block_body) [26372 26504])
                    ("" code nil (reparse-symbol indented_block_body) [26521 26534])
                    ("" code nil (reparse-symbol indented_block_body) [26550 26567])
                    ("change_cd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26586 26590])
                            ("vm_id" variable nil (reparse-symbol function_parameters) [26592 26597])
                            ("dev_id" variable nil (reparse-symbol function_parameters) [26599 26605])
                            ("file_path" variable nil (reparse-symbol function_parameters) [26607 26616]))                          
                        :documentation "修改虚拟光驱设备
        @vm_id: string, required
        @dev_id: string, required
        @file_path: string, required
        ")
                        (reparse-symbol indented_block_body) [26572 26964]))                  
                :type "class")
                nil [25566 26964]))          
      :file "API.py"
      :pointmax 26964
      :fsize 28031
      :lastmodtime '(23966 61583 33349 498000)
      :unmatched-syntax '((INDENT_BLOCK 24046 . 24096) (NEWLINE 24045 . 24046) (COLON 24044 . 24045) (FINALLY 24037 . 24044) (INDENT_BLOCK 23034 . 23084) (NEWLINE 23033 . 23034) (COLON 23032 . 23033) (FINALLY 23025 . 23032) (INDENT_BLOCK 22944 . 23017) (NEWLINE 22943 . 22944) (COLON 22942 . 22943) (TRY 22783 . 22786) (AS 22936 . 22938) (INDENT_BLOCK 22387 . 22437) (NEWLINE 22386 . 22387) (COLON 22385 . 22386) (FINALLY 22378 . 22385) (INDENT_BLOCK 22297 . 22370) (NEWLINE 22296 . 22297) (COLON 22295 . 22296) (TRY 22129 . 22132) (AS 22289 . 22291) (INDENT_BLOCK 21723 . 21773) (NEWLINE 21722 . 21723) (COLON 21721 . 21722) (FINALLY 21714 . 21721) (INDENT_BLOCK 21633 . 21706) (NEWLINE 21632 . 21633) (COLON 21631 . 21632) (TRY 21459 . 21462) (AS 21625 . 21627) (INDENT_BLOCK 21044 . 21094) (NEWLINE 21043 . 21044) (COLON 21042 . 21043) (FINALLY 21035 . 21042) (INDENT_BLOCK 20954 . 21027) (NEWLINE 20953 . 20954) (COLON 20952 . 20953) (TRY 20709 . 20712) (AS 20946 . 20948) (INDENT_BLOCK 20288 . 20338) (NEWLINE 20287 . 20288) (COLON 20286 . 20287) (FINALLY 20279 . 20286) (INDENT_BLOCK 20198 . 20271) (NEWLINE 20197 . 20198) (COLON 20196 . 20197) (TRY 19948 . 19951) (AS 20190 . 20192) (INDENT_BLOCK 19520 . 19570) (NEWLINE 19519 . 19520) (COLON 19518 . 19519) (FINALLY 19511 . 19518) (INDENT_BLOCK 19430 . 19503) (NEWLINE 19429 . 19430) (COLON 19428 . 19429) (TRY 19253 . 19256) (AS 19422 . 19424) (INDENT_BLOCK 18844 . 18894) (NEWLINE 18843 . 18844) (COLON 18842 . 18843) (FINALLY 18835 . 18842) (INDENT_BLOCK 18754 . 18827) (NEWLINE 18753 . 18754) (COLON 18752 . 18753) (TRY 18590 . 18593) (AS 18746 . 18748) (INDENT_BLOCK 18195 . 18245) (NEWLINE 18194 . 18195) (COLON 18193 . 18194) (FINALLY 18186 . 18193) (INDENT_BLOCK 18105 . 18178) (NEWLINE 18104 . 18105) (COLON 18103 . 18104) (TRY 17928 . 17931) (AS 18097 . 18099) (NAME 5139 . 5149) (IF 5179 . 5181) (ELSE 5193 . 5197) (NAME 5006 . 5015) (IF 5043 . 5045) (ELSE 5056 . 5060)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
rccpxuanyuand xuanyuan服务主入口，创建xuanyuan服务管理类和多线程任务
\"\"\"" code nil nil [321 378])
            ("os" include nil nil [393 402])
            ("getpass" include nil nil [419 433])
            ("pwd" include nil nil [434 444])
            ("grp" include nil nil [445 455])
            ("threading" include nil nil [456 472])
            ("syslog" include nil nil [473 486])
            ("resource" include nil nil [487 502])
            ("tempfile" include nil nil [503 518])
            ("logging" include nil nil [520 534])
            ("rccpxuanyuan" include nil nil [536 570])
            ("rccpxuanyuan" include nil nil [571 603])
            ("rccpxuanyuan.common" include nil nil [604 644])
            ("rccpxuanyuan.common" include nil nil [645 687])
            ("rccpxuanyuan.common" include nil nil [688 728])
            ("rccpxuanyuan.config" include nil nil [858 896])
            ("rccpxuanyuan.rpc.xuanyuan_rpcserver" include nil nil [1076 1141])
            ("rccpxuanyuan.task.task_manager" include nil nil [1142 1196])
            ("rccpxuanyuan.client_if" include nil nil [1197 1240])
            ("rccpxuanyuan" include nil nil [1241 1281])
            ("FatalError" type
               (:documentation " Raised when rccpxuanyuan fail to start "
                :superclasses ("Exception")
                :type "class")
                nil [1284 1364])
            ("serve_clients" function
               (:documentation "
    Xuanyuan服务初始化接口，完成服务中对象、任务、服务的初始化，
    并在异常后进行销毁。
    params log: log管理对象
    "
                :arguments 
                  ( ("log" variable nil (reparse-symbol function_parameters) [1384 1387]))                  )
                nil [1366 1865])
            ("run" function (:documentation "
    运行服务
    ") nil [1867 2957])
            ("__assert_log_permission" function nil nil [4105 4582])
            ("__assert_single_instance" function nil nil [4584 4812])
            ("__assert_rccpxuanyuan_user" function nil nil [4814 5318])
            ("__assert_sudoer_permissions" function nil nil [5320 5966])
            ("__set_cpu_affinity" function nil nil [5968 6630])
            ("main" function (:documentation " rccpxuanyuand service entry ") nil [6632 7186]))          
      :file "rccpxuanyuand.py"
      :pointmax 7186
      :fsize 7311
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax '((INDENT_BLOCK 7062 . 7186) (NEWLINE 7061 . 7062) (COLON 7060 . 7061) (TRY 6689 . 6692) (AS 7054 . 7056) (INDENT_BLOCK 4777 . 4812) (NEWLINE 4776 . 4777) (COLON 4775 . 4776) (TRY 4620 . 4623) (AS 4769 . 4771)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("\"\"\"
a proxy for rccpxuanyuan.common.constants.

remove when all modules import rccpxuanyuan.common.constants directly
\"\"\"" code nil nil [861 982])
            ("rccpxuanyuan.common.constants" include nil nil [984 1027]))          
      :file "constants.py"
      :pointmax 1048
      :fsize 1047
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("\"\"\"
a proxy for rccpxuanyuan.common.config.

remove when all modules import rccpxuanyuan.common.config directly
\"\"\"" code nil nil [861 976])
            ("rccpxuanyuan.common.config" include nil nil [978 1018]))          
      :file "config.py"
      :pointmax 1039
      :fsize 1038
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [838 876])
            ("rccpxuanyuan" include nil nil [878 927])
            ("if" code nil nil [975 1096]))          
      :file "superrccpxuanyuand.py"
      :pointmax 1096
      :fsize 1095
      :lastmodtime '(23940 33513 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [820 858])
            ("argparse" include nil nil [860 875])
            ("pwd" include nil nil [876 900])
            ("sys" include nil nil [901 911])
            ("os" include nil nil [912 921])
            ("errno" include nil nil [922 934])
            ("importlib" include nil nil [935 951])
            ("pkgutil" include nil nil [952 966])
            ("functools" include nil nil [967 994])
            ("resource" include nil nil [995 1010])
            ("signal" include nil nil [1011 1024])
            ("syslog" include nil nil [1025 1038])
            ("logging" include nil nil [1039 1053])
            ("logging.config" include nil nil [1054 1075])
            ("contextlib" include nil nil [1076 1106])
            ("six" include nil nil [1108 1118])
            ("rccpxuanyuan.common" include nil nil [1120 1162])
            ("rccpxuanyuan.common" include nil nil [1163 1204])
            ("rccpxuanyuan.common" include nil nil [1205 1246])
            ("rccpxuanyuan.common" include nil nil [1247 1287])
            ("rccpxuanyuan.common" include nil nil [1288 1328])
            ("rccpxuanyuan.common" include nil nil [1329 1365])
            ("rccpxuanyuan.common" include nil nil [1366 1410])
            ("multiprocessing" include nil nil [1412 1453])
            ("rccpxuanyuan" include nil nil [1455 1501])
            ("rccpxuanyuan.storage" include nil nil [1502 1540])
            ("rccpxuanyuan.storage" include nil nil [1541 1577])
            ("rccpxuanyuan.storage" include nil nil [1578 1616])
            ("" code nil nil [1663 1729])
            ("rccpxuanyuan.storage.fileUtils" include nil nil [1730 1802])
            ("rccpxuanyuan.storage.fileUtils" include nil nil [1803 1879])
            ("rccpxuanyuan.storage.iscsi" include nil nil [1880 1954])
            ("rccpxuanyuan.storage.iscsi" include nil nil [1955 2029])
            ("rccpxuanyuan.common.superrccpxuanyuan" include nil nil [2030 2105])
            ("rccpxuanyuan.network.initializer" include nil nil [2107 2186])
            ("rccpxuanyuan.storage.multipath" include nil nil [2188 2262])
            ("rccpxuanyuan.storage" include nil nil [2263 2305])
            ("rccpxuanyuan.constants" include nil nil [2306 2402])
            ("rccpxuanyuan.config" include nil nil [2403 2441])
            ("RUN_AS_TIMEOUT" variable nil nil [2443 2504])
            ("_running" variable nil nil [2506 2521])
            ("FatalError" type
               (:documentation " Raised when superrccpxuanyuan fails to start "
                :superclasses ("Exception")
                :type "class")
                nil [2524 2610])
            ("Timeout" type
               (:superclasses ("RuntimeError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2645 2649]))                  
                :type "class")
                nil [2612 2650])
            ("LOG_CONF_PATH" variable nil nil [2652 2713])
            ("logDecorator" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2733 2737]))              ) nil [2716 3278])
            ("safe_poll" function
               (:documentation "
    This is a workaround until we get the PEP-475 fix for EINTR.  It
    ensures that a multiprocessing.connection.poll() will not return
    before the timeout due to an interruption.

    Returns True if there is any data to read from the pipe or if the
    pipe was closed.  Returns False if the timeout expired.
    "
                :arguments 
                  ( ("mp_connection" variable nil (reparse-symbol function_parameters) [3294 3307])
                    ("timeout" variable nil (reparse-symbol function_parameters) [3309 3316]))                  )
                nil [3280 3890])
            ("_Superrccpxuanyuan" type
               (:superclasses ("object")
                :members 
                  ( ("log" variable nil (reparse-symbol indented_block_body) [3931 3990])
                    ("getScsiSerial" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4032 4036])
                            ("args" variable nil (reparse-symbol function_parameters) [4038 4043])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4045 4053]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3996 4103])
                    ("mount" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4136 4140])
                            ("fs_spec" variable nil (reparse-symbol function_parameters) [4142 4149])
                            ("fs_file" variable nil (reparse-symbol function_parameters) [4151 4158])
                            ("mntOpts" variable nil (reparse-symbol function_parameters) [4160 4167])
                            ("vfstype" variable nil (reparse-symbol function_parameters) [4174 4181])
                            ("cgroup" variable nil (reparse-symbol function_parameters) [4202 4208]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4108 4325])
                    ("umount" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4359 4363])
                            ("fs_file" variable nil (reparse-symbol function_parameters) [4365 4372])
                            ("force" variable nil (reparse-symbol function_parameters) [4374 4379])
                            ("lazy" variable nil (reparse-symbol function_parameters) [4387 4391])
                            ("freeloop" variable nil (reparse-symbol function_parameters) [4399 4407]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4330 4490])
                    ("resizeMap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4527 4531])
                            ("devName" variable nil (reparse-symbol function_parameters) [4533 4540]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4495 4589])
                    ("removeDeviceMapping" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4636 4640])
                            ("devName" variable nil (reparse-symbol function_parameters) [4642 4649]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4594 4691])
                    ("getdeviSCSIinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4734 4738])
                            ("args" variable nil (reparse-symbol function_parameters) [4740 4745])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4747 4755]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4696 4807])
                    ("readSessionInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4850 4854])
                            ("sessionID" variable nil (reparse-symbol function_parameters) [4856 4865]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4812 4911])
                    ("getPathsStatus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4953 4957]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4916 4993])
                    ("multipath_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5037 5041]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4998 5079])
                    ("_runAs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5095 5099])
                            ("user" variable nil (reparse-symbol function_parameters) [5101 5105])
                            ("groups" variable nil (reparse-symbol function_parameters) [5107 5113])
                            ("func" variable nil (reparse-symbol function_parameters) [5115 5119])
                            ("args" variable nil (reparse-symbol function_parameters) [5121 5125])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5130 5136]))                          )
                        (reparse-symbol indented_block_body) [5084 6689])
                    ("validateAccess" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6731 6735])
                            ("user" variable nil (reparse-symbol function_parameters) [6737 6741])
                            ("groups" variable nil (reparse-symbol function_parameters) [6743 6749])
                            ("args" variable nil (reparse-symbol function_parameters) [6751 6756])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6758 6766]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6694 6880])
                    ("fuser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6913 6917])
                            ("args" variable nil (reparse-symbol function_parameters) [6919 6924])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6926 6934]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6885 6981])
                    ("hbaRescan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7018 7022]))                          
                        :decorators 
                          ( ("logDecorator" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6986 7054]))                  
                :type "class")
                nil [3892 7054])
            ("terminate" function (:arguments 
              ( ("signo" variable nil (reparse-symbol function_parameters) [7070 7075])
                ("frame" variable nil (reparse-symbol function_parameters) [7077 7082]))              ) nil [7056 7126])
            ("__assert_single_instance" function nil nil [7128 7322])
            ("main" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [7333 7337]))              ) nil [7324 10316])
            ("option_parser" function nil nil [10318 10628]))          
      :file "superrccpxuanyuan_server.py"
      :pointmax 10628
      :fsize 10627
      :lastmodtime '(23940 33513 0 0)
      :unmatched-syntax '((INDENT_BLOCK 10189 . 10316) (NEWLINE 10188 . 10189) (COLON 10187 . 10188) (TRY 7344 . 7347) (AS 10183 . 10185) (INDENT_BLOCK 7551 . 7616) (NEWLINE 7550 . 7551) (COLON 7549 . 7550) (TRY 7392 . 7395) (AS 7545 . 7547) (INDENT_BLOCK 7289 . 7322) (NEWLINE 7288 . 7289) (COLON 7287 . 7288) (TRY 7164 . 7167) (AS 7283 . 7285) (INDENT_BLOCK 5690 . 6689) (NEWLINE 5689 . 5690) (COLON 5688 . 5689) (WITH 5652 . 5656) (COMMA 5670 . 5671) (INDENT_BLOCK 5531 . 5554) (NEWLINE 5530 . 5531) (COLON 5529 . 5530) (TRY 5207 . 5210) (AS 5525 . 5527)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("rccpxuanyuan.common" include nil nil [861 901])
            ("rccpxuanyuan.common" include nil nil [902 942])
            ("constants" include nil nil [950 966])
            ("AUTOMATIC" variable nil nil [969 987])
            ("_SYS_ONLINE_CPUS" variable nil nil [989 1040])
            ("get" function
               (:documentation "
    Get the affinity of a process, by its <pid>, using taskset command.
    We assume all threads of the process have the same affinity, because
    this is the only usecase rccpxuanyuan cares about - and requires.
    Return a frozenset of ints, each one being a cpu indices on which the
    process can run.
    Example: frozenset([0, 1, 2, 3])
    Raise cmdutils.Error on failure.
    "
                :arguments 
                  ( ("pid" variable nil (reparse-symbol function_parameters) [1051 1054]))                  )
                nil [1043 1695])
            ("set" function
               (:documentation "
    Set the affinity of a process, by its <pid>, using taskset command.
    if all_tasks evaluates to True, set the affinity for all threads of
    the target process.
    <cpu_set> must be an iterable whose items are ints which represent
    cpu indices, on which the process will be allowed to run; the format
    is the same as what the get() function returns.
    Raise cmdutils.Error on failure.
    "
                :arguments 
                  ( ("pid" variable nil (reparse-symbol function_parameters) [1705 1708])
                    ("cpu_set" variable nil (reparse-symbol function_parameters) [1710 1717])
                    ("all_tasks" variable nil (reparse-symbol function_parameters) [1719 1728]))                  )
                nil [1697 2555])
            ("online_cpus" function (:documentation "
    Return a frozenset which contains identifiers of online CPUs,
    as non-negative integers.
    ") nil [2557 2778])
            ("pick_cpu" function
               (:documentation "
    Select the best CPU rccpxuanyuan should pin to.
    `cpu_set' is any iterable which produces the sequence of all
    available CPUs, among which rccpxuanyuan should pick the best one.
    "
                :arguments 
                  ( ("cpu_set" variable nil (reparse-symbol function_parameters) [2793 2800]))                  )
                nil [2780 3066])
            ("_cpu_set_from_output" function
               (:documentation "
    Parse the output of taskset, in the format
    pid ${PID}'s current affinity mask: ${HEXMASK}
    and return a list of strings, each one being is a cpu index.
    "
                :arguments 
                  ( ("line" variable nil (reparse-symbol function_parameters) [3093 3097]))                  )
                nil [3068 3438])
            ("cpulist_parse" function
               (:documentation "
    Expand the kernel cpulist syntax (e.g. 0-2,5) into a plain
    frozenset of integers (e.g. frozenset([0,1,2,5]))
    The input format is like the content of the special file
    /sys/devices/system/cpu/online
    or the output of the 'taskset' and 'lscpu' tools.
    "
                :arguments 
                  ( ("cpu_range" variable nil (reparse-symbol function_parameters) [3458 3467]))                  )
                nil [3440 4006]))          
      :file "taskset.py"
      :pointmax 4006
      :fsize 4005
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((FROM 943 . 947) (PERIOD 948 . 949)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
xuanyuan系统logger配置模块
\"\"\"" code nil nil [1 29])
            ("logging" include nil nil [31 45])
            ("logging" include nil nil [46 83])
            ("rccpxuanyuan.common" include nil nil [85 126])
            ("LOGGERCONFFILE" code nil nil [129 191])
            ("xuanyuan_configure_logger" function (:documentation " configure xuanyuan logger ") nil [194 607]))          
      :file "xuanyuan_logger.py"
      :pointmax 607
      :fsize 618
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("\"\"\"
A module containing miscellaneous functions and classes that are used
plentifuly around rccpxuanyuan.

.. attribute:: utils.symbolerror

    Contains a reverse dictionary pointing from error string to its error code.
\"\"\"" code nil nil [861 1085])
            ("collections" include nil nil [1086 1140])
            ("contextlib" include nil nil [1141 1178])
            ("errno" include nil nil [1179 1191])
            ("functools" include nil nil [1192 1208])
            ("logging" include nil nil [1209 1223])
            ("six" include nil nil [1224 1234])
            ("sys" include nil nil [1235 1245])
            ("os" include nil nil [1246 1255])
            ("socket" include nil nil [1256 1269])
            ("threading" include nil nil [1270 1286])
            ("time" include nil nil [1287 1298])
            ("rccpxuanyuan.common" include nil nil [1300 1344])
            ("rccpxuanyuan.common" include nil nil [1345 1402])
            ("rccpxuanyuan.common.compat" include nil nil [1403 1448])
            ("rccpxuanyuan.common.marks" include nil nil [1449 1497])
            ("rccpxuanyuan.common.proc" include nil nil [1498 1542])
            ("_THP_STATE_PATH" variable nil nil [1544 1607])
            ("if" code nil nil [1608 1723])
            ("IOCLASS" type
               (:members 
                  ( ("REALTIME" variable nil (reparse-symbol indented_block_body) [1744 1756])
                    ("BEST_EFFORT" variable nil (reparse-symbol indented_block_body) [1761 1776])
                    ("IDLE" variable nil (reparse-symbol indented_block_body) [1781 1789]))                  
                :type "class")
                nil [1725 1790])
            ("NICENESS" type
               (:members 
                  ( ("NORMAL" variable nil (reparse-symbol indented_block_body) [1812 1822])
                    ("HIGH" variable nil (reparse-symbol indented_block_body) [1827 1836]))                  
                :type "class")
                nil [1792 1837])
            ("_parseMemInfo" function
               (:documentation "
    Parse the content of ``/proc/meminfo`` as list of strings
    and return its content as a dictionary.
    "
                :arguments 
                  ( ("lines" variable nil (reparse-symbol function_parameters) [1857 1862]))                  )
                nil [1839 2120])
            ("readMemInfo" function (:documentation "
    Parse ``/proc/meminfo`` and return its content as a dictionary.

    For a reason unknown to me, ``/proc/meminfo`` is sometimes
    empty when opened. If that happens, the function retries to open it
    3 times.

    :returns: a dictionary representation of ``/proc/meminfo``
    ") nil [2122 2841])
            ("_parseCmdLine" function (:arguments 
              ( ("pid" variable nil (reparse-symbol function_parameters) [2861 2864]))              ) nil [2843 3006])
            ("getCmdArgs" function (:arguments 
              ( ("pid" variable nil (reparse-symbol function_parameters) [3023 3026]))              ) nil [3008 3350])
            ("convertToStr" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [3369 3372]))              ) nil [3352 3536])
            ("stripNewLines" function (:arguments 
              ( ("lines" variable nil (reparse-symbol function_parameters) [3556 3561]))              ) nil [3538 3626])
            ("Canceled" type
               (:documentation "
    Raised by methods decorated with @cancelpoint.

    Objects using cancellation points may like to handle this exception for
    cleaning up after cancellation.

    Inherits from BaseException so it can propagate through normal Exception
    handlers.
    "
                :superclasses ("BaseException")
                :type "class")
                nil [3628 3931])
            ("cancelpoint" function
               (:documentation "
    Decorate a method so it raises Canceled exception if the methods is invoked
    after the object was canceled.

    Decorated object must implement __canceled__ method, returning truthy value
    if the object is canceled.
    "
                :arguments 
                  ( ("meth" variable nil (reparse-symbol function_parameters) [3949 3953]))                  )
                nil [3933 4458])
            ("symbolerror" variable nil nil [4460 4476])
            ("for" code nil nil [4477 4573])
            ("closing" type
               (:documentation "
    Context Manager that is responsible for closing the object it gets upon
    completion of the with statement.
    __exit__ will be called in the end of the with statement and in case of
    exception during the object lifetime.

    Adaptation from https://docs.python.org/2.7/library/contextlib.html
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4977 4991])
                            ("self" variable nil (reparse-symbol indented_block_body) [5000 5014]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4936 4940])
                            ("obj" variable nil (reparse-symbol function_parameters) [4942 4945])
                            ("log" variable nil (reparse-symbol function_parameters) [4947 4950]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4923 5015])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5034 5038]))                          )
                        (reparse-symbol indented_block_body) [5020 5065])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5083 5087])
                            ("t" variable nil (reparse-symbol function_parameters) [5089 5090])
                            ("v" variable nil (reparse-symbol function_parameters) [5092 5093])
                            ("tb" variable nil (reparse-symbol function_parameters) [5095 5097]))                          )
                        (reparse-symbol indented_block_body) [5070 5318]))                  
                :type "class")
                nil [4575 5318])
            ("AsyncProcessOperation" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Wraps a running process operation.

        resultParser should be of type callback(rc, out, err) and can return
        anything or throw exceptions.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5426 5600])
                            ("self" variable nil (reparse-symbol indented_block_body) [5609 5638])
                            ("self" variable nil (reparse-symbol indented_block_body) [5648 5667])
                            ("self" variable nil (reparse-symbol indented_block_body) [5676 5709])
                            ("self" variable nil (reparse-symbol indented_block_body) [5719 5736]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5386 5390])
                            ("proc" variable nil (reparse-symbol function_parameters) [5392 5396])
                            ("resultParser" variable nil (reparse-symbol function_parameters) [5398 5410]))                          
                        :documentation "
        Wraps a running process operation.

        resultParser should be of type callback(rc, out, err) and can return
        anything or throw exceptions.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5373 5737])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5751 5755])
                            ("timeout" variable nil (reparse-symbol function_parameters) [5757 5764])
                            ("cond" variable nil (reparse-symbol function_parameters) [5771 5775]))                          
                        :documentation "
        Waits until the process has exited, the timeout has been reached or
        the condition has been met
        ")
                        (reparse-symbol indented_block_body) [5742 5964])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5978 5982]))                          
                        :documentation "
        Stops the running operation, effectively sending a kill signal to
        the process
        ")
                        (reparse-symbol indented_block_body) [5969 6129])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6145 6149]))                          
                        :documentation "
        Returns the result as a tuple of (result, error).
        If the operation is still running it will block until it returns.

        If no resultParser has been set the default result
        is (rc, out, err)
        ")
                        (reparse-symbol indented_block_body) [6134 6952])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6969 6973]))                          )
                        (reparse-symbol indented_block_body) [6957 7071]))                  
                :type "class")
                nil [5332 7071])
            ("Callback" type
               (:members 
                  ( ("log" variable nil (reparse-symbol indented_block_body) [7146 7187])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7206 7210]))                          )
                        (reparse-symbol indented_block_body) [7193 7568]))                  
                :type "class")
                nil [7073 7568])
            ("CallbackChain" type
               (:documentation "
    Encapsulates the pattern of calling multiple alternative functions
    to achieve some action.

    The chain ends when the action succeeds (indicated by a callback
    returning True) or when it runs out of alternatives.
    "
                :superclasses ("threading.Thread")
                :members 
                  ( ("log" variable nil (reparse-symbol indented_block_body) [7855 7901])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :param callbacks:
            iterable of callback objects. Individual callback should be
            callable and when invoked should return True/False based on whether
            it was successful in accomplishing the chain's action.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7949 8209])
                            ("super" code nil (reparse-symbol indented_block_body) [8218 8255])
                            ("self" variable nil (reparse-symbol indented_block_body) [8264 8282])
                            ("self" variable nil (reparse-symbol indented_block_body) [8291 8324]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7920 7924])
                            ("callbacks" variable nil (reparse-symbol function_parameters) [7926 7935]))                          
                        :documentation "
        :param callbacks:
            iterable of callback objects. Individual callback should be
            callable and when invoked should return True/False based on whether
            it was successful in accomplishing the chain's action.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7907 8325])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8338 8342]))                          
                        :documentation "Invokes serially the callback objects until any reports success.")
                        (reparse-symbol indented_block_body) [8330 8913])
                    ("addCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8934 8938])
                            ("func" variable nil (reparse-symbol function_parameters) [8940 8944])
                            ("args" variable nil (reparse-symbol function_parameters) [8946 8951])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8953 8961]))                          
                        :documentation "
        :param func:
            the callback function
        :param args:
            args of the callback
        :param kwargs:
            kwargs of the callback
        :return:
        ")
                        (reparse-symbol indented_block_body) [8918 9232]))                  
                :type "class")
                nil [7570 9232])
            ("RollbackContext" type
               (:superclasses ("object")
                :members 
                  ( ("'''
    A context manager for recording and playing rollback.
    The first exception will be remembered and re-raised after rollback

    Sample usage:
    with RollbackContext() as rollback:
        step1()
        rollback.prependDefer(lambda: undo step1)
        def undoStep2(arg): pass
        step2()
        rollback.prependDefer(undoStep2, arg)

    More examples see tests/utilsTests.py
    '''" code nil (reparse-symbol indented_block_body) [9269 9673])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9731 9749])
                            ("self" variable nil (reparse-symbol indented_block_body) [9758 9801]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9691 9695])
                            ("on_exception_only" variable nil (reparse-symbol function_parameters) [9697 9714]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9678 9802])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9821 9825]))                          )
                        (reparse-symbol indented_block_body) [9807 9848])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9866 9870])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [9872 9880])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [9882 9891])
                            ("traceback" variable nil (reparse-symbol function_parameters) [9893 9902]))                          
                        :documentation "
        If this function doesn't return True (or raises a different
        exception), python re-raises the original exception once this
        function is finished.
        ")
                        (reparse-symbol indented_block_body) [9853 10627])
                    ("defer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10642 10646])
                            ("func" variable nil (reparse-symbol function_parameters) [10648 10652])
                            ("args" variable nil (reparse-symbol function_parameters) [10654 10659])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10661 10669]))                          )
                        (reparse-symbol indented_block_body) [10632 10723])
                    ("prependDefer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10745 10749])
                            ("func" variable nil (reparse-symbol function_parameters) [10751 10755])
                            ("args" variable nil (reparse-symbol function_parameters) [10757 10762])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10764 10772]))                          )
                        (reparse-symbol indented_block_body) [10728 10829]))                  
                :type "class")
                nil [9234 10829])
            ("running" function
               (:decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("runnable" variable nil (reparse-symbol function_parameters) [10859 10867]))                  )
                nil [10831 10960])
            ("get_selinux_enforce_mode" function (:documentation "
    Returns the SELinux mode as reported by kernel.

    1 = enforcing - SELinux security policy is enforced.
    0 = permissive - SELinux prints warnings instead of enforcing.
    -1 = disabled - No SELinux policy is loaded.
    ") nil [10962 11584])
            ("picklecopy" function
               (:documentation "
    Returns a deep copy of argument,
    like copy.deepcopy() does, but faster.

    To be faster, this function leverages the pickle
    module. The following types are safely handled:

    * None, True, and False
    * integers, long integers, floating point numbers,
      complex numbers
    * normal and Unicode strings
    * tuples, lists, sets, and dictionaries containing
      only picklable objects
    * functions defined at the top level of a module
    * built-in functions defined at the top level of a module
    * classes that are defined at the top level of a module
    * instances of such classes whose __dict__ or the
      result of calling __getstate__() is picklable.

    Attempts to pickle unpicklable objects will raise the
    PicklingError exception;
    For full documentation, see:
    https://docs.python.org/2/library/pickle.html
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [11601 11604]))                  )
                nil [11586 12553])
            ("round" function
               (:documentation "
    Round number n to the next multiple of size
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [12565 12566])
                    ("size" variable nil (reparse-symbol function_parameters) [12568 12572]))                  )
                nil [12555 12701])
            ("create_connected_socket" function (:arguments 
              ( ("host" variable nil (reparse-symbol function_parameters) [12731 12735])
                ("port" variable nil (reparse-symbol function_parameters) [12737 12741])
                ("sslctx" variable nil (reparse-symbol function_parameters) [12743 12749])
                ("timeout" variable nil (reparse-symbol function_parameters) [12756 12763]))              ) nil [12703 13119])
            ("stopwatch" function
               (:decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [13151 13158])
                    ("level" variable nil (reparse-symbol function_parameters) [13160 13165])
                    ("log" variable nil (reparse-symbol function_parameters) [13195 13198]))                  )
                nil [13121 13479])
            ("unique" function
               (:documentation "
    Return unique items from iterable of hashable objects, keeping the
    original order.
    "
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [13492 13500]))                  )
                nil [13481 13665])
            ("log_success" function (:arguments 
              ( ("success" variable nil (reparse-symbol function_parameters) [13683 13690])
                ("log" variable nil (reparse-symbol function_parameters) [13692 13695])
                ("msg_ok" variable nil (reparse-symbol function_parameters) [13697 13703])
                ("msg_fail" variable nil (reparse-symbol function_parameters) [13705 13713]))              ) nil [13667 13813]))          
      :file "utils.py"
      :pointmax 13813
      :fsize 13812
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((NAME 7088 . 7098) (PAREN_BLOCK 7098 . 7139) (INDENT_BLOCK 6790 . 6839) (NEWLINE 6789 . 6790) (COLON 6788 . 6789) (TRY 6622 . 6625) (AS 6784 . 6786)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [817 855])
            ("os" include nil nil [857 866])
            ("collections" include nil nil [867 885])
            ("threading" include nil nil [886 902])
            ("rccpxuanyuan" include nil nil [904 935])
            ("rccpxuanyuan.common" include nil nil [936 973])
            ("rccpxuanyuan.common" include nil nil [974 1013])
            ("rccpxuanyuan.common" include nil nil [1014 1063])
            ("rccpxuanyuan.config" include nil nil [1064 1102])
            ("_PATH" variable nil nil [1105 1139])
            ("_VM" variable nil nil [1140 1161])
            ("lock" variable nil nil [1163 1186])
            ("DEFAULT_HUGEPAGESIZE" variable nil nil [1188 1268])
            ("NonContiguousMemory" type
               (:documentation "Raised when the memory is too fragmented to allocate hugepages"
                :superclasses ("Exception")
                :type "class")
                nil [1271 1382])
            ("supported" function
               (:documentation "Small cached helper to get available hugepage sizes.

    Cached as the sizes don't change in the system's runtime.

    Args:
        path: A path to the hugepages directory. (mostly for testing purposes)

    Returns:
        A list of supported hugepage sizes available on the system.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [1414 1418]))                  
                :decorators 
                  ( ("cache.Memoized" function (:type "decorator") nil nil))                  )
                nil [1384 1760])
            ("alloc" function
               (:documentation "Thread *unsafe* function to allocate hugepages.

    The default size depends on the architecture:
        x86_64: 2 MiB
        POWER8: 16 MiB

    It is a responsibility of the caller to properly handle concurrency.

    Args:
        count (int): Number of huge pages to be allocated.

    Returns:
        int: The number of successfully allocated hugepages.
    "
                :arguments 
                  ( ("count" variable nil (reparse-symbol function_parameters) [1772 1777])
                    ("size" variable nil (reparse-symbol function_parameters) [1779 1783])
                    ("path" variable nil (reparse-symbol function_parameters) [1800 1804]))                  )
                nil [1762 2289])
            ("dealloc" function
               (:documentation "Thread *unsafe* function to deallocate hugepages.

    The default size depends on the architecture:
        x86_64: 2 MiB
        POWER8: 16 MiB

    It is a responsibility of the caller to properly handle concurrency.

    Args:
        count (int): Number of huge pages to be deallocated.

    Returns:
        int: The number of successfully deallocated hugepages.
    "
                :arguments 
                  ( ("count" variable nil (reparse-symbol function_parameters) [2303 2308])
                    ("size" variable nil (reparse-symbol function_parameters) [2310 2314])
                    ("path" variable nil (reparse-symbol function_parameters) [2333 2337]))                  )
                nil [2291 2833])
            ("_alloc" function
               (:documentation "Helper to actually (de)allocate hugepages, called by public facing
        methods.

    Args:
        count: Number of hugepages to allocate (can be negative)
        size: The target hugepage size (must be supported by the system)
        path: Path to the hugepages directory.

    Returns: The amount of allocated pages (can be negative,
        implicating deallocation).

    Raises:
    "
                :arguments 
                  ( ("count" variable nil (reparse-symbol function_parameters) [2846 2851])
                    ("size" variable nil (reparse-symbol function_parameters) [2853 2857])
                    ("path" variable nil (reparse-symbol function_parameters) [2859 2863]))                  )
                nil [2835 3579])
            ("state" function
               (:documentation "Read the state of hugepages on the system.

    Args:
        path: A path to the hugepages directory. (mostly for testing purposes)

    Returns:
        A (default)dict of hugepage sizes and their properties
            (e.g. free, allocated hugepages of given size)
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [3591 3595]))                  )
                nil [3581 4839])
            ("calculate_required_allocation" function
               (:documentation "

    Args:
        cif: The ClientIF instance. Used as we need to iterate over VMs to
            reason about hugepages consumed by them.
        vm_hugepages: The number of hugepages VM requires.
        vm_hugepagesz: VM's hugepage size.

    It is a responsibility of the caller to properly handle concurrency.

    Returns:
        Number of hugepages to be allocated considering system resources at
        our disposal.
    "
                :arguments 
                  ( ("cif" variable nil (reparse-symbol function_parameters) [4875 4878])
                    ("vm_hugepages" variable nil (reparse-symbol function_parameters) [4880 4892])
                    ("vm_hugepagesz" variable nil (reparse-symbol function_parameters) [4894 4907]))                  )
                nil [4841 6569])
            ("calculate_required_deallocation" function
               (:documentation "

    Args:
        vm_hugepages: The number of hugepages VM requires.
        vm_hugepagesz: VM's hugepage size.

    It is a responsibility of the caller to properly handle concurrency.

    Returns:
        Number of hugepages to be deallocated while making sure not to break
        any constraints (reserved and preallocated pages).
    "
                :arguments 
                  ( ("vm_hugepages" variable nil (reparse-symbol function_parameters) [6607 6619])
                    ("vm_hugepagesz" variable nil (reparse-symbol function_parameters) [6621 6634]))                  )
                nil [6571 7733])
            ("_all_vm_hugepages" function (:arguments 
              ( ("cif" variable nil (reparse-symbol function_parameters) [7757 7760])
                ("vm_hugepages" variable nil (reparse-symbol function_parameters) [7762 7774])
                ("vm_hugepagesz" variable nil (reparse-symbol function_parameters) [7776 7789]))              ) nil [7735 7934])
            ("_preallocated_hugepages" function (:arguments 
              ( ("vm_hugepagesz" variable nil (reparse-symbol function_parameters) [7964 7977]))              ) nil [7936 8439])
            ("_reserved_hugepages" function (:arguments 
              ( ("hugepagesz" variable nil (reparse-symbol function_parameters) [8465 8475]))              ) nil [8441 8821])
            ("_cmdline_hugepagesz_to_kb" function (:arguments 
              ( ("cmdline" variable nil (reparse-symbol function_parameters) [8853 8860]))              ) nil [8823 8979])
            ("_size_from_dir" function
               (:documentation "Get the size portion of a hugepages directory.

    Example: _size_from_dir('hugepages-1048576Kb') ~> 1048576

    Args:
        path: Path to the hugepages directory.

    Returns:
        Just the hugepage size from the name of directory specified in path.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9000 9004]))                  )
                nil [8981 9309]))          
      :file "hugepages.py"
      :pointmax 9309
      :fsize 9308
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuan!rccpxuanyuan!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
