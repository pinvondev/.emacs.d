;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
libvirt 资源管理
\"\"\"" code nil nil [1 21])
            ("atexit" include nil nil [23 36])
            ("threading" include nil nil [37 53])
            ("functools" include nil nil [54 70])
            ("os" include nil nil [71 80])
            ("logging" include nil nil [81 95])
            ("io" include nil nil [96 105])
            ("libvirt" include nil nil [106 120])
            ("rccpxuanyuan.common" include nil nil [122 162])
            ("rccpxuanyuan.common" include nil nil [163 205])
            ("rccpxuanyuan.common" include nil nil [206 241])
            ("rccpxuanyuan.common" include nil nil [242 277])
            ("rccpxuanyuan.common" include nil nil [278 319])
            ("rccpxuanyuan.common.cache" include nil nil [320 366])
            ("rccpxuanyuan.common.password" include nil nil [367 425])
            ("rccpxuanyuan.common" include nil nil [426 464])
            ("_SASL_USERNAME" variable nil nil [467 504])
            ("_LIBVIRT_PASSWORD_PATH" variable nil nil [505 583])
            ("_EDOMAINS" variable nil nil [584 643])
            ("_ECODES" variable nil nil [644 791])
            ("THREAD_NAME" variable nil nil [792 822])
            ("LOOP_EVENT_TIMEOUT" variable nil nil [823 848])
            ("LOG" variable nil nil [864 889])
            ("_EventLoop" type
               (:documentation "
    loop process libvirt event
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1151 1175])
                            ("self" variable nil (reparse-symbol indented_block_body) [1184 1211])
                            ("self" variable nil (reparse-symbol indented_block_body) [1220 1244]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1138 1142]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1125 1248])
                    ("start_wait_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1274 1278]))                          )
                        (reparse-symbol indented_block_body) [1253 1712])
                    ("stop_wait_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1737 1741]))                          )
                        (reparse-symbol indented_block_body) [1717 1891])
                    ("_loop_wait_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1917 1921]))                          )
                        (reparse-symbol indented_block_body) [1896 2342])
                    ("_clear_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2347 2571])
                    ("_cb_wait_event_timeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2603 2607])
                            ("args" variable nil (reparse-symbol function_parameters) [2609 2614]))                          
                        :documentation "
        libvirt服务事件等待超时回调。
        libvirt事件通知的时间间隔并没有业务需求，_EventLoop通过控制超时，
        限制libvirt事件等待间隔，防止关闭等待时，阻塞在等待事件流程。
        所以_EventLoop暂时不关系超时回调执行内容，此处留空回调。
        ")
                        (reparse-symbol indented_block_body) [2576 2803]))                  
                :type "class")
                nil [1055 2803])
            ("LibvirtAssistant" type
               (:documentation "
    libvirt event and connection manager
    "
                :members 
                  ( ("_connections" variable nil (reparse-symbol indented_block_body) [2891 2908])
                    ("_connection_lock" variable nil (reparse-symbol indented_block_body) [2914 2949])
                    ("_callback_lock" variable nil (reparse-symbol indented_block_body) [2955 2988])
                    ("set_callback_libvirt_event" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3042 3045])
                            ("callback" variable nil (reparse-symbol function_parameters) [3047 3055]))                          )
                        (reparse-symbol indented_block_body) [2994 3136])
                    ("_callback_libvirt_event" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7552 7555])
                            ("conn" variable nil (reparse-symbol function_parameters) [7557 7561])
                            ("dom" variable nil (reparse-symbol function_parameters) [7563 7566])
                            ("args" variable nil (reparse-symbol function_parameters) [7568 7573]))                          )
                        (reparse-symbol indented_block_body) [7507 7661])
                    ("_libvirt_password" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil)
                            ("Memoized" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7666 7856])
                    ("_open_connection" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("uri" variable nil (reparse-symbol function_parameters) [7900 7903])
                            ("username" variable nil (reparse-symbol function_parameters) [7910 7918])
                            ("passwd" variable nil (reparse-symbol function_parameters) [7925 7931]))                          
                        :documentation "
        by calling this method you are getting a new and unwrapped connection
        if you want to use wrapped and cached connection use the get() method
        ")
                        (reparse-symbol indented_block_body) [7861 8696])
                    ("_reconnect_spec_conn" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8743 8746])
                            ("conn_id" variable nil (reparse-symbol function_parameters) [8748 8755]))                          )
                        (reparse-symbol indented_block_body) [8701 9164])
                    ("close_connections" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9208 9211]))                          )
                        (reparse-symbol indented_block_body) [9169 9366])
                    ("_cb_libvirt_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9393 9397])
                            ("args" variable nil (reparse-symbol function_parameters) [9399 9404])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9406 9414]))                          
                        :documentation "
        libvirt事件回调，由外部设置
        ")
                        (reparse-symbol indented_block_body) [9371 9467]))                  
                :type "class")
                nil [2805 9467])
            ("_EVENT_LOOP" variable nil nil [9469 9495])
            ("atexit" code nil nil [9496 9540])
            ("atexit" code nil nil [9541 9592])
            ("_EVENT_LOOP" code nil nil [9593 9623]))          
      :file "libvirt_assistant.py"
      :pointmax 9624
      :fsize 9821
      :lastmodtime '(23952 6561 921096 505000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
libvirt适配包
\"\"\"" code nil nil [1 19])
            ("__future__" include nil nil [21 59])
            ("__future__" include nil nil [60 91])
            ("rccpxuanyuan.virt.libvirt.interface" include nil nil [93 148]))          
      :file "__init__.py"
      :pointmax 149
      :fsize 154
      :lastmodtime '(23940 27965 180943 694000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
libvirt适配层接口
\"\"\"" code nil nil [1 21])
            ("threading" include nil nil [23 39])
            ("libvirt" include nil nil [41 55])
            ("rccpxuanyuan.common" include nil nil [57 92])
            ("rccpxuanyuan.common.exception" include nil nil [93 154])
            ("rccpxuanyuan.common.exception" include nil nil [155 225])
            ("rccpxuanyuan.common.exception" include nil nil [226 278])
            ("rccpxuanyuan.common.exception" include nil nil [279 346])
            ("rccpxuanyuan.config" include nil nil [347 385])
            ("rccpxuanyuan.virt.libvirt.libvirt_assistant" include nil nil [386 458])
            ("rccpxuanyuan.virt.libvirt" include nil nil [459 526])
            ("rccpxuanyuan.task" include nil nil [527 569])
            ("_EVENT_TYPE_SHUTDOWN" variable nil nil [572 605])
            ("_EVENT_TYPE_REBOOT" variable nil nil [606 635])
            ("_EVENT_TYPE_DESTROYED" variable nil nil [636 669])
            ("_EVENT_TYPE_RUNNING" variable nil nil [670 701])
            ("Libvirt" type
               (:documentation "
    Xuanyuan模块封装libvirt底层接口类，完成Xuanyuan操作libvirt虚拟机相关业务。
    职责：
        1. 封装libvirt接口
        2. 定制libvirt相关业务
    "
                :members 
                  ( ("_event" variable nil (reparse-symbol indented_block_body) [854 865])
                    ("_event_lock" variable nil (reparse-symbol indented_block_body) [871 901])
                    ("shutdown_timeout" variable nil (reparse-symbol indented_block_body) [907 983])
                    ("destroy_timeout" variable nil (reparse-symbol indented_block_body) [989 1063])
                    ("reboot_timeout" variable nil (reparse-symbol indented_block_body) [1069 1142])
                    ("running_timeout" variable nil (reparse-symbol indented_block_body) [1148 1222])
                    ("_set_event" function
                       (:documentation "
        定义：libvirt接口等待事件触发接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1260 1263])
                            ("event_id" variable nil (reparse-symbol function_parameters) [1265 1273])
                            ("event_type" variable nil (reparse-symbol function_parameters) [1275 1285]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1228 1577])
                    ("_wait_event" function
                       (:documentation "
        定义：libvirt接口事件等待接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1615 1618])
                            ("event_id" variable nil (reparse-symbol function_parameters) [1620 1628])
                            ("event_type" variable nil (reparse-symbol function_parameters) [1630 1640])
                            ("timeout" variable nil (reparse-symbol function_parameters) [1642 1649]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1582 2444])
                    ("" code nil (reparse-symbol indented_block_body) [2503 2524])
                    ("cb_on_libvirt_event" function
                       (:documentation "
        定义：libvirt服务事件通知回调
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2553 2556])
                            ("conn" variable nil (reparse-symbol function_parameters) [2558 2562])
                            ("dom" variable nil (reparse-symbol function_parameters) [2564 2567])
                            ("args" variable nil (reparse-symbol function_parameters) [2569 2574]))                          )
                        (reparse-symbol indented_block_body) [2529 3537])
                    ("" code nil (reparse-symbol indented_block_body) [3590 3633])
                    ("_get_connection" function
                       (:documentation "
        get LibvirtAssistant connection.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3658 3661]))                          )
                        (reparse-symbol indented_block_body) [3638 3779])
                    ("" code nil (reparse-symbol indented_block_body) [3832 3868])
                    ("_get_domain" function
                       (:documentation "
        get virtual machine domain with special uuid.
        params uuid: virtual machine unique identifier.
        type: string.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3889 3892])
                            ("uuid" variable nil (reparse-symbol function_parameters) [3894 3898]))                          )
                        (reparse-symbol indented_block_body) [3873 4140])
                    ("_get_libvirt_state" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4185 4188])
                            ("libvirt_state" variable nil (reparse-symbol function_parameters) [4190 4203]))                          )
                        (reparse-symbol indented_block_body) [4145 4469])
                    ("" code nil (reparse-symbol indented_block_body) [4522 4609])
                    ("get_vm_xml" function
                       (:documentation "
        get virtual machine xml from special virtual domain with uuid.
        using default vir connection get vir domain.
        params uuid: virtual machine unique identifier.
        type: string.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4629 4632])
                            ("uuid" variable nil (reparse-symbol function_parameters) [4634 4638]))                          )
                        (reparse-symbol indented_block_body) [4614 4933])
                    ("" code nil (reparse-symbol indented_block_body) [4986 5074])
                    ("update_device" function
                       (:documentation "
        update device xml to special virtual domain with uuid.
        params uuid: virtual machine unique identifier.
        type: string.
        params dev_xml: virtual device xml describe string.
        type: string.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5097 5100])
                            ("uuid" variable nil (reparse-symbol function_parameters) [5102 5106])
                            ("dev_xml" variable nil (reparse-symbol function_parameters) [5108 5115]))                          )
                        (reparse-symbol indented_block_body) [5079 5441])
                    ("" code nil (reparse-symbol indented_block_body) [5494 5582])
                    ("list_vm_state" function
                       (:documentation "
        list all virtual machine state.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5605 5608]))                          )
                        (reparse-symbol indented_block_body) [5587 6009])
                    ("" code nil (reparse-symbol indented_block_body) [6062 6150])
                    ("create_vm" function
                       (:documentation "
        create and start virtual machine with vm xml describe string.
        params vm_xml: virtual machine xml describe string.
        type: string.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6169 6172])
                            ("vm_xml" variable nil (reparse-symbol function_parameters) [6174 6180]))                          )
                        (reparse-symbol indented_block_body) [6155 6570])
                    ("" code nil (reparse-symbol indented_block_body) [6623 6711])
                    ("shutdown_vm" function
                       (:documentation "
        shutdown virtual machine with special uuid.
        params uuid: virtual machine unique identifier.
        type: string.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6732 6735])
                            ("uuid" variable nil (reparse-symbol function_parameters) [6737 6741]))                          )
                        (reparse-symbol indented_block_body) [6716 7032])
                    ("" code nil (reparse-symbol indented_block_body) [7085 7173])
                    ("destroy_vm" function
                       (:documentation "
        destroy virtual machine with special uuid.
        params uuid: virtual machine unique identifier.
        type: string.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7193 7196])
                            ("uuid" variable nil (reparse-symbol function_parameters) [7198 7202]))                          )
                        (reparse-symbol indented_block_body) [7178 7491])
                    ("" code nil (reparse-symbol indented_block_body) [7544 7632])
                    ("reboot_vm" function
                       (:documentation "
        reboot virtual machine with special uuid.
        params uuid: virtual machine unique identifier.
        type: string.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7651 7654])
                            ("uuid" variable nil (reparse-symbol function_parameters) [7656 7660]))                          )
                        (reparse-symbol indented_block_body) [7637 7943]))                  
                :type "class")
                nil [704 7943])
            ("LibvirtAssistant" code nil nil [7945 8017]))          
      :file "interface.py"
      :pointmax 8018
      :fsize 8167
      :lastmodtime '(23940 27965 180943 694000)
      :unmatched-syntax '((INDENT_BLOCK 1499 . 1577) (NEWLINE 1498 . 1499) (COLON 1497 . 1498) (TRY 1384 . 1387) (AS 1489 . 1491)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
libvirt适配层外部感知常量和操作方法
\"\"\"" code nil nil [1 30])
            ("libvirt" include nil nil [32 46])
            ("VIR_DOMAIN_NOSTATE" variable nil nil [49 90])
            ("VIR_DOMAIN_RUNNING" variable nil nil [91 132])
            ("VIR_DOMAIN_BLOCKED" variable nil nil [133 174])
            ("VIR_DOMAIN_SHUTDOWN" variable nil nil [175 218])
            ("VIR_DOMAIN_SHUTOFF" variable nil nil [219 260])
            ("VIR_DOMAIN_CRASHED" variable nil nil [261 302])
            ("VIR_DOMAIN_PMSUSPENDED" variable nil nil [303 352])
            ("VIR_DOMAIN_PAUSED" variable nil nil [353 392])
            ("VIR_DOMAIN_SUSPENDED" variable nil nil [393 438])
            ("_LIBVIRT_STATE" variable nil nil [440 459])
            ("_LIBVIRT_STATE" variable nil nil [460 523])
            ("_LIBVIRT_STATE" variable nil nil [524 587])
            ("_LIBVIRT_STATE" variable nil nil [588 651])
            ("_LIBVIRT_STATE" variable nil nil [652 717])
            ("_LIBVIRT_STATE" variable nil nil [718 781])
            ("_LIBVIRT_STATE" variable nil nil [782 845])
            ("_LIBVIRT_STATE" variable nil nil [846 917])
            ("_LIBVIRT_STATE" variable nil nil [918 979])
            ("_LIBVIRT_STATE" variable nil nil [1074 1181]))          
      :file "constants.py"
      :pointmax 1183
      :fsize 1225
      :lastmodtime '(23940 27965 180943 694000)
      :unmatched-syntax nil))
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuan!rccpxuanyuan!virt!libvirt!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
