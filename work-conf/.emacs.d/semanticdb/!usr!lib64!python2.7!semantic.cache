;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("try" code nil nil [269 343])
            ("try" code nil nil [344 418])
            ("__all__" variable nil nil [419 727])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [764 768]))                  
                :type "class")
                nil [729 769])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [770 947])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [948 1037])
            ("try" code nil nil [1038 1102])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1119 1123])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1125 1129])
                    ("length" variable nil (reparse-symbol function_parameters) [1131 1137]))                  )
                nil [1103 1327])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1342 1345])
                ("dst" variable nil (reparse-symbol function_parameters) [1347 1350]))              ) nil [1328 1680])
            ("copyfile" function
               (:documentation "Copy data from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [1694 1697])
                    ("dst" variable nil (reparse-symbol function_parameters) [1699 1702]))                  )
                nil [1681 2298])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2312 2315])
                    ("dst" variable nil (reparse-symbol function_parameters) [2317 2320]))                  )
                nil [2299 2487])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2501 2504])
                    ("dst" variable nil (reparse-symbol function_parameters) [2506 2509]))                  )
                nil [2488 3117])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3127 3130])
                    ("dst" variable nil (reparse-symbol function_parameters) [3132 3135]))                  )
                nil [3118 3363])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3374 3377])
                    ("dst" variable nil (reparse-symbol function_parameters) [3379 3382]))                  )
                nil [3364 3617])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [3638 3647]))                  )
                nil [3618 4030])
            ("copytree" function
               (:documentation "Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [4044 4047])
                    ("dst" variable nil (reparse-symbol function_parameters) [4049 4052])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [4054 4062])
                    ("ignore" variable nil (reparse-symbol function_parameters) [4070 4076]))                  )
                nil [4031 6370])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6382 6386])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [6388 6401])
                    ("onerror" variable nil (reparse-symbol function_parameters) [6409 6416]))                  )
                nil [6371 7994])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [8010 8014]))              ) nil [7996 8228])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed.
    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8238 8241])
                    ("dst" variable nil (reparse-symbol function_parameters) [8243 8246]))                  )
                nil [8229 9685])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [9701 9704])
                ("dst" variable nil (reparse-symbol function_parameters) [9706 9709]))              ) nil [9686 9919])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9933 9937]))                  )
                nil [9920 10198])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10212 10216]))                  )
                nil [10199 10477])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [10496 10505])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [10507 10515])
                    ("compress" variable nil (reparse-symbol function_parameters) [10517 10525])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10534 10541])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [10545 10552])
                    ("owner" variable nil (reparse-symbol function_parameters) [10574 10579])
                    ("group" variable nil (reparse-symbol function_parameters) [10586 10591])
                    ("logger" variable nil (reparse-symbol function_parameters) [10598 10604]))                  )
                nil [10478 12480])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [12504 12512])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [12514 12526])
                ("verbose" variable nil (reparse-symbol function_parameters) [12528 12535])
                ("dry_run" variable nil (reparse-symbol function_parameters) [12543 12550]))              ) nil [12481 13210])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [13229 13238])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [13240 13248])
                    ("verbose" variable nil (reparse-symbol function_parameters) [13250 13257])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [13261 13268])
                    ("logger" variable nil (reparse-symbol function_parameters) [13272 13278]))                  )
                nil [13211 15384])
            ("_ARCHIVE_FORMATS" variable nil nil [15385 15682])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [15684 16003])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [16032 16036])
                    ("function" variable nil (reparse-symbol function_parameters) [16038 16046])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [16048 16058])
                    ("description" variable nil (reparse-symbol function_parameters) [16065 16076]))                  )
                nil [16004 16995])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [17026 17030]))              ) nil [16996 17064])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"
    or \"gztar\".

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [17082 17091])
                    ("format" variable nil (reparse-symbol function_parameters) [17093 17099])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [17101 17109])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [17116 17124])
                    ("verbose" variable nil (reparse-symbol function_parameters) [17131 17138])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [17159 17166])
                    ("owner" variable nil (reparse-symbol function_parameters) [17170 17175])
                    ("group" variable nil (reparse-symbol function_parameters) [17182 17187])
                    ("logger" variable nil (reparse-symbol function_parameters) [17194 17200]))                  )
                nil [17065 18902]))          
      :file "shutil.py"
      :pointmax 18902
      :fsize 18901
      :lastmodtime '(23724 44200 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "os.py"
      :fsize 25769
      :lastmodtime '(23724 44200 0 0))
    (semanticdb-table "semanticdb-table"
      :file "stat.py"
      :fsize 1842
      :lastmodtime '(23724 44200 0 0))
    (semanticdb-table "semanticdb-table"
      :file "fnmatch.py"
      :fsize 3239
      :lastmodtime '(23724 44200 0 0))
    (semanticdb-table "semanticdb-table"
      :file "collections.py"
      :fsize 25883
      :lastmodtime '(23724 44200 0 0)))
  :file "!usr!lib64!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
