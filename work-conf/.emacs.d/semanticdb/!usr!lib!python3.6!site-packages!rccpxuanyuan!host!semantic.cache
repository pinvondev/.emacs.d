;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
host组件
职责：
    1. 实现服务管理功能和接口
    2. 管理服务器级别资源
\"\"\"" code nil nil [820 874])
            ("__future__" include nil nil [876 914])
            ("__future__" include nil nil [915 946])
            ("logging" include nil nil [948 962])
            ("time" include nil nil [963 974])
            ("uuid" include nil nil [975 986])
            ("rccpxuanyuan.config" include nil nil [1109 1161])
            ("rccpxuanyuan.common" include nil nil [1243 1282])
            ("rccpxuanyuan.common" include nil nil [1283 1324])
            ("rccpxuanyuan.common" include nil nil [1325 1366])
            ("rccpxuanyuan.common" include nil nil [1423 1463])
            ("rccpxuanyuan.common.cache" include nil nil [1464 1510])
            ("rccpxuanyuan.common" include nil nil [1511 1552])
            ("rccpxuanyuan.common" include nil nil [1553 1594])
            ("rccpxuanyuan.ntp.ntp" include nil nil [1595 1644])
            ("host_device" include nil nil [1674 1692])
            ("HostInterface" include nil nil [1709 1729])
            ("P_HOST_CONFIG" code nil nil [1732 1793])
            ("F_HOSTNAME" variable nil nil [1794 1822])
            ("Host" type
               (:documentation "
    服务器模型
    职责：
        1. 继承服务器模型接口
        2. 实现服务器模型功能
        3. 组合服务器子模型资源
    "
                :superclasses ("HostInterface")
                :members 
                  ( ("static_config" variable nil (reparse-symbol indented_block_body) [5421 5472])
                    ("_get_hostname" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5513 5516]))                          )
                        (reparse-symbol indented_block_body) [5478 5680])
                    ("uuid" function
                       (:documentation "
        查询主机标识:
        1. 优先使用主机名作为uuid
        2. 当主机名为非法uuid，则通过bios uuid和时间戳生成uuid
        3. 当以上都无法获取合法uuid抛异常
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5725 5728]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("Memoized" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5685 7607])
                    ("get_host_info" function
                       (:documentation "
        查询服务器主板信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7647 7650]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7612 7772])
                    ("get_mainboard_info" function
                       (:documentation "
        查询服务器主板信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7831 7834]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("Memoized" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7777 7932])
                    ("get_cpu_info" function
                       (:documentation "
        查询服务器CPU信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7985 7988]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("Memoized" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7937 8239])
                    ("get_mem_info" function
                       (:documentation "
        查询服务器Mem信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8292 8295]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("Memoized" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8244 8548])
                    ("get_disk_info" function
                       (:documentation "
        查询服务器Disk信息外部接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8614 8617]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("callutils.time_stamp" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8553 8712])
                    ("shutdown" function
                       (:documentation "
        关闭服务器接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8747 8750]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8717 8831])
                    ("reboot" function
                       (:documentation "
        重启服务器接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8864 8867]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8836 8970])
                    ("set_ntp" function
                       (:documentation "
        设置 NTP
        param servers: NTP 同步源
        type servers: list
        param threshold: NTP 误差阈值
        type threshold: float
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9652 9655])
                            ("servers" variable nil (reparse-symbol function_parameters) [9657 9664])
                            ("threshold" variable nil (reparse-symbol function_parameters) [9666 9675]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9623 9936])
                    ("get_ntp_info" function
                       (:documentation "
        获取 NTP 信息, 包括同步源和阈值
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9975 9978]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9941 10172])
                    ("open_ntp" function
                       (:documentation "
        开启 NTP 服务
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10207 10210]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10177 10292])
                    ("close_ntp" function
                       (:documentation "
        关闭 NTP 服务
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10328 10331]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10297 10414]))                  
                :type "class")
                nil [5291 10414]))          
      :file "api.py"
      :pointmax 10415
      :fsize 10886
      :lastmodtime '(23838 44485 64000 0)
      :unmatched-syntax '((INDENT_BLOCK 7394 . 7581) (NEWLINE 7393 . 7394) (COLON 7392 . 7393) (TRY 6078 . 6081) (AS 7386 . 7388) (FROM 1693 . 1697) (PERIOD 1698 . 1699) (FROM 1667 . 1671) (PERIOD 1672 . 1673)))
    (semanticdb-table "semanticdb-table"
      :file "host_device.py"
      :fsize 13814
      :lastmodtime '(23838 44485 65000 0))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
host module
\"\"\"" code nil nil [1 20])
            ("__future__" include nil nil [22 60])
            ("__future__" include nil nil [61 92]))          
      :file "__init__.py"
      :pointmax 93
      :fsize 92
      :lastmodtime '(23838 44485 63000 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python3.6!site-packages!rccpxuanyuan!host!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
