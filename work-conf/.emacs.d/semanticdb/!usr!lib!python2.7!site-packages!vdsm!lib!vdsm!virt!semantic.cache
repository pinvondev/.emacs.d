;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-automake-mode
      :tags 
        '( ("$(top_srcdir)/build-aux/Makefile.subs" include nil nil [819 865])
            ("SUBDIRS" variable (:default-value ("jobs" "libvirthook" "vmdevices")) nil [866 903])
            ("vdsmvirtdir" variable (:default-value ("$(vdsmpylibdir)/virt")) nil [904 939])
            ("dist_vdsmvirt_PYTHON" variable (:default-value ("__init__.py" "backup.py" "displaynetwork.py" "domain_descriptor.py" "domxml_preprocess.py" "drivemonitor.py" "events.py" "guestagent.py" "libvirtnetwork.py" "libvirtxml.py" "metadata.py" "migration.py" "periodic.py" "qemuguestagent.py" "guestagenthelpers.py" "recovery.py" "sampling.py" "saslpasswd2.py" "secret.py" "utils.py" "virdomain.py" "vm.py" "vmchannels.py" "vmexitreason.py" "vmpowerdown.py" "vmstats.py" "vmstatus.py" "vmtune.py" "vmxml.py" "xmlconstants.py" "$(NULL)")) nil [939 1473]))          
      :file "Makefile.am"
      :pointmax 1473
      :fsize 1472
      :lastmodtime '(23967 64130 412743 654000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("__future__" include nil nil [860 891])
            ("\"\"\"
Code to perform periodic maintenance and bookkeeping of the VMs.
\"\"\"" code nil nil [893 965])
            ("logging" include nil nil [967 981])
            ("threading" include nil nil [982 998])
            ("libvirt" include nil nil [1000 1014])
            ("six" include nil nil [1015 1025])
            ("vdsm" include nil nil [1027 1052])
            ("vdsm" include nil nil [1053 1074])
            ("vdsm" include nil nil [1075 1104])
            ("vdsm.common" include nil nil [1105 1135])
            ("vdsm.common" include nil nil [1136 1169])
            ("vdsm.common" include nil nil [1170 1211])
            ("vdsm.config" include nil nil [1212 1242])
            ("vdsm.virt" include nil nil [1243 1274])
            ("vdsm.virt" include nil nil [1275 1305])
            ("vdsm.virt" include nil nil [1306 1336])
            ("vdsm.virt" include nil nil [1337 1368])
            ("vdsm.virt" include nil nil [1369 1399])
            ("_WORKERS" variable nil nil [1544 1600])
            ("_TASK_PER_WORKER" variable nil nil [1601 1673])
            ("_TASKS" code nil nil [1674 1710])
            ("_MAX_WORKERS" variable nil nil [1711 1766])
            ("_THROTTLING_INTERVAL" variable nil nil [1767 1792])
            ("_operations" variable nil nil [1805 1821])
            ("_executor" variable nil nil [1822 1838])
            ("Error" type
               (:superclasses ("errors.Base")
                :members 
                  ( ("msg" variable nil (reparse-symbol indented_block_body) [1871 1920]))                  
                :type "class")
                nil [1841 1921])
            ("InvalidValue" type
               (:superclasses ("Error")
                :members 
                  ( ("msg" variable nil (reparse-symbol indented_block_body) [1954 2026])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2081 2103])
                            ("self" variable nil (reparse-symbol indented_block_body) [2112 2126])
                            ("self" variable nil (reparse-symbol indented_block_body) [2135 2153]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2045 2049])
                            ("op_desc" variable nil (reparse-symbol function_parameters) [2051 2058])
                            ("key" variable nil (reparse-symbol function_parameters) [2060 2063])
                            ("value" variable nil (reparse-symbol function_parameters) [2065 2070]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2032 2154]))                  
                :type "class")
                nil [1923 2154])
            ("_timeout_from" function
               (:documentation "
    Estimate a sensible timeout given a periodic interval.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [2174 2182]))                  )
                nil [2156 2285])
            ("start" function
               (:documentation "
    Starts all the periodic Operations, to be run in one executor.Executor
    instance owned by the `periodic` module.
    There is no guarantee on the order on which the operations will be
    started; this function only guarantees that it will attempt to
    start every known Operation.
    "
                :arguments 
                  ( ("cif" variable nil (reparse-symbol function_parameters) [2297 2300])
                    ("scheduler" variable nil (reparse-symbol function_parameters) [2302 2311]))                  )
                nil [2287 3235])
            ("stop" function nil nil [3237 3326])
            ("Operation" type
               (:documentation "
    Operation runs a callable with a given period until
    someone stops it.
    Operation builds on Schedule and on Executor,
    so that the underlying \"func\" is called periodically.
    It would be called again even if a former call is blocked.
    "
                :superclasses ("object")
                :members 
                  ( ("_log" variable nil (reparse-symbol indented_block_body) [3623 3674])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        parameters:

        func: callable, without arguments (task interface).
        period: `func' will be invoked every `period' seconds.
                Please note that timing may not be exact due to
                (OS) scheduling constraings.
        timeout: same meaning of Executor.dispatch
        scheduler: Scheduler instance to use
        executor: Executor instance to use
        exclusive: boolean flag to control the exclusiveness of the operation.
                   Exclusive operations are scheduled again when and only when
                   completed (conservative approach). Non-exclusive operations
                   are scheduled again just after being dispatched to the
                   executor (optimistic approach).
                   The operations are non-exclusive by default.
        discard: boolean flag to pass to the underlying executor.
                 See the documentation of the 'Executor.dispatch' method.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3807 4780])
                            ("self" variable nil (reparse-symbol indented_block_body) [4789 4806])
                            ("self" variable nil (reparse-symbol indented_block_body) [4815 4836])
                            ("timeout" code nil (reparse-symbol indented_block_body) [4904 4911])
                            ("self" variable nil (reparse-symbol indented_block_body) [4920 4947])
                            ("executor" code nil (reparse-symbol indented_block_body) [5008 5016])
                            ("self" variable nil (reparse-symbol indented_block_body) [5025 5052])
                            ("self" variable nil (reparse-symbol indented_block_body) [5061 5084])
                            ("self" variable nil (reparse-symbol indented_block_body) [5093 5122])
                            ("self" variable nil (reparse-symbol indented_block_body) [5131 5152])
                            ("self" variable nil (reparse-symbol indented_block_body) [5161 5178])
                            ("self" variable nil (reparse-symbol indented_block_body) [5187 5215]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3693 3697])
                            ("func" variable nil (reparse-symbol function_parameters) [3699 3703])
                            ("period" variable nil (reparse-symbol function_parameters) [3705 3711])
                            ("scheduler" variable nil (reparse-symbol function_parameters) [3713 3722])
                            ("timeout" variable nil (reparse-symbol function_parameters) [3724 3731])
                            ("executor" variable nil (reparse-symbol function_parameters) [3735 3743])
                            ("exclusive" variable nil (reparse-symbol function_parameters) [3767 3776])
                            ("discard" variable nil (reparse-symbol function_parameters) [3784 3791]))                          
                        :documentation "
        parameters:

        func: callable, without arguments (task interface).
        period: `func' will be invoked every `period' seconds.
                Please note that timing may not be exact due to
                (OS) scheduling constraings.
        timeout: same meaning of Executor.dispatch
        scheduler: Scheduler instance to use
        executor: Executor instance to use
        exclusive: boolean flag to control the exclusiveness of the operation.
                   Exclusive operations are scheduled again when and only when
                   completed (conservative approach). Non-exclusive operations
                   are scheduled again just after being dispatched to the
                   executor (optimistic approach).
                   The operations are non-exclusive by default.
        discard: boolean flag to pass to the underlying executor.
                 See the documentation of the 'Executor.dispatch' method.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3680 5216])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5231 5235]))                          )
                        (reparse-symbol indented_block_body) [5221 5766])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5780 5784]))                          )
                        (reparse-symbol indented_block_body) [5771 6058])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6076 6080]))                          )
                        (reparse-symbol indented_block_body) [6063 6298])
                    ("_reschedule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6319 6323]))                          
                        :documentation "
        Schedule a next call of `func'.
        ")
                        (reparse-symbol indented_block_body) [6303 6519])
                    ("_try_to_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6545 6549]))                          
                        :documentation "
        Dispatch another Execution, if Operation is still running.
        ")
                        (reparse-symbol indented_block_body) [6524 6731])
                    ("_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6750 6754]))                          
                        :documentation "
        Send `func' to Executor to be run as soon as possible.
        ")
                        (reparse-symbol indented_block_body) [6736 7437])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7455 7459]))                          )
                        (reparse-symbol indented_block_body) [7442 7556]))                  
                :type "class")
                nil [3328 7556])
            ("VmDispatcher" type
               (:documentation "
    Adapter class. Dispatch an Operation to all VMs, to improve
    isolation among them.
    "
                :superclasses ("object")
                :members 
                  ( ("_log" variable nil (reparse-symbol indented_block_body) [7697 7751])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        get_vms: callable which will return a dict which maps
                 vm_ids to vm_instances
        executor: executor.Executor instance
        create: callable to obtain the real callable to
                dispatch, with its timeout
        timeout: per-vm operation timeout, in seconds
                 (fractions allowed).
        \"\"\"" code nil (reparse-symbol indented_block_body) [7821 8174])
                            ("self" variable nil (reparse-symbol indented_block_body) [8183 8206])
                            ("self" variable nil (reparse-symbol indented_block_body) [8215 8240])
                            ("self" variable nil (reparse-symbol indented_block_body) [8249 8270])
                            ("self" variable nil (reparse-symbol indented_block_body) [8279 8302]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7770 7774])
                            ("get_vms" variable nil (reparse-symbol function_parameters) [7776 7783])
                            ("executor" variable nil (reparse-symbol function_parameters) [7785 7793])
                            ("create" variable nil (reparse-symbol function_parameters) [7795 7801])
                            ("timeout" variable nil (reparse-symbol function_parameters) [7803 7810]))                          
                        :documentation "
        get_vms: callable which will return a dict which maps
                 vm_ids to vm_instances
        executor: executor.Executor instance
        create: callable to obtain the real callable to
                dispatch, with its timeout
        timeout: per-vm operation timeout, in seconds
                 (fractions allowed).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7757 8303])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8321 8325]))                          )
                        (reparse-symbol indented_block_body) [8308 9638])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9656 9660]))                          )
                        (reparse-symbol indented_block_body) [9643 9765]))                  
                :type "class")
                nil [7558 9765])
            ("_RunnableOnVm" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9832 9845]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9813 9817])
                            ("vm" variable nil (reparse-symbol function_parameters) [9819 9821]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9800 9846])
                    ("required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9878 9882]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9851 10048])
                    ("runnable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10080 10084]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10053 10138])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10156 10160]))                          )
                        (reparse-symbol indented_block_body) [10143 11141])
                    ("_execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11159 11163]))                          )
                        (reparse-symbol indented_block_body) [11146 11200])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11218 11222]))                          )
                        (reparse-symbol indented_block_body) [11205 11334]))                  
                :type "class")
                nil [9767 11334])
            ("UpdateVolumes" type
               (:superclasses ("_RunnableOnVm")
                :members 
                  ( ("required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11404 11408]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11377 11586])
                    ("_execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11604 11608]))                          )
                        (reparse-symbol indented_block_body) [11591 11869]))                  
                :type "class")
                nil [11336 11869])
            ("BlockjobMonitor" type
               (:superclasses ("_RunnableOnVm")
                :members 
                  ( ("required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11941 11945]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11914 12307])
                    ("_execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12325 12329]))                          )
                        (reparse-symbol indented_block_body) [12312 12364]))                  
                :type "class")
                nil [11871 12364])
            ("DriveWatermarkMonitor" type
               (:superclasses ("_RunnableOnVm")
                :members 
                  ( ("required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12442 12446]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12415 12573])
                    ("_execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12591 12595]))                          )
                        (reparse-symbol indented_block_body) [12578 12632]))                  
                :type "class")
                nil [12366 12632])
            ("_kill_long_paused_vms" function (:arguments 
              ( ("cif" variable nil (reparse-symbol function_parameters) [12660 12663]))              ) nil [12634 12927])
            ("_create" function (:arguments 
              ( ("cif" variable nil (reparse-symbol function_parameters) [12941 12944])
                ("scheduler" variable nil (reparse-symbol function_parameters) [12946 12955]))              ) nil [12929 15194]))          
      :file "periodic.py"
      :pointmax 15194
      :fsize 15193
      :lastmodtime '(23967 64130 418743 798000)
      :unmatched-syntax '((INDENT_BLOCK 10650 . 11141) (NEWLINE 10649 . 10650) (COLON 10648 . 10649) (TRY 10214 . 10217) (AS 10644 . 10646) (INDENT_BLOCK 7256 . 7345) (NEWLINE 7255 . 7256) (COLON 7254 . 7255) (FINALLY 7247 . 7254) (INDENT_BLOCK 6231 . 6298) (NEWLINE 6230 . 6231) (COLON 6229 . 6230) (FINALLY 6222 . 6229) (NAME 4956 . 4960) (IF 4983 . 4985) (ELSE 5003 . 5007) (NAME 4845 . 4849) (IF 4883 . 4885) (ELSE 4899 . 4903) (INDENT_BLOCK 3175 . 3235) (NEWLINE 3174 . 3175) (COLON 3173 . 3174) (TRY 3120 . 3123) (AS 3169 . 3171)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("__future__" include nil nil [860 891])
            ("libvirt" include nil nil [893 907])
            ("six" include nil nil [908 918])
            ("six.moves" include nil nil [919 944])
            ("\"\"\"
Support for VM and host statistics sampling.
\"\"\"" code nil nil [946 998])
            ("collections" include nil nil [1000 1054])
            ("logging" include nil nil [1055 1069])
            ("os" include nil nil [1070 1079])
            ("re" include nil nil [1080 1089])
            ("threading" include nil nil [1090 1106])
            ("time" include nil nil [1107 1118])
            ("vdsm" include nil nil [1120 1146])
            ("vdsm" include nil nil [1147 1168])
            ("vdsm" include nil nil [1169 1191])
            ("vdsm.common.time" include nil nil [1192 1215])
            ("vdsm.config" include nil nil [1216 1246])
            ("vdsm.constants" include nil nil [1247 1284])
            ("vdsm.host" include nil nil [1285 1321])
            ("vdsm.virt.utils" include nil nil [1322 1363])
            ("_THP_STATE_PATH" variable nil nil [1366 1429])
            ("if" code nil nil [1430 1545])
            ("_METRICS_ENABLED" variable nil nil [1545 1603])
            ("TotalCpuSample" type
               (:documentation "
    A sample of total CPU consumption.

    The sample is taken at initialization time and can't be updated.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("with" code nil (reparse-symbol indented_block_body) [1793 1932])
                            ("self" variable nil (reparse-symbol indented_block_body) [1940 1961]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1778 1782]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1765 1962]))                  
                :type "class")
                nil [1606 1962])
            ("CpuCoreSample" type
               (:documentation "
    A sample of the CPU consumption of each core

    The sample is taken at initialization time and can't be updated.
    "
                :superclasses ("object")
                :members 
                  ( ("CPU_CORE_STATS_PATTERN" variable nil (reparse-symbol indented_block_body) [2132 2187])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2221 2242])
                            ("with" code nil (reparse-symbol indented_block_body) [2251 2806]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2206 2210]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2193 2806])
                    ("getCoreSample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2829 2833])
                            ("coreId" variable nil (reparse-symbol function_parameters) [2835 2841]))                          )
                        (reparse-symbol indented_block_body) [2811 2923]))                  
                :type "class")
                nil [1964 2923])
            ("NumaNodeMemorySample" type
               (:documentation "
    A sample of the memory stats of each numa node

    The sample is taken at initialization time and can't be updated.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3130 3154])
                            ("numaTopology" variable nil (reparse-symbol indented_block_body) [3163 3193])
                            ("for" code nil (reparse-symbol indented_block_body) [3202 3940]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3115 3119]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3102 3940]))                  
                :type "class")
                nil [2925 3940])
            ("PidCpuSample" type
               (:documentation "
    A sample of the CPU consumption of a process.

    The sample is taken at initialization time and can't be updated.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("with" code nil (reparse-symbol indented_block_body) [4143 4274]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4123 4127])
                            ("pid" variable nil (reparse-symbol function_parameters) [4129 4132]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4110 4274]))                  
                :type "class")
                nil [3942 4274])
            ("HostSample" type
               (:documentation "
    A sample of host-related statistics.

    Contains the state of the host at the time of initialization.
    "
                :superclasses ("object")
                :members 
                  ( ("MONITORED_PATHS" variable nil (reparse-symbol indented_block_body) [4430 4480])
                    ("_getDiskStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4504 4508]))                          )
                        (reparse-symbol indented_block_body) [4486 4802])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize a HostSample.

        :param pid: The PID of this vdsm host.
        :type pid: int
        \"\"\"" code nil (reparse-symbol indented_block_body) [4840 4959])
                            ("self" variable nil (reparse-symbol indented_block_body) [4968 4996])
                            ("self" variable nil (reparse-symbol indented_block_body) [5005 5036])
                            ("self" variable nil (reparse-symbol indented_block_body) [5045 5091])
                            ("self" variable nil (reparse-symbol indented_block_body) [5100 5130])
                            ("meminfo" variable nil (reparse-symbol indented_block_body) [5139 5168])
                            ("freeOrCached" variable nil (reparse-symbol indented_block_body) [5177 5277])
                            ("self" code nil (reparse-symbol indented_block_body) [5286 5356])
                            ("self" code nil (reparse-symbol indented_block_body) [5365 5425])
                            ("try" code nil (reparse-symbol indented_block_body) [5434 5596])
                            ("self" variable nil (reparse-symbol indented_block_body) [5604 5641])
                            ("try" code nil (reparse-symbol indented_block_body) [5650 5846])
                            ("self" variable nil (reparse-symbol indented_block_body) [5854 5888])
                            ("self" variable nil (reparse-symbol indented_block_body) [5897 5928])
                            ("self" variable nil (reparse-symbol indented_block_body) [5937 5978]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4820 4824])
                            ("pid" variable nil (reparse-symbol function_parameters) [4826 4829]))                          
                        :documentation "
        Initialize a HostSample.

        :param pid: The PID of this vdsm host.
        :type pid: int
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4807 5979]))                  
                :type "class")
                nil [4276 5979])
            ("_MINIMUM_SAMPLES" variable nil nil [5981 6001])
            ("SampleWindow" type
               (:documentation "Keep sliding window of samples."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6131 6276])
                            ("self" variable nil (reparse-symbol indented_block_body) [6285 6319])
                            ("self" variable nil (reparse-symbol indented_block_body) [6328 6349]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6092 6096])
                            ("size" variable nil (reparse-symbol function_parameters) [6098 6102])
                            ("timefn" variable nil (reparse-symbol function_parameters) [6104 6110]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6079 6350])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6366 6370])
                            ("value" variable nil (reparse-symbol function_parameters) [6372 6377]))                          
                        :documentation "
        Record the current time and append new sample, removing the oldest
        sample if needed.
        ")
                        (reparse-symbol indented_block_body) [6355 6589])
                    ("stats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6604 6608]))                          
                        :documentation "
        Return a tuple in the format: (first, last, difftime), containing
        the first and the last samples in the defined 'window' and the
        time difference between them.
        ")
                        (reparse-symbol indented_block_body) [6594 7115])
                    ("last" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7129 7133])
                            ("nth" variable nil (reparse-symbol function_parameters) [7135 7138]))                          
                        :documentation "
        Return the nth-last collected sample, and its timestamp.
        Return (None, None) if the nth-last collected sample doesn't exist.
        ")
                        (reparse-symbol indented_block_body) [7120 7410]))                  
                :type "class")
                nil [6004 7410])
            ("_StatsSample" variable nil nil [7412 7561])
            ("StatsSample" type
               (:superclasses ("_StatsSample")
                :members 
                  ( ("is_empty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7614 7618]))                          )
                        (reparse-symbol indented_block_body) [7601 7763]))                  
                :type "class")
                nil [7564 7763])
            ("StatsCache" type
               (:documentation "
    Cache for bulk stats samples.
    Provide facilities to retrieve per-vm samples, and the glue code to deal
    with disappearing per-vm samples.

    Rationale for the 'clock()' method and for the odd API of the 'put()'
    method with explicit 'monotonic_ts' argument:

    QEMU processes can go rogue and block on a sampling operation, most
    likely, but not only, because storage becomes unavailable.
    In turn, that means that libvirt API that VDSM uses can get stuck,
    but eventually those calls can unblock.

    VDSM has countermeasures for those cases. Stuck threads are replaced,
    thanks to Executor. But still, before to be destroyed, a replaced
    thread can mistakenly try to add a sample to a StatsCache.

    Because of worker thread replacement, that sample from stuck thread
    can  be stale.
    So, under the assumption that at stable state stats collection has
    a time cost negligible with respect the collection interval, we need
    to take the sample timestamp BEFORE to start the possibly-blocking call.
    If we take the timestamp after the call, we have no means to distinguish
    between a well behaving call and an unblocked stuck call.
    "
                :superclasses ("object")
                :members 
                  ( ("_log" variable nil (reparse-symbol indented_block_body) [8997 9049])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9122 9141])
                            ("self" variable nil (reparse-symbol indented_block_body) [9150 9179])
                            ("self" variable nil (reparse-symbol indented_block_body) [9188 9244])
                            ("self" variable nil (reparse-symbol indented_block_body) [9253 9279])
                            ("self" variable nil (reparse-symbol indented_block_body) [9288 9330]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9068 9072])
                            ("clock" variable nil (reparse-symbol function_parameters) [9074 9079]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9055 9331])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9344 9348])
                            ("vmid" variable nil (reparse-symbol function_parameters) [9350 9354]))                          
                        :documentation "
        Warm up the cache for the given VM.
        This is to avoid races during the first sampling and the first
        reporting, which may result in a VM wrongly reported as unresponsive.
        ")
                        (reparse-symbol indented_block_body) [9336 9657])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9673 9677])
                            ("vmid" variable nil (reparse-symbol function_parameters) [9679 9683]))                          
                        :documentation "
        Remove any data from the cache related to the given VM.
        ")
                        (reparse-symbol indented_block_body) [9662 9845])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9858 9862])
                            ("vmid" variable nil (reparse-symbol function_parameters) [9864 9868]))                          
                        :documentation "
        Return the available StatSample for the given VM.
        ")
                        (reparse-symbol indented_block_body) [9850 10552])
                    ("get_batch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10571 10575]))                          
                        :documentation "
        Return the available StatSample for the all VMs.
        ")
                        (reparse-symbol indented_block_body) [10557 11212])
                    ("clock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11227 11231]))                          
                        :documentation "
        Provide timestamp compatible with what put() expects
        ")
                        (reparse-symbol indented_block_body) [11217 11348])
                    ("put" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11361 11365])
                            ("bulk_stats" variable nil (reparse-symbol function_parameters) [11367 11377])
                            ("monotonic_ts" variable nil (reparse-symbol function_parameters) [11379 11391]))                          
                        :documentation "
        Add a new bulk sample to the collection.
        `monotonic_ts' is the sample time which must be associated with
        the sample.
        Discard silently out of order samples, which are assumed to be
        returned by unblocked stuck calls, to avoid overwrite fresh data
        with stale one.
        ")
                        (reparse-symbol indented_block_body) [11353 12192])
                    ("_update_ts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12212 12216])
                            ("bulk_stats" variable nil (reparse-symbol function_parameters) [12218 12228])
                            ("monotonic_ts" variable nil (reparse-symbol function_parameters) [12230 12242]))                          )
                        (reparse-symbol indented_block_body) [12197 12399]))                  
                :type "class")
                nil [7765 12399])
            ("stats_cache" variable nil nil [12401 12427])
            ("_TTL" variable nil nil [12775 12786])
            ("BULK_STATS_TYPES" variable nil nil [12789 13040])
            ("VMBulkstatsMonitor" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13194 13211])
                            ("self" variable nil (reparse-symbol indented_block_body) [13220 13243])
                            ("self" variable nil (reparse-symbol indented_block_body) [13252 13283])
                            ("self" variable nil (reparse-symbol indented_block_body) [13292 13323])
                            ("self" variable nil (reparse-symbol indented_block_body) [13332 13368])
                            ("self" variable nil (reparse-symbol indented_block_body) [13377 13415])
                            ("self" variable nil (reparse-symbol indented_block_body) [13453 13518]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13094 13098])
                            ("conn" variable nil (reparse-symbol function_parameters) [13100 13104])
                            ("get_vms" variable nil (reparse-symbol function_parameters) [13106 13113])
                            ("stats_cache" variable nil (reparse-symbol function_parameters) [13115 13126])
                            ("stats_types" variable nil (reparse-symbol function_parameters) [13145 13156])
                            ("ttl" variable nil (reparse-symbol function_parameters) [13175 13178]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13081 13519])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13537 13541]))                          )
                        (reparse-symbol indented_block_body) [13524 15226])
                    ("_get_responsive_doms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15256 15260]))                          )
                        (reparse-symbol indented_block_body) [15231 15834]))                  
                :type "class")
                nil [13043 15834])
            ("HOST_STATS_AVERAGING_WINDOW" variable nil nil [15836 15867])
            ("host_samples" variable nil nil [15870 15931])
            ("HostMonitor" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16026 16049])
                            ("self" variable nil (reparse-symbol indented_block_body) [16058 16081])
                            ("self" variable nil (reparse-symbol indented_block_body) [16090 16105]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15979 15983])
                            ("samples" variable nil (reparse-symbol function_parameters) [15985 15992])
                            ("cif" variable nil (reparse-symbol function_parameters) [16007 16010]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15966 16106])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16124 16128]))                          )
                        (reparse-symbol indented_block_body) [16111 16363]))                  
                :type "class")
                nil [15934 16363])
            ("_translate" function (:arguments 
              ( ("bulk_stats" variable nil (reparse-symbol function_parameters) [16380 16390]))              ) nil [16365 16481]))          
      :file "sampling.py"
      :pointmax 16481
      :fsize 16480
      :lastmodtime '(23967 64130 419743 822000)
      :unmatched-syntax '((INDENT_BLOCK 14905 . 14971) (NEWLINE 14904 . 14905) (COLON 14903 . 14904) (FINALLY 14896 . 14903)))
    (semanticdb-table "semanticdb-table"
      :file "utils.py"
      :fsize 9404
      :lastmodtime '(23967 64130 419743 822000)))
  :file "!usr!lib!python2.7!site-packages!vdsm!lib!vdsm!virt!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
