;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Command line interface yum class and related.
\"\"\"" code nil nil [790 843])
            ("os" include nil nil [845 854])
            ("re" include nil nil [855 864])
            ("sys" include nil nil [865 875])
            ("time" include nil nil [876 887])
            ("random" include nil nil [888 901])
            ("logging" include nil nil [902 916])
            ("math" include nil nil [917 928])
            ("optparse" include nil nil [929 988])
            ("rpm" include nil nil [989 999])
            ("ctypes" include nil nil [1000 1013])
            ("glob" include nil nil [1014 1025])
            ("weakref" include nil nil [1027 1063])
            ("output" include nil nil [1065 1078])
            ("shell" include nil nil [1079 1091])
            ("yum" include nil nil [1092 1102])
            ("yum.Errors" include nil nil [1103 1120])
            ("yum.logginglevels" include nil nil [1121 1145])
            ("yum.misc" include nil nil [1146 1161])
            ("yum.plugins" include nil nil [1162 1180])
            ("rpmUtils.arch" include nil nil [1181 1221])
            ("yum" include nil nil [1222 1243])
            ("yum.rpmtrans" include nil nil [1244 1283])
            ("signal" include nil nil [1284 1297])
            ("yumcommands" include nil nil [1298 1316])
            ("yum.i18n" include nil nil [1318 1373])
            ("yum.packages" include nil nil [1614 1652])
            ("sigquit" function
               (:documentation "SIGQUIT handler for the yum cli.  This function will print an
    error message and exit the program.
    
    :param signum: unused
    :param frame: unused
    "
                :arguments 
                  ( ("signum" variable nil (reparse-symbol function_parameters) [1693 1699])
                    ("frame" variable nil (reparse-symbol function_parameters) [1701 1706]))                  )
                nil [1681 1964])
            ("CliError" type
               (:documentation "Command line interface related Exception."
                :superclasses ("yum.Errors.YumBaseError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("yum" code nil (reparse-symbol indented_block_body) [2100 2138])
                            ("self" variable nil (reparse-symbol indented_block_body) [2147 2163]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2076 2080])
                            ("args" variable nil (reparse-symbol function_parameters) [2082 2086]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2063 2164]))                  
                :type "class")
                nil [1965 2164])
            ("YumBaseCli" type
               (:documentation "This is the base class for yum cli."
                :superclasses ("yum.YumBase" "output.YumOutput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("signal" code nil (reparse-symbol indented_block_body) [2334 2372])
                            ("yum" code nil (reparse-symbol indented_block_body) [2381 2407])
                            ("output" code nil (reparse-symbol indented_block_body) [2416 2447])
                            ("logging" code nil (reparse-symbol indented_block_body) [2456 2477])
                            ("self" variable nil (reparse-symbol indented_block_body) [2486 2528])
                            ("self" variable nil (reparse-symbol indented_block_body) [2537 2595])
                            ("self" variable nil (reparse-symbol indented_block_body) [2604 2630])
                            ("self" variable nil (reparse-symbol indented_block_body) [2639 2672])
                            ("self" code nil (reparse-symbol indented_block_body) [2681 2731])
                            ("self" code nil (reparse-symbol indented_block_body) [2740 2789])
                            ("self" code nil (reparse-symbol indented_block_body) [2798 2845])
                            ("self" code nil (reparse-symbol indented_block_body) [2854 2901])
                            ("self" code nil (reparse-symbol indented_block_body) [2910 2958])
                            ("self" code nil (reparse-symbol indented_block_body) [2967 3016])
                            ("self" code nil (reparse-symbol indented_block_body) [3025 3077])
                            ("self" code nil (reparse-symbol indented_block_body) [3086 3134])
                            ("self" code nil (reparse-symbol indented_block_body) [3143 3194])
                            ("self" code nil (reparse-symbol indented_block_body) [3203 3257])
                            ("self" code nil (reparse-symbol indented_block_body) [3266 3315])
                            ("self" code nil (reparse-symbol indented_block_body) [3324 3374])
                            ("self" code nil (reparse-symbol indented_block_body) [3383 3438])
                            ("self" code nil (reparse-symbol indented_block_body) [3447 3500])
                            ("self" code nil (reparse-symbol indented_block_body) [3509 3557])
                            ("self" code nil (reparse-symbol indented_block_body) [3566 3616])
                            ("self" code nil (reparse-symbol indented_block_body) [3625 3676])
                            ("self" code nil (reparse-symbol indented_block_body) [3685 3732])
                            ("self" code nil (reparse-symbol indented_block_body) [3741 3793])
                            ("self" code nil (reparse-symbol indented_block_body) [3810 3862])
                            ("self" code nil (reparse-symbol indented_block_body) [3879 3929])
                            ("self" code nil (reparse-symbol indented_block_body) [3938 3988])
                            ("self" code nil (reparse-symbol indented_block_body) [3997 4050])
                            ("self" code nil (reparse-symbol indented_block_body) [4059 4112])
                            ("self" code nil (reparse-symbol indented_block_body) [4121 4179])
                            ("self" code nil (reparse-symbol indented_block_body) [4188 4235])
                            ("self" code nil (reparse-symbol indented_block_body) [4244 4295])
                            ("self" code nil (reparse-symbol indented_block_body) [4304 4357])
                            ("self" code nil (reparse-symbol indented_block_body) [4366 4422])
                            ("self" code nil (reparse-symbol indented_block_body) [4431 4484])
                            ("self" code nil (reparse-symbol indented_block_body) [4493 4538]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2285 2289]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2272 4539])
                    ("registerCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4564 4568])
                            ("command" variable nil (reparse-symbol function_parameters) [4570 4577]))                          
                        :documentation "Register a :class:`yumcommands.YumCommand` so that it can be called by
        any of the names returned by its
        :func:`yumcommands.YumCommand.getNames` method.
        
        :param command: the :class:`yumcommands.YumCommand` to register
        ")
                        (reparse-symbol indented_block_body) [4544 5075])
                    ("doRepoSetup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5108 5112])
                            ("thisrepo" variable nil (reparse-symbol function_parameters) [5114 5122])
                            ("dosack" variable nil (reparse-symbol function_parameters) [5129 5135]))                          
                        :documentation "Grab the repomd.xml for each enabled and set up the basics
        of the repository.

        :param thisrepo: the repository to set up
        :param dosack: whether to get the repo sack
        ")
                        (reparse-symbol indented_block_body) [5092 6167])
                    ("_makeUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6187 6191]))                          
                        :documentation "
        Format an attractive usage string for yum, listing subcommand
        names and summary usages.
        ")
                        (reparse-symbol indented_block_body) [6172 6972])
                    ("_parseSetOpts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6999 7003])
                            ("setopts" variable nil (reparse-symbol function_parameters) [7005 7012]))                          
                        :documentation "parse the setopts list handed to us and saves the results as
           repo_setopts and main_setopts in the yumbase object")
                        (reparse-symbol indented_block_body) [6981 8208])
                    ("getOptionsConfig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8242 8246])
                            ("args" variable nil (reparse-symbol function_parameters) [8248 8252]))                          
                        :documentation "Parse command line arguments, and set up :attr:`self.conf` and
        :attr:`self.cmds`, as well as logger objects in base instance.

        :param args: a list of command line arguments
        ")
                        (reparse-symbol indented_block_body) [8221 14530])
                    ("parseCommands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14561 14565]))                          
                        :documentation "Read :attr:`self.cmds` and parse them out to make sure that
        the requested base command and argument makes any sense at
        all.  This function will also set :attr:`self.basecmd` and
        :attr:`self.extcmds`.
        ")
                        (reparse-symbol indented_block_body) [14543 16234])
                    ("_set_repos_cache_req" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16264 16268])
                            ("warning" variable nil (reparse-symbol function_parameters) [16270 16277]))                          
                        :documentation " Set the cacheReq attribute from the commands to the repos. ")
                        (reparse-symbol indented_block_body) [16239 18535])
                    ("_shell_history_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18565 18569]))                          )
                        (reparse-symbol indented_block_body) [18540 18964])
                    ("doShell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18981 18985]))                          
                        :documentation "Run a shell-like interface for yum commands.

        :return: a tuple containing the shell result number, and the
           shell result messages
        ")
                        (reparse-symbol indented_block_body) [18969 19505])
                    ("errorSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19527 19531])
                            ("errstring" variable nil (reparse-symbol function_parameters) [19533 19542]))                          
                        :documentation "Parse the error string for 'interesting' errors which can
        be grouped, such as disk space issues.

        :param errstring: the error string
        :return: a string containing a summary of the errors
        ")
                        (reparse-symbol indented_block_body) [19510 20706])
                    ("waitForLock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20728 20732]))                          
                        :documentation "Establish the yum lock.  If another process is already
        holding the yum lock, by default this method will keep trying
        to establish the lock until it is successful.  However, if
        :attr:`self.conf.exit_on_lock` is set to True, it will
        raise a :class:`Errors.YumBaseError`.
        ")
                        (reparse-symbol indented_block_body) [20712 21948])
                    ("doCommands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21968 21972]))                          
                        :documentation "Call the base command, and pass it the extended commands or
           arguments.

        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [21953 23389])
                    ("doTransaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23412 23416]))                          
                        :documentation "Take care of package downloading, checking, user
        confirmation and actually running the transaction.

        :return: a numeric return code, and optionally a list of
           errors.  A negative return code indicates that errors
           occurred in the pre-transaction checks
        ")
                        (reparse-symbol indented_block_body) [23394 33304])
                    ("gpgsigcheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33333 33337])
                            ("pkgs" variable nil (reparse-symbol function_parameters) [33339 33343]))                          
                        :documentation "Perform GPG signature verification on the given packages,
        installing keys if possible.

        :param pkgs: a list of package objects to verify the GPG
           signatures of
        :return: non-zero if execution should stop due to an error
        :raises: Will raise :class:`YumBaseError` if there's a problem
        ")
                        (reparse-symbol indented_block_body) [33317 34578])
                    ("_maybeYouMeant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34602 34606])
                            ("arg" variable nil (reparse-symbol function_parameters) [34608 34611]))                          
                        :documentation " If install argument doesn't match with case, tell the user. ")
                        (reparse-symbol indented_block_body) [34583 35093])
                    ("_checkMaybeYouMeant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35122 35126])
                            ("arg" variable nil (reparse-symbol function_parameters) [35128 35131])
                            ("always_output" variable nil (reparse-symbol function_parameters) [35133 35146])
                            ("rpmdb_only" variable nil (reparse-symbol function_parameters) [35153 35163]))                          
                        :documentation " If the update/remove argument doesn't match with case, or due
            to not being installed, tell the user. ")
                        (reparse-symbol indented_block_body) [35098 37161])
                    ("_install_upgraded_requires" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37197 37201])
                            ("txmbrs" variable nil (reparse-symbol function_parameters) [37203 37209]))                          
                        :documentation "Go through the given txmbrs, and for any to be installed packages
        look for their installed deps. and try to upgrade them, if the
        configuration is set. Returning any new transaction members to be
        isntalled.

        :param txmbrs: a list of :class:`yum.transactioninfo.TransactionMember` objects
        :return: a list of :class:`yum.transactioninfo.TransactionMember` objects
        ")
                        (reparse-symbol indented_block_body) [37166 38476])
                    ("installPkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38497 38501])
                            ("userlist" variable nil (reparse-symbol function_parameters) [38503 38511])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [38513 38520])
                            ("repoid" variable nil (reparse-symbol function_parameters) [38532 38538]))                          
                        :documentation "Attempt to take the user specified list of packages or
        wildcards and install them, or if they are installed, update
        them to a newer version. If a complete version number is
        specified, attempt to upgrade (or downgrade if they have been
        removed) them to the specified version.

        :param userlist: a list of names or wildcards specifying
           packages to install
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [38481 42811])
                    ("updatePkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42839 42843])
                            ("userlist" variable nil (reparse-symbol function_parameters) [42845 42853])
                            ("quiet" variable nil (reparse-symbol function_parameters) [42855 42860])
                            ("update_to" variable nil (reparse-symbol function_parameters) [42864 42873]))                          
                        :documentation "Take user commands and populate transaction wrapper with
        packages to be updated.

        :param userlist: a list of names or wildcards specifying
           packages to update.  If *userlist* is an empty list, yum
           will perform a global update
        :param quiet: unused
        :param update_to: if *update_to* is True, the update will only
           be run if it will update the given package to the given
           version.  For example, if the package foo-1-2 is installed,
           updatePkgs([\"foo-1-2], update_to=False) will work
           identically to updatePkgs([\"foo\"]), but
           updatePkgs([\"foo-1-2\"], update_to=True) will do nothing
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [42824 45702])
                    ("distroSyncPkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45844 45848])
                            ("userlist" variable nil (reparse-symbol function_parameters) [45850 45858]))                          
                        :documentation "Upgrade or downgrade packages to match the latest versions
        available in the enabled repositories.

        :param userlist: list of names or wildcards specifying
           packages to synchronize with the repositories.  If the
           first string in *userlist* is \"full\", packages will also be
           reinstalled if their checksums do not match the checksums
           in the repositories.  If *userlist* is an empty list or
           only contains \"full\", every installed package will be
           synchronized
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [45825 50195])
                    ("erasePkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50214 50218])
                            ("userlist" variable nil (reparse-symbol function_parameters) [50220 50228])
                            ("pos" variable nil (reparse-symbol function_parameters) [50230 50233])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [50241 50248]))                          
                        :documentation "Take user commands and populate a transaction wrapper with
        packages to be erased.

        :param userlist: a list of names or wildcards specifying
           packages to erase
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [50200 52360])
                    ("downgradePkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52387 52391])
                            ("userlist" variable nil (reparse-symbol function_parameters) [52393 52401]))                          
                        :documentation "Attempt to take the user specified list of packages or
        wildcards and downgrade them. If a complete version number if
        specified, attempt to downgrade them to the specified version

        :param userlist: a list of names or wildcards specifying
           packages to downgrade
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [52369 54118])
                    ("reinstallPkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54149 54153])
                            ("userlist" variable nil (reparse-symbol function_parameters) [54155 54163]))                          
                        :documentation "Attempt to take the user specified list of packages or
        wildcards and reinstall them.

        :param userlist: a list of names or wildcards specifying
           packages to reinstall
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [54131 56434])
                    ("localInstall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56456 56460])
                            ("filelist" variable nil (reparse-symbol function_parameters) [56462 56470])
                            ("updateonly" variable nil (reparse-symbol function_parameters) [56472 56482]))                          
                        :documentation "Install or update rpms provided on the file system in a
        local directory (i.e. not from a repository).

        :param filelist: a list of names specifying local rpms
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [56439 57750])
                    ("returnPkgLists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57774 57778])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [57780 57787])
                            ("installed_available" variable nil (reparse-symbol function_parameters) [57789 57808])
                            ("repoid" variable nil (reparse-symbol function_parameters) [57816 57822]))                          
                        :documentation "Return a :class:`yum.misc.GenericHolder` object containing
        lists of package objects that match the given names or wildcards.

        :param extcmds: a list of names or wildcards specifying
           packages to list
        :param installed_available: whether the available package list
           is present as .hidden_available when doing all, available,
           or installed
        :param repoid: a repoid that all packages should belong to

        :return: a :class:`yum.misc.GenericHolder` instance with the
           following lists defined::

             available = list of packageObjects
             installed = list of packageObjects
             updates = tuples of packageObjects (updating, installed)
             extras = list of packageObjects
             obsoletes = tuples of packageObjects (obsoleting, installed)
             recent = list of packageObjects
        ")
                        (reparse-symbol indented_block_body) [57755 59917])
                    ("search" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59933 59937])
                            ("args" variable nil (reparse-symbol function_parameters) [59939 59943]))                          
                        :documentation "Search for simple text tags in a package object. This is a
        cli wrapper method for the module search function.

        :param args: list of names or wildcards to search for.
           Normally this method will begin by searching the package
           names and summaries, and will only search urls and
           descriptions if that fails.  However, if the first string
           in *args* is \"all\", this method will always search
           everything
        :return: a tuple where the first item is an exit code, and
           the second item is a generator if the search is a
           successful, and a list of error messages otherwise

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [59922 64397])
                    ("deplist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64414 64418])
                            ("args" variable nil (reparse-symbol function_parameters) [64420 64424]))                          
                        :documentation "Print out a formatted list of dependencies for a list of
        packages.  This is a cli wrapper method for
        :class:`yum.YumBase.findDeps`.

        :param args: a list of names or wildcards specifying packages
           that should have their dependenices printed
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [64402 65830])
                    ("provides" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65848 65852])
                            ("args" variable nil (reparse-symbol function_parameters) [65854 65858]))                          
                        :documentation "Print out a list of packages that provide the given file or
        feature.  This a cli wrapper to the provides methods in the
        rpmdb and pkgsack.

        :param args: the name of a file or feature to search for
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [65835 67567])
                    ("resolveDepCli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67594 67598])
                            ("args" variable nil (reparse-symbol function_parameters) [67600 67604]))                          
                        :documentation "Print information about a package that provides the given
        dependency.  Only one package will be printed per dependency.

        :param args: a list of strings specifying dependencies to
           search for
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [67576 69126])
                    ("cleanCli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69148 69152])
                            ("userlist" variable nil (reparse-symbol function_parameters) [69154 69162]))                          
                        :documentation "Remove data from the yum cache directory.  What data is
        removed depends on the options supplied by the user.

        :param userlist: a list of options.  The following are valid
           options::

             expire-cache = Eliminate the local data saying when the
               metadata and mirror lists were downloaded for each
               repository.
             packages = Eliminate any cached packages
             headers = Eliminate the header files, which old versions
               of yum used for dependency resolution
             metadata = Eliminate all of the files which yum uses to
               determine the remote availability of packages
             dbcache = Eliminate the sqlite cache used for faster
               access to metadata
             rpmdb = Eliminate any cached datat from the local rpmdb
             plugins = Tell any enabled plugins to eliminate their
               cached data
             all = do all of the above
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [69135 75609])
                    ("returnGroupLists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75635 75639])
                            ("userlist" variable nil (reparse-symbol function_parameters) [75641 75649]))                          
                        :documentation "Print out a list of groups that match the given names or
        wildcards.

        :param extcmds: a list of names or wildcards specifying
           groups to list
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage        
        ")
                        (reparse-symbol indented_block_body) [75614 76113])
                    ("_returnGroupLists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76140 76144])
                            ("userlist" variable nil (reparse-symbol function_parameters) [76146 76154])
                            ("summary" variable nil (reparse-symbol function_parameters) [76156 76163]))                          )
                        (reparse-symbol indented_block_body) [76118 80284])
                    ("returnGroupSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80312 80316])
                            ("userlist" variable nil (reparse-symbol function_parameters) [80318 80326]))                          
                        :documentation "Print a summary of the groups that match the given names or
        wildcards.

        :param userlist: a list of names or wildcards specifying the
           groups to summarise. If *userlist* is an empty list, all
           installed and available packages will be summarised
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [80289 80909])
                    ("returnGroupInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80938 80942])
                            ("userlist" variable nil (reparse-symbol function_parameters) [80944 80952]))                          
                        :documentation "Print complete information about the groups that match the
        given names or wildcards.

        :param userlist: a list of names or wildcards specifying the
           groups to print information about
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [80918 82265])
                    ("installGroups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82296 82300])
                            ("grouplist" variable nil (reparse-symbol function_parameters) [82302 82311])
                            ("upgrade" variable nil (reparse-symbol function_parameters) [82313 82320]))                          
                        :documentation "Mark the packages in the given groups for installation.

        :param grouplist: a list of names or wildcards specifying
           groups to be installed
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [82278 85530])
                    ("removeGroups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85552 85556])
                            ("grouplist" variable nil (reparse-symbol function_parameters) [85558 85567]))                          
                        :documentation "Mark the packages in the given groups for removal.

        :param grouplist: a list of names or wildcards specifying
           groups to be removed
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [85535 87701])
                    ("_promptWanted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87726 87730]))                          )
                        (reparse-symbol indented_block_body) [87708 88369])
                    ("usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88384 88388]))                          
                        :documentation "Print out an explanation of command line usage.")
                        (reparse-symbol indented_block_body) [88374 88508])
                    ("shellUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88528 88532]))                          
                        :documentation "Print out an explanation of the shell usage.")
                        (reparse-symbol indented_block_body) [88513 88647])
                    ("_installable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88673 88677])
                            ("pkg" variable nil (reparse-symbol function_parameters) [88679 88682])
                            ("ematch" variable nil (reparse-symbol function_parameters) [88684 88690]))                          
                        :documentation "check if the package is reasonably installable, true/false")
                        (reparse-symbol indented_block_body) [88656 91000]))                  
                :type "class")
                nil [2165 91000])
            ("YumOptionParser" type
               (:documentation "Subclass that makes some minor tweaks to make OptionParser do things the
    \"yum way\".
    "
                :superclasses ("OptionParser")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [91257 91400])
                            ("OptionParser" code nil (reparse-symbol indented_block_body) [91408 91445])
                            ("self" variable nil (reparse-symbol indented_block_body) [91454 91496])
                            ("self" variable nil (reparse-symbol indented_block_body) [91505 91521])
                            ("self" variable nil (reparse-symbol indented_block_body) [91530 91595])
                            ("self" code nil (reparse-symbol indented_block_body) [91604 91651])
                            ("self" code nil (reparse-symbol indented_block_body) [91661 91687]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91159 91163])
                            ("base" variable nil (reparse-symbol function_parameters) [91164 91168])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [91170 91178]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91146 91688])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91703 91707])
                            ("msg" variable nil (reparse-symbol function_parameters) [91709 91712]))                          
                        :documentation "Output an error message, and exit the program.  This method
        is overridden so that error output goes to the logger.

        :param msg: the error message to output
        ")
                        (reparse-symbol indented_block_body) [91693 92020])
                    ("firstParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92040 92044])
                            ("args" variable nil (reparse-symbol function_parameters) [92045 92049]))                          
                        :documentation "Parse only command line options that affect basic yum
        setup.

        :param args: a list of command line options to parse
        :return: a dictionary containing the values of command line
           options
        ")
                        (reparse-symbol indented_block_body) [92025 93004])
                    ("_splitArg" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("seq" variable nil (reparse-symbol function_parameters) [93041 93044]))                          
                        :documentation " Split all strings in seq, at \",\" and whitespace.
            Returns a new list. ")
                        (reparse-symbol indented_block_body) [93009 93258])
                    ("setupYumConfig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93290 93294])
                            ("args" variable nil (reparse-symbol function_parameters) [93296 93300]))                          
                        :documentation "Parse command line options.

        :param args: the command line arguments entered by the user
        :return: (opts, cmds)  opts is a dictionary containing
           the values of command line options.  cmds is a list of the
           command line arguments that were not parsed as options.
           For example, if args is [\"install\", \"foo\", \"--verbose\"],
           cmds will be [\"install\", \"foo\"].
        ")
                        (reparse-symbol indented_block_body) [93271 98766])
                    ("_checkAbsInstallRoot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98796 98800])
                            ("opts" variable nil (reparse-symbol function_parameters) [98802 98806]))                          )
                        (reparse-symbol indented_block_body) [98771 99114])
                    ("getRoot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99131 99135])
                            ("opts" variable nil (reparse-symbol function_parameters) [99136 99140]))                          
                        :documentation "Return the root location to use for the yum operation.
        This location can be changed by using the --installroot
        option.

        :param opts: a dictionary containing the values of the command
           line options
        :return: a string representing the root location
        ")
                        (reparse-symbol indented_block_body) [99119 100169])
                    ("_wrapOptParseUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100197 100201])
                            ("opt" variable nil (reparse-symbol function_parameters) [100203 100206])
                            ("value" variable nil (reparse-symbol function_parameters) [100208 100213])
                            ("parser" variable nil (reparse-symbol function_parameters) [100215 100221])
                            ("args" variable nil (reparse-symbol function_parameters) [100223 100228])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [100230 100238]))                          )
                        (reparse-symbol indented_block_body) [100174 100287])
                    ("_addYumBasicOptions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100316 100320]))                          )
                        (reparse-symbol indented_block_body) [100292 107376]))                  
                :type "class")
                nil [91001 107376])
            ("_filtercmdline" function (:arguments 
              ( ("novalopts" variable nil (reparse-symbol function_parameters) [107405 107414])
                ("valopts" variable nil (reparse-symbol function_parameters) [107416 107423])
                ("args" variable nil (reparse-symbol function_parameters) [107425 107429]))              ) nil [107386 108987]))          
      :file "cli.py"
      :pointmax 108988
      :fsize 108987
      :lastmodtime '(23519 41652 0 0)
      :unmatched-syntax '((NAME 73286 . 73291) (IF 73298 . 73300) (ELSE 73306 . 73310) (INDENT_BLOCK 32618 . 32816) (NEWLINE 32617 . 32618) (COLON 32616 . 32617) (TRY 32344 . 32347) (AS 32612 . 32614) (NAME 19974 . 19984) (IF 20003 . 20005) (ELSE 20024 . 20028)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Various utility functions, and a utility class.\"\"\"" code nil nil [732 785])
            ("os" include nil nil [787 796])
            ("sys" include nil nil [797 807])
            ("time" include nil nil [808 819])
            ("exceptions" include nil nil [820 837])
            ("yum" include nil nil [839 849])
            ("cli" include nil nil [850 867])
            ("yum" include nil nil [868 890])
            ("yum" include nil nil [891 908])
            ("yum.i18n" include nil nil [909 955])
            ("yum" include nil nil [956 985])
            ("optparse" include nil nil [986 1018])
            ("yum.plugins" include nil nil [1020 1049])
            ("urlgrabber.progress" include nil nil [1050 1095])
            ("try" code nil nil [1097 1264])
            ("suppress_keyboard_interrupt_message" function (:documentation "Change settings so that nothing will be printed to the
    terminal after an uncaught :class:`exceptions.KeyboardInterrupt`.
    ") nil [1265 1689])
            ("jiffies_to_seconds" function
               (:documentation "Convert a number of jiffies to seconds. How many jiffies are in a second
    is system-dependent, e.g. 100 jiffies = 1 second is common.

    :param jiffies: a number of jiffies
    :return: the equivalent number of seconds
    "
                :arguments 
                  ( ("jiffies" variable nil (reparse-symbol function_parameters) [1713 1720]))                  )
                nil [1690 1997])
            ("seconds_to_ui_time" function
               (:documentation "Return a human-readable string representation of the length of
    a time interval given in seconds.

    :param seconds: the length of the time interval in seconds
    :return: a human-readable string representation of the length of
    the time interval
    "
                :arguments 
                  ( ("seconds" variable nil (reparse-symbol function_parameters) [2021 2028]))                  )
                nil [1998 2802])
            ("get_process_info" function
               (:documentation "Return information about a process taken from
    /proc/*pid*/status, /proc/stat/, and /proc/*pid*/stat.

    :param pid: the process id number
    :return: a dictionary containing information about the process
    "
                :arguments 
                  ( ("pid" variable nil (reparse-symbol function_parameters) [2824 2827]))                  )
                nil [2803 3710])
            ("get_boot_time" function nil nil [3712 3854])
            ("get_process_time" function (:arguments 
              ( ("pid" variable nil (reparse-symbol function_parameters) [3877 3880])
                ("boot_time" variable nil (reparse-symbol function_parameters) [3882 3891]))              ) nil [3856 4656])
            ("show_lock_owner" function
               (:documentation "Output information about another process that is holding the
    yum lock.

    :param pid: the process id number of the process holding the yum
       lock
    :param logger: the logger to output the information to
    :return: a dictionary containing information about the process.
       This is the same as the dictionary returned by
       :func:`get_process_info`.
    "
                :arguments 
                  ( ("pid" variable nil (reparse-symbol function_parameters) [4677 4680])
                    ("logger" variable nil (reparse-symbol function_parameters) [4682 4688]))                  )
                nil [4657 5949])
            ("YumUtilBase" type
               (:documentation "A class to extend the yum cli for utilities."
                :superclasses ("YumBaseCli")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("YumBaseCli" code nil (reparse-symbol indented_block_body) [6089 6114])
                            ("self" variable nil (reparse-symbol indented_block_body) [6123 6187])
                            ("self" variable nil (reparse-symbol indented_block_body) [6196 6215])
                            ("self" variable nil (reparse-symbol indented_block_body) [6224 6245])
                            ("self" variable nil (reparse-symbol indented_block_body) [6254 6273])
                            ("self" variable nil (reparse-symbol indented_block_body) [6282 6362])
                            ("self" code nil (reparse-symbol indented_block_body) [6371 6420])
                            ("suppress_keyboard_interrupt_message" code nil (reparse-symbol indented_block_body) [6429 6466])
                            ("logger" variable nil (reparse-symbol indented_block_body) [6475 6513])
                            ("verbose_logger" variable nil (reparse-symbol indented_block_body) [6522 6576])
                            ("if" code nil (reparse-symbol indented_block_body) [6637 6738]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6059 6063])
                            ("name" variable nil (reparse-symbol function_parameters) [6064 6068])
                            ("ver" variable nil (reparse-symbol function_parameters) [6069 6072])
                            ("usage" variable nil (reparse-symbol function_parameters) [6073 6078]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6046 6738])
                    ("exUserCancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6760 6764]))                          
                        :documentation "Output a message stating that the operation was cancelled
        by the user.

        :return: the exit code
        ")
                        (reparse-symbol indented_block_body) [6743 7017])
                    ("exIOError" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7036 7040])
                            ("e" variable nil (reparse-symbol function_parameters) [7042 7043]))                          
                        :documentation "Output a message stating that the program is exiting due to
        an IO exception.

        :param e: the IO exception
        :return: the exit code
        ")
                        (reparse-symbol indented_block_body) [7022 7446])
                    ("exPluginExit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7468 7472])
                            ("e" variable nil (reparse-symbol function_parameters) [7474 7475]))                          
                        :documentation "Called when a plugin raises
           :class:`yum.plugins.PluginYumExit`.  Log the plugin's exit
           message if one was supplied.

        :param e: the exception
        :return: the exit code
        ")
                        (reparse-symbol indented_block_body) [7451 7876])
                    ("exFatal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7893 7897])
                            ("e" variable nil (reparse-symbol function_parameters) [7899 7900]))                          
                        :documentation "Output a message stating that a fatal error has occurred.

        :param e: the exception
        :return: the exit code
        ")
                        (reparse-symbol indented_block_body) [7881 8159])
                    ("unlock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8183 8187]))                          
                        :documentation "Release the yum lock.

        :return: the exit code
        ")
                        (reparse-symbol indented_block_body) [8172 8414])
                    ("getOptionParser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8456 8460]))                          
                        :documentation "Return the :class:`cli.YumOptionParser` for this object.

        :return: the :class:`cli.YumOptionParser` for this object
        ")
                        (reparse-symbol indented_block_body) [8436 8646])
                    ("getOptionGroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8670 8674]))                          
                        :documentation "Return an option group to add non inherited options.

        :return: a :class:`optparse.OptionGroup` for adding options
           that are not inherited from :class:`YumBaseCli`.
        ")
                        (reparse-symbol indented_block_body) [8651 8920])
                    ("_printUtilVersion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8951 8955]))                          )
                        (reparse-symbol indented_block_body) [8929 9042])
                    ("doUtilConfigSetup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9077 9081])
                            ("args" variable nil (reparse-symbol function_parameters) [9082 9086])
                            ("pluginsTypes" variable nil (reparse-symbol function_parameters) [9102 9114]))                          
                        :documentation "Parse command line options, and perform configuration.

        :param args: list of arguments to use for configuration
        :param pluginsTypes: a sequence specifying the types of
           plugins to load
        :return: a dictionary containing the values of command line options
        ")
                        (reparse-symbol indented_block_body) [9055 12232])
                    ("doUtilYumSetup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12256 12260]))                          
                        :documentation "Do a default setup for all the normal or necessary yum components;
           this method is mostly just a used for testing.
        ")
                        (reparse-symbol indented_block_body) [12237 12759])
                    ("doUtilBuildTransaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12791 12795])
                            ("unfinished_transactions_check" variable nil (reparse-symbol function_parameters) [12797 12826]))                          
                        :documentation "Build the transaction.

        :param unfinished_transactions_check: whether to check if an
           unfinished transaction has been saved
        ")
                        (reparse-symbol indented_block_body) [12764 14573])
                    ("doUtilTransaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14608 14612]))                          
                        :documentation "Perform the transaction.")
                        (reparse-symbol indented_block_body) [14586 15143]))                  
                :type "class")
                nil [5951 15143])
            ("main" function nil nil [15152 15776])
            ("if" code nil nil [15776 15814]))          
      :file "utils.py"
      :pointmax 15820
      :fsize 15819
      :lastmodtime '(23519 41652 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Handle actual output from the cli.\"\"\"" code nil nil [23 63])
            ("sys" include nil nil [809 819])
            ("time" include nil nil [820 831])
            ("logging" include nil nil [832 846])
            ("types" include nil nil [847 859])
            ("gettext" include nil nil [860 874])
            ("pwd" include nil nil [875 885])
            ("rpm" include nil nil [886 896])
            ("re" include nil nil [898 907])
            ("weakref" include nil nil [923 959])
            ("urlgrabber.progress" include nil nil [961 1022])
            ("urlgrabber.progress" include nil nil [1023 1049])
            ("urlgrabber.grabber" include nil nil [1050 1093])
            ("yum.misc" include nil nil [1094 1135])
            ("yum.i18n" include nil nil [1136 1184])
            ("yum.misc" include nil nil [1185 1200])
            ("rpmUtils.miscutils" include nil nil [1201 1259])
            ("yum.constants" include nil nil [1260 1287])
            ("yum" include nil nil [1289 1325])
            ("yum.rpmtrans" include nil nil [1326 1366])
            ("yum.packageSack" include nil nil [1367 1419])
            ("yum.packages" include nil nil [1420 1439])
            ("yum.history" include nil nil [1441 1459])
            ("yum.i18n" include nil nil [1461 1525])
            ("locale" include nil nil [1527 1540])
            ("try" code nil nil [1542 1814])
            ("_term_width" function (:documentation " Simple terminal width, limit to 20 chars. and make 0 == 80. ") nil [1815 2129])
            ("YumTextMeter" type
               (:documentation "A class to display text progress bar output."
                :superclasses ("TextMeter")
                :members 
                  ( ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2233 2237])
                            ("amount_read" variable nil (reparse-symbol function_parameters) [2239 2250])
                            ("now" variable nil (reparse-symbol function_parameters) [2252 2255]))                          
                        :documentation "Update the status of the text progress bar

        :param amount_read: the amount of data, in bytes, that has been read
        :param now: the current time in seconds since the epoch.  If
           *now* is not given, the output of :func:`time.time()` will
           be used.
        ")
                        (reparse-symbol indented_block_body) [2222 2638]))                  
                :type "class")
                nil [2131 2638])
            ("YumTextMultiFileMeter" type
               (:superclasses ("TextMultiFileMeter")
                :members 
                  ( ("update_meter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2709 2713])
                            ("meter" variable nil (reparse-symbol function_parameters) [2715 2720])
                            ("now" variable nil (reparse-symbol function_parameters) [2722 2725]))                          )
                        (reparse-symbol indented_block_body) [2692 2809]))                  
                :type "class")
                nil [2639 2809])
            ("YumTerm" type
               (:documentation "A class to provide some terminal \"UI\" helpers based on curses."
                :members 
                  ( ("__enabled" variable nil (reparse-symbol indented_block_body) [3213 3229])
                    ("if" code nil (reparse-symbol indented_block_body) [3235 3348])
                    ("__cap_names" variable nil (reparse-symbol indented_block_body) [3353 3462])
                    ("__colors" variable nil (reparse-symbol indented_block_body) [3472 3660])
                    ("__ansi_colors" variable nil (reparse-symbol indented_block_body) [3665 3858])
                    ("__ansi_forced_MODE" variable nil (reparse-symbol indented_block_body) [3863 4070])
                    ("__ansi_forced_FG_COLOR" variable nil (reparse-symbol indented_block_body) [4075 4349])
                    ("__ansi_forced_BG_COLOR" variable nil (reparse-symbol indented_block_body) [4354 4628])
                    ("__forced_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4652 4656]))                          )
                        (reparse-symbol indented_block_body) [4634 4807])
                    ("reinit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4823 4827])
                            ("term_stream" variable nil (reparse-symbol function_parameters) [4829 4840])
                            ("color" variable nil (reparse-symbol function_parameters) [4847 4852]))                          
                        :documentation "Reinitializes the :class:`YumTerm`.

        :param term_stream:  the terminal stream that the
           :class:`YumTerm` should be initialized to use.  If
           *term_stream* is not given, :attr:`sys.stdout` is used.
        :param color: when to colorize output.  Valid values are
           'always', 'auto', and 'never'.  'always' will use ANSI codes
           to always colorize output, 'auto' will decide whether do
           colorize depending on the terminal, and 'never' will never
           colorize.
        ")
                        (reparse-symbol indented_block_body) [4812 8415])
                    ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [8480 8511]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8433 8437])
                            ("term_stream" variable nil (reparse-symbol function_parameters) [8439 8450])
                            ("color" variable nil (reparse-symbol function_parameters) [8457 8462]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8420 8512])
                    ("_tigetstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8531 8535])
                            ("cap_name" variable nil (reparse-symbol function_parameters) [8537 8545]))                          )
                        (reparse-symbol indented_block_body) [8517 8817])
                    ("sub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8830 8834])
                            ("haystack" variable nil (reparse-symbol function_parameters) [8836 8844])
                            ("beg" variable nil (reparse-symbol function_parameters) [8846 8849])
                            ("end" variable nil (reparse-symbol function_parameters) [8851 8854])
                            ("needles" variable nil (reparse-symbol function_parameters) [8856 8863])
                            ("escape" variable nil (reparse-symbol function_parameters) [8865 8871])
                            ("ignore_case" variable nil (reparse-symbol function_parameters) [8878 8889]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        *beg*, and postfix each occurrence with *end*, then return the
        modified string.  For example::
           
           >>> yt = YumTerm()
           >>> yt.sub('spam and eggs', 'x', 'z', ['and'])
           'spam xandz eggs'

        This is particularly useful for emphasizing certain words
        in output: for example, calling :func:`sub` with *beg* =
        MODE['bold'] and *end* = MODE['normal'] will return a string
        that when printed to the terminal will appear to be *haystack*
        with each occurrence of the strings in *needles* in bold
        face.  Note, however, that the :func:`sub_mode`,
        :func:`sub_bold`, :func:`sub_fg`, and :func:`sub_bg` methods
        provide convenient ways to access this same emphasizing functionality. 

        :param haystack: the string to be modified
        :param beg: the string to be prefixed onto matches
        :param end: the string to be postfixed onto matches
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :param escape: a function that accepts a string and returns
           the same string with problematic characters escaped.  By
           default, :func:`re.escape` is used.
        :param ignore_case: whether case should be ignored when
           searching for matches
        :return: *haystack* with *beg* prefixing, and *end*
          postfixing, occurrences of the strings in *needles*
        ")
                        (reparse-symbol indented_block_body) [8822 10876])
                    ("sub_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10893 10897])
                            ("haystack" variable nil (reparse-symbol function_parameters) [10899 10907])
                            ("beg" variable nil (reparse-symbol function_parameters) [10909 10912])
                            ("needles" variable nil (reparse-symbol function_parameters) [10914 10921])
                            ("kwds" variable nil (reparse-symbol function_parameters) [10923 10929]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        *beg*, and postfix each occurrence with self.MODE['normal'],
        then return the modified string.  If *beg* is an ANSI escape
        code, such as given by self.MODE['bold'], this method will
        return *haystack* with the formatting given by the code only
        applied to the strings in *needles*.

        :param haystack: the string to be modified
        :param beg: the string to be prefixed onto matches
        :param end: the string to be postfixed onto matches
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with *beg* prefixing, and self.MODE['normal']
          postfixing, occurrences of the strings in *needles*
        ")
                        (reparse-symbol indented_block_body) [10880 11871])
                    ("sub_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11889 11893])
                            ("haystack" variable nil (reparse-symbol function_parameters) [11895 11903])
                            ("mode" variable nil (reparse-symbol function_parameters) [11905 11909])
                            ("needles" variable nil (reparse-symbol function_parameters) [11911 11918])
                            ("kwds" variable nil (reparse-symbol function_parameters) [11920 11926]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        self.MODE[*mode*], and postfix each occurrence with
        self.MODE['normal'], then return the modified string.  This
        will return a string that when printed to the terminal will
        appear to be *haystack* with each occurrence of the strings in
        *needles* in the given *mode*.

        :param haystack: the string to be modified
        :param mode: the mode to set the matches to be in.  Valid
           values are given by self.MODE.keys().
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with self.MODE[*mode*] prefixing, and
          self.MODE['normal'] postfixing, occurrences of the strings
          in *needles*
        ")
                        (reparse-symbol indented_block_body) [11876 12869])
                    ("sub_bold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12887 12891])
                            ("haystack" variable nil (reparse-symbol function_parameters) [12893 12901])
                            ("needles" variable nil (reparse-symbol function_parameters) [12903 12910])
                            ("kwds" variable nil (reparse-symbol function_parameters) [12912 12918]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        self.MODE['bold'], and postfix each occurrence with
        self.MODE['normal'], then return the modified string.  This
        will return a string that when printed to the terminal will
        appear to be *haystack* with each occurrence of the strings in
        *needles* in bold face.

        :param haystack: the string to be modified
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with self.MODE['bold'] prefixing, and
          self.MODE['normal'] postfixing, occurrences of the strings
          in *needles*
        ")
                        (reparse-symbol indented_block_body) [12874 13730])
                    ("sub_fg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13750 13754])
                            ("haystack" variable nil (reparse-symbol function_parameters) [13756 13764])
                            ("color" variable nil (reparse-symbol function_parameters) [13766 13771])
                            ("needles" variable nil (reparse-symbol function_parameters) [13773 13780])
                            ("kwds" variable nil (reparse-symbol function_parameters) [13782 13788]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        self.FG_COLOR[*color*], and postfix each occurrence with
        self.MODE['normal'], then return the modified string.  This
        will return a string that when printed to the terminal will
        appear to be *haystack* with each occurrence of the strings in
        *needles* in the given color.

        :param haystack: the string to be modified
        :param color: the color to set the matches to be in.  Valid
           values are given by self.FG_COLOR.keys().
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with self.FG_COLOR[*color*] prefixing, and
          self.MODE['normal'] postfixing, occurrences of the strings
          in *needles*
        ")
                        (reparse-symbol indented_block_body) [13739 14751])
                    ("sub_bg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14767 14771])
                            ("haystack" variable nil (reparse-symbol function_parameters) [14773 14781])
                            ("color" variable nil (reparse-symbol function_parameters) [14783 14788])
                            ("needles" variable nil (reparse-symbol function_parameters) [14790 14797])
                            ("kwds" variable nil (reparse-symbol function_parameters) [14799 14805]))                          
                        :documentation "Search the string *haystack* for all occurrences of any
        string in the list *needles*.  Prefix each occurrence with
        self.BG_COLOR[*color*], and postfix each occurrence with
        self.MODE['normal'], then return the modified string.  This
        will return a string that when printed to the terminal will
        appear to be *haystack* with each occurrence of the strings in
        *needles* highlighted in the given background color.

        :param haystack: the string to be modified
        :param color: the background color to set the matches to be in.  Valid
           values are given by self.BG_COLOR.keys().
        :param needles: a list of strings to add the prefixes and
           postfixes to
        :return: *haystack* with self.BG_COLOR[*color*] prefixing, and
          self.MODE['normal'] postfixing, occurrences of the strings
          in *needles*
        ")
                        (reparse-symbol indented_block_body) [14756 15802]))                  
                :type "class")
                nil [2810 15802])
            ("YumOutput" type
               (:documentation "Main output class for the yum command line."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15909 15951])
                            ("self" variable nil (reparse-symbol indented_block_body) [15960 16018])
                            ("if" code nil (reparse-symbol indented_block_body) [16027 16195])
                            ("self" variable nil (reparse-symbol indented_block_body) [16204 16225])
                            ("self" variable nil (reparse-symbol indented_block_body) [16234 16261])
                            ("self" variable nil (reparse-symbol indented_block_body) [16271 16359]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15894 15898]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15881 16360])
                    ("printtime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16384 16388]))                          
                        :documentation "Return a string representing the current time in the form::

           Mon dd hh:mm:ss

        :return: a string representing the current time
        ")
                        (reparse-symbol indented_block_body) [16370 16880])
                    ("failureReport" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16912 16916])
                            ("errobj" variable nil (reparse-symbol function_parameters) [16918 16924]))                          
                        :documentation "Perform failure output for failovers from urlgrabber

        :param errobj: :class:`urlgrabber.grabber.CallbackObject`
           containing information about the error
        :raises: *errobj*.exception
        ")
                        (reparse-symbol indented_block_body) [16894 17741])
                    ("suggestKBaseArticle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17774 17778])
                            ("errobj" variable nil (reparse-symbol function_parameters) [17780 17786]))                          )
                        (reparse-symbol indented_block_body) [17750 18317])
                    ("simpleProgressBar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18357 18361])
                            ("current" variable nil (reparse-symbol function_parameters) [18363 18370])
                            ("total" variable nil (reparse-symbol function_parameters) [18372 18377])
                            ("name" variable nil (reparse-symbol function_parameters) [18379 18383]))                          
                        :documentation "Output the current status to the terminal using a simple
        status bar.

        :param current: a number representing the amount of work
           already done
        :param total: a number representing the total amount of work
           to be done
        :param name: a name to label the progress bar with
        ")
                        (reparse-symbol indented_block_body) [18335 18773])
                    ("_highlight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18793 18797])
                            ("highlight" variable nil (reparse-symbol function_parameters) [18799 18808]))                          )
                        (reparse-symbol indented_block_body) [18778 19939])
                    ("_sub_highlight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19963 19967])
                            ("haystack" variable nil (reparse-symbol function_parameters) [19969 19977])
                            ("highlight" variable nil (reparse-symbol function_parameters) [19979 19988])
                            ("needles" variable nil (reparse-symbol function_parameters) [19990 19997])
                            ("kwds" variable nil (reparse-symbol function_parameters) [19999 20005]))                          )
                        (reparse-symbol indented_block_body) [19944 20128])
                    ("_calc_columns_spaces_helps" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("current" variable nil (reparse-symbol function_parameters) [20182 20189])
                            ("data_tups" variable nil (reparse-symbol function_parameters) [20191 20200])
                            ("left" variable nil (reparse-symbol function_parameters) [20202 20206]))                          
                        :documentation " Spaces left on the current field will help how many pkgs? ")
                        (reparse-symbol indented_block_body) [20133 20438])
                    ("calcColumns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20459 20463])
                            ("data" variable nil (reparse-symbol function_parameters) [20465 20469])
                            ("columns" variable nil (reparse-symbol function_parameters) [20471 20478])
                            ("remainder_column" variable nil (reparse-symbol function_parameters) [20485 20501])
                            ("total_width" variable nil (reparse-symbol function_parameters) [20525 20536])
                            ("indent" variable nil (reparse-symbol function_parameters) [20543 20549]))                          
                        :documentation "Dynamically calculate the widths of the columns that the
        fields in data should be placed into for output.
        
        :param data: a list of dictionaries that represent the data to
           be output.  Each dictionary in the list corresponds to a
           column of output. The keys of the dictionary are the
           lengths of the items to be output, and the value associated
           with a key is the number of items of that length.
        :param columns: a list containing the minimum amount of space
           that must be allocated for each row. This can be used to
           ensure that there is space available in a column if, for
           example, the actual lengths of the items being output
           cannot be given in *data*
        :param remainder_column: number of the column to receive a few
           extra spaces that may remain after other allocation has
           taken place
        :param total_width: the total width of the output.
           self.term.columns is used by default
        :param indent: string that will be prefixed to a line of
           output to create e.g. an indent
        :return: a list of the widths of the columns that the fields
           in data should be placed into for output
        ")
                        (reparse-symbol indented_block_body) [20443 25273])
                    ("_fmt_column_align_width" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("width" variable nil (reparse-symbol function_parameters) [25324 25329]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25278 25416])
                    ("_col_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25435 25439])
                            ("col_data" variable nil (reparse-symbol function_parameters) [25441 25449]))                          )
                        (reparse-symbol indented_block_body) [25421 25782])
                    ("fmtColumns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25802 25806])
                            ("columns" variable nil (reparse-symbol function_parameters) [25808 25815])
                            ("msg" variable nil (reparse-symbol function_parameters) [25817 25820])
                            ("end" variable nil (reparse-symbol function_parameters) [25826 25829])
                            ("text_width" variable nil (reparse-symbol function_parameters) [25835 25845]))                          
                        :documentation "Return a row of data formatted into a string for output.
        Items can overflow their columns. 

        :param columns: a list of tuples containing the data to
           output.  Each tuple contains first the item to be output,
           then the amount of space allocated for the column, and then
           optionally a type of highlighting for the item
        :param msg: a string to begin the line of output with
        :param end: a string to end the line of output with
        :param text_width: a function to find the width of the items
           in the columns.  This defaults to utf8 but can be changed
           to len() if you know it'll be fine
        :return: a row of data formatted into a string for output
        ")
                        (reparse-symbol indented_block_body) [25787 28034])
                    ("simpleList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28054 28058])
                            ("pkg" variable nil (reparse-symbol function_parameters) [28060 28063])
                            ("ui_overflow" variable nil (reparse-symbol function_parameters) [28065 28076])
                            ("indent" variable nil (reparse-symbol function_parameters) [28084 28090])
                            ("highlight" variable nil (reparse-symbol function_parameters) [28095 28104])
                            ("columns" variable nil (reparse-symbol function_parameters) [28131 28138]))                          
                        :documentation "Print a package as a line.

        :param pkg: the package to be printed
        :param ui_overflow: unused
        :param indent: string to be prefixed onto the line to provide
           e.g. an indent
        :param highlight: highlighting options for the name of the
           package
        :param colums: tuple containing the space allocated for each
           column of output.  The columns are the package name, version,
           and repository
        ")
                        (reparse-symbol indented_block_body) [28039 28983])
                    ("simpleEnvraList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29008 29012])
                            ("pkg" variable nil (reparse-symbol function_parameters) [29014 29017])
                            ("ui_overflow" variable nil (reparse-symbol function_parameters) [29019 29030])
                            ("indent" variable nil (reparse-symbol function_parameters) [29062 29068])
                            ("highlight" variable nil (reparse-symbol function_parameters) [29073 29082])
                            ("columns" variable nil (reparse-symbol function_parameters) [29090 29097]))                          
                        :documentation "Print a package as a line, with the package itself in envra
        format so it can be passed to list/install/etc. 

        :param pkg: the package to be printed
        :param ui_overflow: unused
        :param indent: string to be prefixed onto the line to provide
           e.g. an indent
        :param highlight: highlighting options for the name of the
           package
        :param colums: tuple containing the space allocated for each
           column of output.  The columns the are the package envra and
           repository
        ")
                        (reparse-symbol indented_block_body) [28988 29981])
                    ("fmtKeyValFill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30004 30008])
                            ("key" variable nil (reparse-symbol function_parameters) [30010 30013])
                            ("val" variable nil (reparse-symbol function_parameters) [30015 30018]))                          
                        :documentation "Return a key value pair in the common two column output
        format.

        :param key: the key to be formatted
        :param val: the value associated with *key*
        :return: the key value pair formatted in two columns for output
        ")
                        (reparse-symbol indented_block_body) [29986 30849])
                    ("fmtSection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30873 30877])
                            ("name" variable nil (reparse-symbol function_parameters) [30879 30883])
                            ("fill" variable nil (reparse-symbol function_parameters) [30885 30889]))                          
                        :documentation "Format and return a section header.  The format of the
        header is a line with *name* centred, and *fill* repeated on
        either side to fill an entire line on the terminal.

        :param name: the name of the section
        :param fill: the character to repeat on either side of *name*
          to fill an entire line.  *fill* must be a single character.
        :return: a string formatted to be a section header
        ")
                        (reparse-symbol indented_block_body) [30858 31680])
                    ("_enc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31694 31698])
                            ("s" variable nil (reparse-symbol function_parameters) [31700 31701]))                          
                        :documentation "Get the translated version from specspo and ensure that
        it's actually encoded in UTF-8.")
                        (reparse-symbol indented_block_body) [31685 32050])
                    ("infoOutput" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32070 32074])
                            ("pkg" variable nil (reparse-symbol function_parameters) [32076 32079])
                            ("highlight" variable nil (reparse-symbol function_parameters) [32081 32090]))                          
                        :documentation "Print information about the given package.

        :param pkg: the package to print information about 
        :param hightlight: highlighting options for the name of the
           package
        ")
                        (reparse-symbol indented_block_body) [32055 34450])
                    ("updatesObsoletesList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34484 34488])
                            ("uotup" variable nil (reparse-symbol function_parameters) [34490 34495])
                            ("changetype" variable nil (reparse-symbol function_parameters) [34497 34507])
                            ("columns" variable nil (reparse-symbol function_parameters) [34509 34516])
                            ("repoid" variable nil (reparse-symbol function_parameters) [34523 34529]))                          
                        :documentation "Print a simple string that explains the relationship
        between the members of an update or obsoletes tuple.

        :param uotup: an update or obsoletes tuple.  The first member
           is the new package, and the second member is the old
           package
        :param changetype: a string indicating what the change between
           the packages is, e.g. 'updates' or 'obsoletes'
        :param columns: a tuple containing information about how to
           format the columns of output.  The absolute value of each
           number in the tuple indicates how much space has been
           allocated for the corresponding column.  If the number is
           negative, the text in the column will be left justified,
           and if it is positive, the text will be right justified.
           The columns of output are the package name, version, and repository
        :param repoid: a repoid that the new package should belong to
        ")
                        (reparse-symbol indented_block_body) [34459 36394])
                    ("listPkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36412 36416])
                            ("lst" variable nil (reparse-symbol function_parameters) [36418 36421])
                            ("description" variable nil (reparse-symbol function_parameters) [36423 36434])
                            ("outputType" variable nil (reparse-symbol function_parameters) [36436 36446])
                            ("highlight_na" variable nil (reparse-symbol function_parameters) [36448 36460])
                            ("columns" variable nil (reparse-symbol function_parameters) [36482 36489])
                            ("highlight_modes" variable nil (reparse-symbol function_parameters) [36496 36511]))                          
                        :documentation "Prints information about the given list of packages.

        :param lst: a list of packages to print information about
        :param description: string describing what the list of
           packages contains, e.g. 'Available Packages'
        :param outputType: The type of information to be printed.
           Current options::
           
              'list' - simple pkg list
              'info' - similar to rpm -qi output
        :param highlight_na: a dictionary containing information about
              packages that should be highlighted in the output.  The
              dictionary keys are (name, arch) tuples for the package,
              and the associated values are the package objects
              themselves.
        :param columns: a tuple containing information about how to
           format the columns of output.  The absolute value of each
           number in the tuple indicates how much space has been
           allocated for the corresponding column.  If the number is
           negative, the text in the column will be left justified,
           and if it is positive, the text will be right justified.
           The columns of output are the package name, version, and
           repository
        :param highlight_modes: dictionary containing information
              about to highlight the packages in *highlight_na*.
              *highlight_modes* should contain the following keys::
                 
                 'not_in' - highlighting used for packages not in *highlight_na*
                 '=' - highlighting used when the package versions are equal
                 '<' - highlighting used when the package has a lower version number
                 '>' - highlighting used when the package has a higher version number
        :return: (exit_code, [errors])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
        ")
                        (reparse-symbol indented_block_body) [36399 39909])
                    ("userconfirm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39938 39942])
                            ("prompt" variable nil (reparse-symbol function_parameters) [39944 39950])
                            ("extra" variable nil (reparse-symbol function_parameters) [39976 39981]))                          
                        :documentation "Get a yes or no from the user, and default to No, and maybe more.

        :param extra: a dict of ui responses to a list of their inputs.
        :return: the UI response or None for no. At it's simplest this is 'yes' or None
        ")
                        (reparse-symbol indented_block_body) [39922 41245])
                    ("_cli_confirm_gpg_key_import" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41286 41290])
                            ("keydict" variable nil (reparse-symbol function_parameters) [41292 41299]))                          )
                        (reparse-symbol indented_block_body) [41254 41385])
                    ("_group_names2aipkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41414 41418])
                            ("pkg_names" variable nil (reparse-symbol function_parameters) [41420 41429]))                          
                        :documentation " Convert pkg_names to installed pkgs or available pkgs, return
            value is a dict on pkg.name returning (apkg, ipkg). ")
                        (reparse-symbol indented_block_body) [41390 42371])
                    ("_calcDataPkgColumns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42400 42404])
                            ("data" variable nil (reparse-symbol function_parameters) [42406 42410])
                            ("pkg_names" variable nil (reparse-symbol function_parameters) [42412 42421])
                            ("pkg_names2pkgs" variable nil (reparse-symbol function_parameters) [42423 42437])
                            ("indent" variable nil (reparse-symbol function_parameters) [42467 42473])
                            ("igroup_data" variable nil (reparse-symbol function_parameters) [42481 42492]))                          )
                        (reparse-symbol indented_block_body) [42376 43006])
                    ("_displayPkgsFromNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43037 43041])
                            ("pkg_names" variable nil (reparse-symbol function_parameters) [43043 43052])
                            ("verbose" variable nil (reparse-symbol function_parameters) [43054 43061])
                            ("pkg_names2pkgs" variable nil (reparse-symbol function_parameters) [43063 43077])
                            ("indent" variable nil (reparse-symbol function_parameters) [43109 43115])
                            ("columns" variable nil (reparse-symbol function_parameters) [43123 43130])
                            ("igroup_data" variable nil (reparse-symbol function_parameters) [43137 43148]))                          )
                        (reparse-symbol indented_block_body) [43011 45242])
                    ("displayPkgsInGroups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45275 45279])
                            ("group" variable nil (reparse-symbol function_parameters) [45281 45286]))                          
                        :documentation "Output information about the packages in a given group
        
        :param group: a Group object to output information about
        ")
                        (reparse-symbol indented_block_body) [45251 48328])
                    ("displayGrpsInEnvironments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48363 48367])
                            ("evgroup" variable nil (reparse-symbol function_parameters) [48369 48376]))                          
                        :documentation "Output information about the groups in a given evgroup

        :param group: an Environment object to output information about
        ")
                        (reparse-symbol indented_block_body) [48333 50664])
                    ("depListOutput" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50687 50691])
                            ("results" variable nil (reparse-symbol function_parameters) [50693 50700]))                          
                        :documentation "Format and output a list of findDeps results

        :param results: a list of package dependency information as
           returned by findDeps
        ")
                        (reparse-symbol indented_block_body) [50669 51764])
                    ("format_number" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51787 51791])
                            ("number" variable nil (reparse-symbol function_parameters) [51793 51799])
                            ("SI" variable nil (reparse-symbol function_parameters) [51801 51803])
                            ("space" variable nil (reparse-symbol function_parameters) [51807 51812]))                          
                        :documentation "Return a human-readable metric-like string representation
        of a number.

        :param number: the number to be converted to a human-readable form
        :param SI: If is 0, this function will use the convention
           that 1 kilobyte = 1024 bytes, otherwise, the convention
           that 1 kilobyte = 1000 bytes will be used
        :param space: string that will be placed between the number
           and the SI prefix
        :return: a human-readable metric-like string representation of
           *number*
        ")
                        (reparse-symbol indented_block_body) [51769 53558])
                    ("format_time" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("seconds" variable nil (reparse-symbol function_parameters) [53597 53604])
                            ("use_hours" variable nil (reparse-symbol function_parameters) [53606 53615]))                          
                        :documentation "Return a human-readable string representation of a number
        of seconds.  The string will show seconds, minutes, and
        optionally hours.

        :param seconds: the number of seconds to convert to a
           human-readable form
        :param use_hours: If use_hours is 0, the representation will
           be in minutes and seconds. Otherwise, it will be in hours,
           minutes, and seconds
        :return: a human-readable string representation of *seconds*
        ")
                        (reparse-symbol indented_block_body) [53563 54192])
                    ("matchcallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54215 54219])
                            ("po" variable nil (reparse-symbol function_parameters) [54221 54223])
                            ("values" variable nil (reparse-symbol function_parameters) [54225 54231])
                            ("matchfor" variable nil (reparse-symbol function_parameters) [54233 54241])
                            ("verbose" variable nil (reparse-symbol function_parameters) [54248 54255])
                            ("highlight" variable nil (reparse-symbol function_parameters) [54284 54293]))                          
                        :documentation "Output search/provides type callback matches.

        :param po: the package object that matched the search
        :param values: the information associated with *po* that
           matched the search
        :param matchfor: a list of strings to be highlighted in the
           output
        :param verbose: whether to output extra verbose information
        :param highlight: highlighting options for the highlighted matches
        ")
                        (reparse-symbol indented_block_body) [54197 57313])
                    ("matchcallback_verbose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57344 57348])
                            ("po" variable nil (reparse-symbol function_parameters) [57350 57352])
                            ("values" variable nil (reparse-symbol function_parameters) [57354 57360])
                            ("matchfor" variable nil (reparse-symbol function_parameters) [57362 57370]))                          
                        :documentation "Output search/provides type callback matches.  This will
        output more information than :func:`matchcallback`.

        :param po: the package object that matched the search
        :param values: the information associated with *po* that
           matched the search
        :param matchfor: a list of strings to be highlighted in the
           output
        ")
                        (reparse-symbol indented_block_body) [57318 57832])
                    ("reportDownloadSize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57868 57872])
                            ("packages" variable nil (reparse-symbol function_parameters) [57874 57882])
                            ("installonly" variable nil (reparse-symbol function_parameters) [57884 57895]))                          
                        :documentation "Report the total download size for a set of packages
        
        :param packages: a list of package objects
        :param installonly: whether the transaction consists only of installations
        ")
                        (reparse-symbol indented_block_body) [57845 59712])
                    ("reportRemoveSize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59738 59742])
                            ("packages" variable nil (reparse-symbol function_parameters) [59744 59752]))                          
                        :documentation "Report the total size of packages being removed.

        :param packages: a list of package objects
        ")
                        (reparse-symbol indented_block_body) [59717 60894])
                    ("listTransaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60931 60935]))                          
                        :documentation "Return a string representation of the transaction in an
        easy-to-read format.
        ")
                        (reparse-symbol indented_block_body) [60911 69242])
                    ("postTransactionOutput" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69281 69285]))                          
                        :documentation "Returns a human-readable summary of the results of the
        transaction.
        
        :return: a string containing a human-readable summary of the
           results of the transaction
        ")
                        (reparse-symbol indented_block_body) [69255 72047])
                    ("setupProgressCallbacks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72079 72083]))                          
                        :documentation "Set up the progress callbacks and various 
           output bars based on debug level.
        ")
                        (reparse-symbol indented_block_body) [72052 73775])
                    ("setupProgessCallbacks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73810 73814]))                          
                        :documentation "This function is for API purposes only to protect the typo.")
                        (reparse-symbol indented_block_body) [73784 73929])
                    ("setupKeyImportCallbacks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73966 73970]))                          
                        :documentation "Set up callbacks to import and confirm gpg public keys.")
                        (reparse-symbol indented_block_body) [73938 74605])
                    ("interrupt_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74633 74637])
                            ("cbobj" variable nil (reparse-symbol function_parameters) [74639 74644]))                          )
                        (reparse-symbol indented_block_body) [74610 75936])
                    ("download_callback_total_cb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75972 75976])
                            ("remote_pkgs" variable nil (reparse-symbol function_parameters) [75978 75989])
                            ("remote_size" variable nil (reparse-symbol function_parameters) [75991 76002])
                            ("download_start_timestamp" variable nil (reparse-symbol function_parameters) [76039 76063]))                          
                        :documentation "Outputs summary information about the download process.

        :param remote_pkgs: a list of package objects that were downloaded
        :param remote_size: the total amount of information that was
           downloaded, in bytes
        :param download_start_timestamp: the time when the download
           process started, in seconds since the epoch
        ")
                        (reparse-symbol indented_block_body) [75941 77321])
                    ("_history_uiactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77349 77353])
                            ("hpkgs" variable nil (reparse-symbol function_parameters) [77355 77360]))                          )
                        (reparse-symbol indented_block_body) [77326 78598])
                    ("_pwd_ui_username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78624 78628])
                            ("uid" variable nil (reparse-symbol function_parameters) [78630 78633])
                            ("limit" variable nil (reparse-symbol function_parameters) [78635 78640]))                          )
                        (reparse-symbol indented_block_body) [78603 79933])
                    ("_historyRangeRTIDs" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("old" variable nil (reparse-symbol function_parameters) [79979 79982])
                            ("tid" variable nil (reparse-symbol function_parameters) [79984 79987]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [79938 81025])
                    ("_historyRangeTIDs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81052 81056])
                            ("rtids" variable nil (reparse-symbol function_parameters) [81058 81063]))                          )
                        (reparse-symbol indented_block_body) [81030 81647])
                    ("_history_list_transactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81683 81687])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [81689 81696]))                          )
                        (reparse-symbol indented_block_body) [81652 82640])
                    ("historyListCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82664 82668])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [82670 82677]))                          
                        :documentation "Output a list of information about the history of yum
        transactions.

        :param extcmds: list of extra command line arguments
        :return: (exit_code, [errors])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
        ")
                        (reparse-symbol indented_block_body) [82645 86197])
                    ("_history_get_transactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86232 86236])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [86238 86245]))                          )
                        (reparse-symbol indented_block_body) [86202 87478])
                    ("_history_get_transaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87511 87515])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [87517 87524]))                          )
                        (reparse-symbol indented_block_body) [87482 87751])
                    ("historyInfoCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87775 87779])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [87781 87788]))                          
                        :documentation "Output information about a transaction in history

        :param extcmds: list of extra command line arguments
        :return: (exit_code, [errors])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
        ")
                        (reparse-symbol indented_block_body) [87756 90983])
                    ("_hpkg2from_repo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91008 91012])
                            ("hpkg" variable nil (reparse-symbol function_parameters) [91014 91018]))                          
                        :documentation " Given a pkg, find the ipkg.ui_from_repo ... if none, then
            get an apkg. ... and put a ? in there. ")
                        (reparse-symbol indented_block_body) [90988 91503])
                    ("_historyInfoCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91528 91532])
                            ("old" variable nil (reparse-symbol function_parameters) [91534 91537])
                            ("pats" variable nil (reparse-symbol function_parameters) [91539 91543]))                          )
                        (reparse-symbol indented_block_body) [91508 98392])
                    ("_history_state2uistate" variable nil (reparse-symbol indented_block_body) [98397 99108])
                    ("historyInfoCmdPkgsAltered" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99143 99147])
                            ("old" variable nil (reparse-symbol function_parameters) [99149 99152])
                            ("pats" variable nil (reparse-symbol function_parameters) [99154 99158]))                          
                        :documentation "Print information about how packages are altered in a transaction.

        :param old: the :class:`history.YumHistoryTransaction` to
           print information about
        :param pats: a list of patterns.  Packages that match a patten
           in *pats* will be highlighted in the output
        ")
                        (reparse-symbol indented_block_body) [99113 101611])
                    ("historySummaryCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101638 101642])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [101644 101651]))                          
                        :documentation "Print a summary of transactions in history.

        :param extcmds: list of extra command line arguments
        ")
                        (reparse-symbol indented_block_body) [101616 104478])
                    ("historyAddonInfoCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104507 104511])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [104513 104520]))                          
                        :documentation "Print addon information about transaction in history.

        :param extcmds: list of extra command line arguments
        ")
                        (reparse-symbol indented_block_body) [104483 106391])
                    ("historyPackageListCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106422 106426])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [106428 106435]))                          
                        :documentation "Print a list of information about transactions from history
        that involve the given package or packages.

        :param extcmds: list of extra command line arguments
        ")
                        (reparse-symbol indented_block_body) [106396 109982])
                    ("historyPackageInfoCmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110013 110017])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [110019 110026]))                          
                        :documentation "Print information about packages in history transactions.

        :param extcmds: list of extra command line arguments
        ")
                        (reparse-symbol indented_block_body) [109987 113890])
                    ("pretty_output_restring" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("restring" variable nil (reparse-symbol function_parameters) [113940 113948]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [113895 114137]))                  
                :type "class")
                nil [15805 114137])
            ("DepSolveProgressCallBack" type
               (:documentation "A class to provide text output callback functions for Dependency Solver callback."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"requires yum-cli log and errorlog functions as arguments\"\"\"" code nil (reparse-symbol indented_block_body) [114311 114373])
                            ("self" variable nil (reparse-symbol indented_block_body) [114382 114440])
                            ("self" variable nil (reparse-symbol indented_block_body) [114449 114463])
                            ("self" variable nil (reparse-symbol indented_block_body) [114472 114488]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114285 114289])
                            ("ayum" variable nil (reparse-symbol function_parameters) [114291 114295]))                          
                        :documentation "requires yum-cli log and errorlog functions as arguments"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [114272 114489])
                    ("pkgAdded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114507 114511])
                            ("pkgtup" variable nil (reparse-symbol function_parameters) [114513 114519])
                            ("mode" variable nil (reparse-symbol function_parameters) [114521 114525]))                          
                        :documentation "Print information about a package being added to the
        transaction set.

        :param pkgtup: tuple containing the package name, arch,
           version, and repository
        :param mode: a short string indicating why the package is
           being added to the transaction set.

        Valid current values for *mode* are::
        
           i = the package will be installed
           u = the package will be an update
           e = the package will be erased
           r = the package will be reinstalled
           d = the package will be a downgrade
           o = the package will be obsoleting another package
           ud = the package will be updated
           od = the package will be obsoleted
        ")
                        (reparse-symbol indented_block_body) [114494 115830])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115853 115857]))                          
                        :documentation "Perform setup at the beginning of the dependency solving
        process.
        ")
                        (reparse-symbol indented_block_body) [115843 115981])
                    ("tscheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116006 116010]))                          
                        :documentation "Output a message stating that a transaction check is beginning.")
                        (reparse-symbol indented_block_body) [115994 116181])
                    ("restartLoop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116210 116214]))                          
                        :documentation "Output a message stating that dependency resolution is restarting.")
                        (reparse-symbol indented_block_body) [116194 116519])
                    ("end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116536 116540]))                          
                        :documentation "Output a message stating that dependency resolution has finished.")
                        (reparse-symbol indented_block_body) [116528 116730])
                    ("procReq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116752 116756])
                            ("name" variable nil (reparse-symbol function_parameters) [116758 116762])
                            ("formatted_req" variable nil (reparse-symbol function_parameters) [116764 116777]))                          
                        :documentation "Output a message stating that the package *formatted_req*
        is being processed as a dependency for the package *name*.

        :param name: the name of the package that *formatted_req* is a
           dependency of
        :param formatted_req: a string representing the package that
           is being processed as a dependency of *name*
        ")
                        (reparse-symbol indented_block_body) [116740 117301])
                    ("procReqPo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117320 117324])
                            ("po" variable nil (reparse-symbol function_parameters) [117326 117328])
                            ("formatted_req" variable nil (reparse-symbol function_parameters) [117330 117343]))                          
                        :documentation "Output a message stating that the package *formatted_req*
        is being processed as a dependency for the package *po*.

        :param po: the package object that *formatted_req* is a
           dependency of
        :param formatted_req: a string representing the package that
           is being processed as a dependency of *po*
        ")
                        (reparse-symbol indented_block_body) [117306 117854])
                    ("removeReq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117877 117881])
                            ("po" variable nil (reparse-symbol function_parameters) [117883 117885])
                            ("deppo" variable nil (reparse-symbol function_parameters) [117887 117892])
                            ("hits" variable nil (reparse-symbol function_parameters) [117894 117898]))                          
                        :documentation "Output a message stating that the given package will not be
        removed. This method is used during leaf-only group remove, leaf-only
        repo-pkg remove and normal remove commands to indicate that the
        package will be kept.

        :param po: the :class:`yum.packages.PackageObject` that will
           not be removed
        :param hits: unused
        ")
                        (reparse-symbol indented_block_body) [117863 118406])
                    ("unresolved" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118426 118430])
                            ("msg" variable nil (reparse-symbol function_parameters) [118432 118435]))                          
                        :documentation "Output a message stating that there is an unresolved
        dependency.

        :param msg: string giving information about the unresolved
        dependency
        ")
                        (reparse-symbol indented_block_body) [118411 118728])
                    ("format_missing_requires" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118761 118765])
                            ("reqPo" variable nil (reparse-symbol function_parameters) [118767 118772])
                            ("reqTup" variable nil (reparse-symbol function_parameters) [118774 118780]))                          
                        :documentation "Return an error message stating that a package required to
        fulfill a dependency is missing.

        :param reqPo: the package object that has a dependency that
           cannot be fulfilled
        :param reqTup: the name, flags, and version of the package
           needed to fulfil the dependency
        ")
                        (reparse-symbol indented_block_body) [118733 123256])
                    ("procConflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123282 123286])
                            ("name" variable nil (reparse-symbol function_parameters) [123288 123292])
                            ("confname" variable nil (reparse-symbol function_parameters) [123294 123302]))                          
                        :documentation "Print a message stating that two packages in the
        transaction conflict.

        :param name: the name of the first package involved in the
           conflict 
        :param confname: the name of the second package involved in
           the conflict
        ")
                        (reparse-symbol indented_block_body) [123265 123749])
                    ("procConflictPo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123773 123777])
                            ("po" variable nil (reparse-symbol function_parameters) [123779 123781])
                            ("confname" variable nil (reparse-symbol function_parameters) [123783 123791]))                          
                        :documentation "Print a message stating that two packages in the
        transaction conflict.

        :param name: the first package object involved in the
           conflict 
        :param confname: the second package object involved in
           the conflict
        ")
                        (reparse-symbol indented_block_body) [123754 124226])
                    ("transactionPopulation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124257 124261]))                          
                        :documentation "Output a message stating that the transaction set is being populated.")
                        (reparse-symbol indented_block_body) [124231 124492])
                    ("downloadHeader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124520 124524])
                            ("name" variable nil (reparse-symbol function_parameters) [124526 124530]))                          
                        :documentation "Output a message stating that the header for the given
        package is being downloaded.

        :param name: the name of the package
        ")
                        (reparse-symbol indented_block_body) [124501 124836]))                  
                :type "class")
                nil [114139 124836])
            ("CacheProgressCallback" type
               (:documentation "A class to handle text output callbacks during metadata cache updates."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [124988 125030])
                            ("self" variable nil (reparse-symbol indented_block_body) [125039 125097])
                            ("self" variable nil (reparse-symbol indented_block_body) [125106 125165]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124973 124977]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [124960 125166])
                    ("log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125179 125183])
                            ("level" variable nil (reparse-symbol function_parameters) [125185 125190])
                            ("message" variable nil (reparse-symbol function_parameters) [125192 125199]))                          
                        :documentation "Output a log message.

        :param level: the logging level for the message
        :param message: the message
        ")
                        (reparse-symbol indented_block_body) [125171 125388])
                    ("errorlog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125406 125410])
                            ("level" variable nil (reparse-symbol function_parameters) [125412 125417])
                            ("message" variable nil (reparse-symbol function_parameters) [125419 125426]))                          
                        :documentation "Output an errorlog message.

        :param level: the logging level for the message
        :param message: the message
        ")
                        (reparse-symbol indented_block_body) [125393 125613])
                    ("filelog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125630 125634])
                            ("level" variable nil (reparse-symbol function_parameters) [125636 125641])
                            ("message" variable nil (reparse-symbol function_parameters) [125643 125650]))                          
                        :documentation "Output a file log message.

        :param level: the logging level for the message
        :param message: the message
        ")
                        (reparse-symbol indented_block_body) [125618 125841])
                    ("progressbar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125862 125866])
                            ("current" variable nil (reparse-symbol function_parameters) [125868 125875])
                            ("total" variable nil (reparse-symbol function_parameters) [125877 125882])
                            ("name" variable nil (reparse-symbol function_parameters) [125884 125888]))                          
                        :documentation "Output the current status to the terminal using a progress
        status bar.

        :param current: a number representing the amount of work
           already done
        :param total: a number representing the total amount of work
           to be done
        :param name: a name to label the progress bar with
        ")
                        (reparse-symbol indented_block_body) [125846 126939]))                  
                :type "class")
                nil [124845 126939])
            ("_pkgname_ui" function
               (:documentation " Get more information on a simple pkgname, if we can. We need to search
        packages that we are dealing with atm. and installed packages (if the
        transaction isn't complete). "
                :arguments 
                  ( ("ayum" variable nil (reparse-symbol function_parameters) [126956 126960])
                    ("pkgname" variable nil (reparse-symbol function_parameters) [126962 126969])
                    ("ts_states" variable nil (reparse-symbol function_parameters) [126971 126980]))                  )
                nil [126940 128453])
            ("YumCliRPMCallBack" type
               (:documentation "A Yum specific callback class for RPM operations."
                :superclasses ("RPMBaseCallback")
                :members 
                  ( ("width" variable nil (reparse-symbol indented_block_body) [128561 128602])
                    ("__init__" function
                       (:suite 
                          ( ("RPMBaseCallback" code nil (reparse-symbol indented_block_body) [128647 128677])
                            ("self" variable nil (reparse-symbol indented_block_body) [128686 128715])
                            ("self" variable nil (reparse-symbol indented_block_body) [128724 128747])
                            ("self" variable nil (reparse-symbol indented_block_body) [128792 128877])
                            ("self" variable nil (reparse-symbol indented_block_body) [128924 128939])
                            ("self" variable nil (reparse-symbol indented_block_body) [128948 128963])
                            ("self" variable nil (reparse-symbol indented_block_body) [128972 128988]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [128621 128625])
                            ("ayum" variable nil (reparse-symbol function_parameters) [128627 128631]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [128608 128989])
                    ("pkgname_ui" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129124 129128])
                            ("pkgname" variable nil (reparse-symbol function_parameters) [129130 129137])
                            ("ts_states" variable nil (reparse-symbol function_parameters) [129139 129148]))                          
                        :documentation "Return more information on a simple pkgname, if possible.

        :param pkgname: the name of the package to find information about
        :param ts_states: a tuple containing the states where the
           package might be found
        ")
                        (reparse-symbol indented_block_body) [129109 129489])
                    ("event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129504 129508])
                            ("package" variable nil (reparse-symbol function_parameters) [129510 129517])
                            ("action" variable nil (reparse-symbol function_parameters) [129519 129525])
                            ("te_current" variable nil (reparse-symbol function_parameters) [129527 129537])
                            ("te_total" variable nil (reparse-symbol function_parameters) [129539 129547])
                            ("ts_current" variable nil (reparse-symbol function_parameters) [129549 129559])
                            ("ts_total" variable nil (reparse-symbol function_parameters) [129561 129569]))                          
                        :documentation "Output information about an rpm operation.  This may
        include a text progress bar.

        :param package: the package involved in the event
        :param action: the type of action that is taking place.  Valid
           values are given by
           :func:`rpmtrans.RPMBaseCallback.action.keys()`
        :param te_current: a number representing the amount of work
           already done in the current transaction
        :param te_total: a number representing the total amount of work
           to be done in the current transaction
        :param ts_current: the number of the current transaction in
           transaction set
        :param ts_total: the total number of transactions in the
           transaction set
        ")
                        (reparse-symbol indented_block_body) [129494 130832])
                    ("_max_action_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130859 130863]))                          )
                        (reparse-symbol indented_block_body) [130837 131207])
                    ("_out_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131227 131231])
                            ("te_current" variable nil (reparse-symbol function_parameters) [131233 131243])
                            ("te_total" variable nil (reparse-symbol function_parameters) [131245 131253])
                            ("ts_current" variable nil (reparse-symbol function_parameters) [131255 131265])
                            ("ts_total" variable nil (reparse-symbol function_parameters) [131267 131275])
                            ("percent" variable nil (reparse-symbol function_parameters) [131296 131303])
                            ("process" variable nil (reparse-symbol function_parameters) [131305 131312])
                            ("pkgname" variable nil (reparse-symbol function_parameters) [131314 131321])
                            ("wid1" variable nil (reparse-symbol function_parameters) [131323 131327]))                          )
                        (reparse-symbol indented_block_body) [131212 131980])
                    ("scriptout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131999 132003])
                            ("package" variable nil (reparse-symbol function_parameters) [132005 132012])
                            ("msgs" variable nil (reparse-symbol function_parameters) [132014 132018]))                          
                        :documentation "Print messages originating from a package script.

        :param package: unused
        :param msgs: the messages coming from the script
        ")
                        (reparse-symbol indented_block_body) [131985 132278])
                    ("_makefmt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132296 132300])
                            ("percent" variable nil (reparse-symbol function_parameters) [132302 132309])
                            ("ts_current" variable nil (reparse-symbol function_parameters) [132311 132321])
                            ("ts_total" variable nil (reparse-symbol function_parameters) [132323 132331])
                            ("progress" variable nil (reparse-symbol function_parameters) [132333 132341])
                            ("pkgname" variable nil (reparse-symbol function_parameters) [132367 132374])
                            ("wid1" variable nil (reparse-symbol function_parameters) [132381 132385]))                          )
                        (reparse-symbol indented_block_body) [132283 134055])
                    ("verify_txmbr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134077 134081])
                            ("base" variable nil (reparse-symbol function_parameters) [134083 134087])
                            ("txmbr" variable nil (reparse-symbol function_parameters) [134089 134094])
                            ("count" variable nil (reparse-symbol function_parameters) [134096 134101]))                          )
                        (reparse-symbol indented_block_body) [134060 134614]))                  
                :type "class")
                nil [128454 134614])
            ("progressbar" function
               (:documentation "Output the current status to the terminal using a simple
    text progress bar consisting of 50 # marks.

    :param current: a number representing the amount of work
       already done
    :param total: a number representing the total amount of work
       to be done
    :param name: a name to label the progress bar with
    "
                :arguments 
                  ( ("current" variable nil (reparse-symbol function_parameters) [134632 134639])
                    ("total" variable nil (reparse-symbol function_parameters) [134641 134646])
                    ("name" variable nil (reparse-symbol function_parameters) [134648 134652]))                  )
                nil [134616 136286])
            ("if" code nil nil [136296 139737]))          
      :file "output.py"
      :pointmax 139746
      :fsize 139745
      :lastmodtime '(23830 50338 444000 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A shell implementation for the yum command line interface.
\"\"\"" code nil nil [767 833])
            ("sys" include nil nil [835 845])
            ("cmd" include nil nil [846 856])
            ("shlex" include nil nil [857 869])
            ("logging" include nil nil [870 884])
            ("yum" include nil nil [886 908])
            ("yum.constants" include nil nil [909 936])
            ("yum.logginglevels" include nil nil [937 978])
            ("yum.i18n" include nil nil [979 1007])
            ("__builtin__" include nil nil [1008 1026])
            ("YumShell" type
               (:documentation "A class to implement an interactive yum shell."
                :superclasses ("cmd.Cmd")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("cmd" code nil (reparse-symbol indented_block_body) [1149 1171])
                            ("self" variable nil (reparse-symbol indented_block_body) [1180 1196])
                            ("self" variable nil (reparse-symbol indented_block_body) [1205 1223])
                            ("self" variable nil (reparse-symbol indented_block_body) [1232 1247])
                            ("self" variable nil (reparse-symbol indented_block_body) [1256 1278])
                            ("self" variable nil (reparse-symbol indented_block_body) [1287 1309])
                            ("self" variable nil (reparse-symbol indented_block_body) [1359 1394])
                            ("if" code nil (reparse-symbol indented_block_body) [1403 1471])
                            ("self" variable nil (reparse-symbol indented_block_body) [1479 1602])
                            ("self" code nil (reparse-symbol indented_block_body) [1628 1711])
                            ("self" variable nil (reparse-symbol indented_block_body) [1720 1762])
                            ("self" variable nil (reparse-symbol indented_block_body) [1771 1829])
                            ("self" variable nil (reparse-symbol indented_block_body) [1908 1937]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1128 1132])
                            ("base" variable nil (reparse-symbol function_parameters) [1134 1138]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1115 1938])
                    ("_shell_history_add_cmds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1971 1975])
                            ("cmds" variable nil (reparse-symbol function_parameters) [1977 1981]))                          )
                        (reparse-symbol indented_block_body) [1943 2096])
                    ("_shlex_split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2118 2122])
                            ("input_string" variable nil (reparse-symbol function_parameters) [2124 2136]))                          
                        :documentation "split the input using shlex rules, and error or exit accordingly")
                        (reparse-symbol indented_block_body) [2101 2664])
                    ("cmdloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2681 2685])
                            ("args" variable nil (reparse-symbol function_parameters) [2687 2692])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2694 2702]))                          
                        :documentation " Sick hack for readline. ")
                        (reparse-symbol indented_block_body) [2669 3300])
                    ("script" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3316 3320]))                          
                        :documentation "Execute a script file in the yum shell.  The location of
        the script file is supplied by the :class:`cli.YumBaseCli`
        object that is passed as a parameter to the :class:`YumShell`
        object when it is created.
        ")
                        (reparse-symbol indented_block_body) [3305 3904])
                    ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3933 3937])
                            ("line" variable nil (reparse-symbol function_parameters) [3939 3943]))                          
                        :documentation "Handle the next line of input if there is not a dedicated
        method of :class:`YumShell` to handle it.  This method will
        handle yum commands that are not unique to the shell, such as
        install, erase, etc.

        :param line: the next line of input
        ")
                        (reparse-symbol indented_block_body) [3921 5219])
                    ("emptyline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5242 5246]))                          
                        :documentation "Do nothing on an empty line of input.")
                        (reparse-symbol indented_block_body) [5228 5314])
                    ("completenames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5337 5341])
                            ("text" variable nil (reparse-symbol function_parameters) [5343 5347])
                            ("line" variable nil (reparse-symbol function_parameters) [5349 5353])
                            ("begidx" variable nil (reparse-symbol function_parameters) [5355 5361])
                            ("endidx" variable nil (reparse-symbol function_parameters) [5363 5369]))                          
                        :documentation "Return a list of possible completions of a command.

        :param text: the command to be completed
        :return: a list of possible completions of the command
        ")
                        (reparse-symbol indented_block_body) [5319 5800])
                    ("do_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5817 5821])
                            ("arg" variable nil (reparse-symbol function_parameters) [5823 5826]))                          
                        :documentation "Output help information.

        :param arg: the command to output help information about. If
           *arg* is an empty string, general help will be output.
        ")
                        (reparse-symbol indented_block_body) [5805 7302])
                    ("do_EOF" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7326 7330])
                            ("line" variable nil (reparse-symbol function_parameters) [7332 7336]))                          
                        :documentation "Exit the shell when EOF is reached.

        :param line: unused
        ")
                        (reparse-symbol indented_block_body) [7315 7474])
                    ("do_quit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7495 7499])
                            ("line" variable nil (reparse-symbol function_parameters) [7501 7505]))                          
                        :documentation "Exit the shell.

        :param line: unused
        ")
                        (reparse-symbol indented_block_body) [7483 7623])
                    ("do_exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7644 7648])
                            ("line" variable nil (reparse-symbol function_parameters) [7650 7654]))                          
                        :documentation "Exit the shell.

        :param line: unused
        ")
                        (reparse-symbol indented_block_body) [7632 7966])
                    ("do_ts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7985 7989])
                            ("line" variable nil (reparse-symbol function_parameters) [7991 7995]))                          
                        :documentation "Handle the ts alias of the :func:`do_transaction` method.

        :param line: the remainder of the line, containing the name of
           a subcommand.  If no subcommand is given, run the list subcommand.
        ")
                        (reparse-symbol indented_block_body) [7975 8263])
                    ("do_transaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8287 8291])
                            ("line" variable nil (reparse-symbol function_parameters) [8293 8297]))                          
                        :documentation "Execute the given transaction subcommand.  The list
        subcommand outputs the contents of the transaction, the reset
        subcommand clears the transaction, the solve subcommand solves
        dependencies for the transaction, and the run subcommand
        executes the transaction.

        :param line: the remainder of the line, containing the name of
           a subcommand.  If no subcommand is given, run the list subcommand.
        ")
                        (reparse-symbol indented_block_body) [8268 9788])
                    ("do_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9811 9815])
                            ("line" variable nil (reparse-symbol function_parameters) [9817 9821]))                          
                        :documentation "Configure yum shell options.
        
        :param line: the remainder of the line, containing an option,
           and then optionally a value in the form [option] [value].
           Valid options are one of the following: debuglevel,
           errorlevel, obsoletes, gpgcheck, assumeyes, exclude.  If no
           value is given, print the current value.  If a value is
           supplied, set the option to the given value.
        ")
                        (reparse-symbol indented_block_body) [9797 12644])
                    ("do_repository" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12667 12671])
                            ("line" variable nil (reparse-symbol function_parameters) [12673 12677]))                          
                        :documentation "Handle the repository alias of the :func:`do_repo` method.

        :param line: the remainder of the line, containing the name of
           a subcommand.
        ")
                        (reparse-symbol indented_block_body) [12649 12886])
                    ("do_repo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12911 12915])
                            ("line" variable nil (reparse-symbol function_parameters) [12917 12921]))                          
                        :documentation "Execute the given repo subcommand.  The list subcommand
        lists repositories and their statuses, the enable subcommand
        enables the given repository, and the disable subcommand
        disables the given repository.

        :param line: the remainder of the line, containing the name of
           a subcommand and other parameters if required.  If no
           subcommand is given, run the list subcommand.
        ")
                        (reparse-symbol indented_block_body) [12899 16009])
                    ("do_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16042 16046])
                            ("line" variable nil (reparse-symbol function_parameters) [16048 16052]))                          )
                        (reparse-symbol indented_block_body) [16030 16184])
                    ("do_run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16208 16212])
                            ("line" variable nil (reparse-symbol function_parameters) [16214 16218]))                          
                        :documentation "Run the transaction.

        :param line: unused
        ")
                        (reparse-symbol indented_block_body) [16197 17824]))                  
                :type "class")
                nil [1028 17824]))          
      :file "shell.py"
      :pointmax 17826
      :fsize 17825
      :lastmodtime '(23519 41652 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for subcommands of the yum command line interface.
\"\"\"" code nil nil [815 881])
            ("os" include nil nil [883 892])
            ("sys" include nil nil [893 903])
            ("cli" include nil nil [904 914])
            ("rpm" include nil nil [915 925])
            ("yum" include nil nil [926 955])
            ("yum" include nil nil [956 977])
            ("yum" include nil nil [978 998])
            ("yum.Errors" include nil nil [999 1016])
            ("operator" include nil nil [1017 1032])
            ("locale" include nil nil [1033 1046])
            ("fnmatch" include nil nil [1047 1061])
            ("time" include nil nil [1062 1073])
            ("yum.i18n" include nil nil [1074 1149])
            ("tempfile" include nil nil [1150 1165])
            ("shutil" include nil nil [1166 1179])
            ("distutils.spawn" include nil nil [1180 1202])
            ("glob" include nil nil [1203 1214])
            ("errno" include nil nil [1215 1227])
            ("yum.config" include nil nil [1229 1246])
            ("yum" include nil nil [1247 1273])
            ("yum.packages" include nil nil [1274 1312])
            ("yum.fssnapshots" include nil nil [1313 1364])
            ("_err_mini_usage" function (:arguments 
              ( ("base" variable nil (reparse-symbol function_parameters) [1386 1390])
                ("basecmd" variable nil (reparse-symbol function_parameters) [1392 1399]))              ) nil [1366 1657])
            ("checkRootUID" function
               (:documentation "Verify that the program is being run by the root user.

    :param base: a :class:`yum.Yumbase` object.
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [1675 1679]))                  )
                nil [1658 1970])
            ("checkGPGKey" function
               (:documentation "Verify that there are gpg keys for the enabled repositories in the
    rpm database.

    :param base: a :class:`yum.Yumbase` object.
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [1987 1991]))                  )
                nil [1971 3083])
            ("checkPackageArg" function
               (:documentation "Verify that *extcmds* contains the name of at least one package for
    *basecmd* to act on.

    :param base: a :class:`yum.Yumbase` object.
    :param basecmd: the name of the command being checked for
    :param extcmds: a list of arguments passed to *basecmd*
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [3104 3108])
                    ("basecmd" variable nil (reparse-symbol function_parameters) [3110 3117])
                    ("extcmds" variable nil (reparse-symbol function_parameters) [3119 3126]))                  )
                nil [3084 3638])
            ("checkSwapPackageArg" function
               (:documentation "Verify that *extcmds* contains the name of at least two packages for
    *basecmd* to act on.

    :param base: a :class:`yum.Yumbase` object.
    :param basecmd: the name of the command being checked for
    :param extcmds: a list of arguments passed to *basecmd*
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [3663 3667])
                    ("basecmd" variable nil (reparse-symbol function_parameters) [3669 3676])
                    ("extcmds" variable nil (reparse-symbol function_parameters) [3678 3685]))                  )
                nil [3639 4265])
            ("checkRepoPackageArg" function
               (:documentation "Verify that *extcmds* contains the name of at least one package for
    *basecmd* to act on.

    :param base: a :class:`yum.Yumbase` object.
    :param basecmd: the name of the command being checked for
    :param extcmds: a list of arguments passed to *basecmd*
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [4290 4294])
                    ("basecmd" variable nil (reparse-symbol function_parameters) [4296 4303])
                    ("extcmds" variable nil (reparse-symbol function_parameters) [4305 4312]))                  )
                nil [4266 5724])
            ("checkItemArg" function
               (:documentation "Verify that *extcmds* contains the name of at least one item for
    *basecmd* to act on.  Generally, the items are command-line
    arguments that are not the name of a package, such as a file name
    passed to provides.

    :param base: a :class:`yum.Yumbase` object.
    :param basecmd: the name of the command being checked for
    :param extcmds: a list of arguments passed to *basecmd*
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [5743 5747])
                    ("basecmd" variable nil (reparse-symbol function_parameters) [5749 5756])
                    ("extcmds" variable nil (reparse-symbol function_parameters) [5758 5765]))                  )
                nil [5726 6368])
            ("checkGroupArg" function
               (:documentation "Verify that *extcmds* contains the name of at least one group for
    *basecmd* to act on.

    :param base: a :class:`yum.Yumbase` object.
    :param basecmd: the name of the command being checked for
    :param extcmds: a list of arguments passed to *basecmd*
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [6387 6391])
                    ("basecmd" variable nil (reparse-symbol function_parameters) [6393 6400])
                    ("extcmds" variable nil (reparse-symbol function_parameters) [6402 6409]))                  )
                nil [6369 6893])
            ("checkCleanArg" function
               (:documentation "Verify that *extcmds* contains at least one argument, and that all
    arguments in *extcmds* are valid options for clean.

    :param base: a :class:`yum.Yumbase` object
    :param basecmd: the name of the command being checked for
    :param extcmds: a list of arguments passed to *basecmd*
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [6912 6916])
                    ("basecmd" variable nil (reparse-symbol function_parameters) [6918 6925])
                    ("extcmds" variable nil (reparse-symbol function_parameters) [6927 6934]))                  )
                nil [6894 7781])
            ("checkShellArg" function
               (:documentation "Verify that the arguments given to 'yum shell' are valid.  yum
    shell can be given either no argument, or exactly one argument,
    which is the name of a file.

    :param base: a :class:`yum.Yumbase` object.
    :param basecmd: the name of the command being checked for
    :param extcmds: a list of arguments passed to *basecmd*
    :raises: :class:`cli.CliError`
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [7800 7804])
                    ("basecmd" variable nil (reparse-symbol function_parameters) [7806 7813])
                    ("extcmds" variable nil (reparse-symbol function_parameters) [7815 7822]))                  )
                nil [7782 8832])
            ("checkEnabledRepo" function
               (:documentation "Verify that there is at least one enabled repo.

    :param base: a :class:`yum.Yumbase` object.
    :param basecmd: the name of the command being checked for
    :param extcmds: a list of arguments passed to *basecmd*
    :raises: :class:`cli.CliError`:
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [8854 8858])
                    ("possible_local_files" variable nil (reparse-symbol function_parameters) [8860 8880]))                  )
                nil [8833 9944])
            ("YumCommand" type
               (:documentation "An abstract base class that defines the methods needed by the cli
    to execute a specific command.  Subclasses must override at least
    :func:`getUsage` and :func:`getSummary`.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10192 10222])
                            ("self" variable nil (reparse-symbol indented_block_body) [10231 10250]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10177 10181]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10164 10251])
                    ("doneCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10272 10276])
                            ("base" variable nil (reparse-symbol function_parameters) [10278 10282])
                            ("msg" variable nil (reparse-symbol function_parameters) [10284 10287])
                            ("args" variable nil (reparse-symbol function_parameters) [10289 10294]))                          
                        :documentation " Output *msg* the first time that this method is called, and do
        nothing on subsequent calls.  This is to prevent duplicate
        messages from being printed for the same command.

        :param base: a :class:`yum.Yumbase` object
        :param msg: the message to be output
        :param *args: additional arguments associated with the message
        ")
                        (reparse-symbol indented_block_body) [10256 10825])
                    ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10843 10847]))                          
                        :documentation "Return a list of strings that are the names of the command.
        The command can be called from the command line by using any
        of these names.

        :return: a list containing the names of the command
        ")
                        (reparse-symbol indented_block_body) [10830 11105])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11123 11127]))                          
                        :documentation "Return a usage string for the command, including arguments.

        :return: a usage string for the command
        ")
                        (reparse-symbol indented_block_body) [11110 11296])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11316 11320]))                          
                        :documentation "Return a one line summary of what the command does.

        :return: a one line summary of what the command does
        ")
                        (reparse-symbol indented_block_body) [11301 11494])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11515 11519])
                            ("base" variable nil (reparse-symbol function_parameters) [11521 11525])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [11527 11534])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [11536 11543]))                          
                        :documentation "Verify that various conditions are met so that the command
        can run.

        :param base: a :class:`yum.Yumbase` object.
        :param basecmd: the name of the command being checked for
        :param extcmds: a list of arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [11503 11841])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11860 11864])
                            ("base" variable nil (reparse-symbol function_parameters) [11866 11870])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [11872 11879])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [11881 11888]))                          
                        :documentation "Execute the command

        :param base: a :class:`yum.Yumbase` object.
        :param basecmd: the name of the command being executed
        :param extcmds: a list of arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [11846 12368])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12388 12392])
                            ("base" variable nil (reparse-symbol function_parameters) [12394 12398])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [12400 12407])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [12409 12416]))                          
                        :documentation "Return whether a transaction set must be set up before the
        command can run

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [12377 12779])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13763 13767])
                            ("base" variable nil (reparse-symbol function_parameters) [13769 13773])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [13775 13782])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [13784 13791]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [13742 14153]))                  
                :type "class")
                nil [9945 14153])
            ("InstallCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    install command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14311 14315]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of
        these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [14298 14621])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14639 14643]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [14626 14790])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14810 14814]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [14795 15001])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15022 15026])
                            ("base" variable nil (reparse-symbol function_parameters) [15028 15032])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [15034 15041])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [15043 15050]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that the program is being run by the root user,
        that there are enabled repositories with gpg keys, and that
        this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [15010 15646])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15665 15669])
                            ("base" variable nil (reparse-symbol function_parameters) [15671 15675])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [15677 15684])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [15686 15693]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [15651 16249]))                  
                :type "class")
                nil [14163 16249])
            ("UpdateCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    update command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16397 16401]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can by called from the command line by using any of
        these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [16384 16675])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16693 16697]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [16680 16846])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16866 16870]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [16851 17056])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17073 17077])
                            ("base" variable nil (reparse-symbol function_parameters) [17079 17083])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [17085 17092])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [17094 17101]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that there are enabled repositories with gpg
        keys, and that this command is being run by the root user.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [17061 17586])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17605 17609])
                            ("base" variable nil (reparse-symbol function_parameters) [17611 17615])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [17617 17624])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [17626 17633]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [17591 18263]))                  
                :type "class")
                nil [16251 18263])
            ("DistroSyncCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    distro-synch command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18420 18424]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [18407 18729])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18747 18751]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [18734 18900])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18920 18924]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [18905 19130])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19147 19151])
                            ("base" variable nil (reparse-symbol function_parameters) [19153 19157])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [19159 19166])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [19168 19175]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that the program is being run by the root user,
        and that there are enabled repositories with gpg keys.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [19135 19659])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19678 19682])
                            ("base" variable nil (reparse-symbol function_parameters) [19684 19688])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [19690 19697])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [19699 19706]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [19664 20358]))                  
                :type "class")
                nil [18264 20358])
            ("_add_pkg_simple_list_lens" function
               (:documentation " Get the length of each pkg's column. Add that to data.
        This \"knows\" about simpleList and printVer. "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [20389 20393])
                    ("pkg" variable nil (reparse-symbol function_parameters) [20395 20398])
                    ("indent" variable nil (reparse-symbol function_parameters) [20400 20406]))                  )
                nil [20359 20853])
            ("_list_cmd_calc_columns" function
               (:documentation " Work out the dynamic size of the columns to pass to fmtColumns. "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [20881 20885])
                    ("ypl" variable nil (reparse-symbol function_parameters) [20887 20890]))                  )
                nil [20854 21544])
            ("_cmdline_exclude" function
               (:documentation " Do an extra exclude for installed packages that match the cmd line. "
                :arguments 
                  ( ("pkgs" variable nil (reparse-symbol function_parameters) [21566 21570])
                    ("cmdline_excludes" variable nil (reparse-symbol function_parameters) [21572 21588]))                  )
                nil [21545 21849])
            ("InfoCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    info command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21992 21996]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [21979 22247])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22265 22269]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [22252 22482])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22502 22506]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [22487 22701])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22720 22724])
                            ("base" variable nil (reparse-symbol function_parameters) [22726 22730])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [22732 22739])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [22741 22748])
                            ("repoid" variable nil (reparse-symbol function_parameters) [22750 22756]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [22706 28849])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28865 28869])
                            ("base" variable nil (reparse-symbol function_parameters) [28871 28875])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [28877 28884])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [28886 28893]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [28854 29347])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29373 29377])
                            ("base" variable nil (reparse-symbol function_parameters) [29379 29383])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [29385 29392])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [29394 29401]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [29352 30035]))                  
                :type "class")
                nil [21850 30035])
            ("ListCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    list command.
    "
                :superclasses ("InfoCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30180 30184]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [30167 30435])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30455 30459]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [30440 30638]))                  
                :type "class")
                nil [30037 30638])
            ("EraseCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    erase command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30793 30797]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [30780 31253])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31271 31275]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [31258 31419])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31439 31443]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [31424 31631])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31648 31652])
                            ("base" variable nil (reparse-symbol function_parameters) [31654 31658])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [31660 31667])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [31669 31676]))                          
                        :documentation "Verify that conditions are met so that this command can
        run.  These include that the program is being run by the root
        user, and that this command is called with appropriate
        arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [31636 32211])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32230 32234])
                            ("base" variable nil (reparse-symbol function_parameters) [32236 32240])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [32242 32249])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [32251 32258]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [32216 33535])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33551 33555])
                            ("base" variable nil (reparse-symbol function_parameters) [33557 33561])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [33563 33570])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [33572 33579]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [33540 33945])
                    ("needTsRemove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33967 33971])
                            ("base" variable nil (reparse-symbol function_parameters) [33973 33977])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [33979 33986])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [33988 33995]))                          
                        :documentation "Return whether a transaction set for removal only must be
        set up before this command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a remove-only transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [33950 34389]))                  
                :type "class")
                nil [30640 34389])
            ("GroupsCommand" type
               (:documentation " Single sub-command interface for most groups interaction. "
                :superclasses ("YumCommand")
                :members 
                  ( ("direct_commands" variable nil (reparse-symbol indented_block_body) [34500 34792])
                    ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34811 34815]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [34798 35107])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35125 35129]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [35112 35318])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35338 35342]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [35323 35524])
                    ("_grp_setup_doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35558 35562])
                            ("base" variable nil (reparse-symbol function_parameters) [35564 35568]))                          )
                        (reparse-symbol indented_block_body) [35533 35877])
                    ("_grp_cmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35895 35899])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [35901 35908])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [35910 35917]))                          )
                        (reparse-symbol indented_block_body) [35882 36476])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36493 36497])
                            ("base" variable nil (reparse-symbol function_parameters) [36499 36503])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [36505 36512])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [36514 36521]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        The exact conditions checked will vary depending on the
        subcommand that is being called.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [36481 39596])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39615 39619])
                            ("base" variable nil (reparse-symbol function_parameters) [39621 39625])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [39627 39634])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [39636 39643]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [39601 50148])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50165 50169])
                            ("base" variable nil (reparse-symbol function_parameters) [50171 50175])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [50177 50184])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [50186 50193]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [50154 50784])
                    ("needTsRemove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50806 50810])
                            ("base" variable nil (reparse-symbol function_parameters) [50812 50816])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [50818 50825])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [50827 50834]))                          
                        :documentation "Return whether a transaction set for removal only must be
        set up before this command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a remove-only transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [50789 51340])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51366 51370])
                            ("base" variable nil (reparse-symbol function_parameters) [51372 51376])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [51378 51385])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [51387 51394]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [51345 51994]))                  
                :type "class")
                nil [34392 51994])
            ("MakeCacheCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    makecache command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52148 52152]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [52135 52408])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52426 52430]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [52413 52564])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52584 52588]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [52569 52758])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52775 52779])
                            ("base" variable nil (reparse-symbol function_parameters) [52781 52785])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [52787 52794])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [52796 52803]))                          
                        :documentation "Verify that conditions are met so that this command can
        run; namely that there is an enabled repository.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [52763 53144])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53163 53167])
                            ("base" variable nil (reparse-symbol function_parameters) [53169 53173])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [53175 53182])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [53184 53191]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [53149 55619])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55635 55639])
                            ("base" variable nil (reparse-symbol function_parameters) [55641 55645])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [55647 55654])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [55656 55663]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [55624 56029]))                  
                :type "class")
                nil [51996 56029])
            ("CleanCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    clean command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56178 56182]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [56165 56434])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56452 56456]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [56439 56650])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56670 56674]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [56655 56835])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56852 56856])
                            ("base" variable nil (reparse-symbol function_parameters) [56858 56862])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [56864 56871])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [56873 56880]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that there is at least one enabled repository,
        and that this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [56840 57352])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57379 57383])
                            ("base" variable nil (reparse-symbol function_parameters) [57385 57389])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [57391 57398])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [57400 57407]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [57365 57907])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57923 57927])
                            ("base" variable nil (reparse-symbol function_parameters) [57929 57933])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [57935 57942])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [57944 57951]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [57912 58317])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58343 58347])
                            ("base" variable nil (reparse-symbol function_parameters) [58349 58353])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [58355 58362])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [58364 58371]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [58322 58742]))                  
                :type "class")
                nil [56030 58742])
            ("ProvidesCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    provides command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58894 58898]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [58881 59169])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59187 59191]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [59174 59336])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59360 59364]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [59345 59549])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59566 59570])
                            ("base" variable nil (reparse-symbol function_parameters) [59572 59576])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [59578 59585])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [59587 59594]))                          
                        :documentation "Verify that conditions are met so that this command can
        run; namely that this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [59554 59968])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59987 59991])
                            ("base" variable nil (reparse-symbol function_parameters) [59993 59997])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [59999 60006])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [60008 60015]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [59973 60578])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60604 60608])
                            ("base" variable nil (reparse-symbol function_parameters) [60610 60614])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [60616 60623])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [60625 60632]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [60583 61003]))                  
                :type "class")
                nil [58744 61003])
            ("CheckUpdateCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    check-update command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61162 61166]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [61149 61494])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61512 61516]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [61499 61662])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61682 61686]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [61667 61864])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61881 61885])
                            ("base" variable nil (reparse-symbol function_parameters) [61887 61891])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [61893 61900])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [61902 61909]))                          
                        :documentation "Verify that conditions are met so that this command can
        run; namely that there is at least one enabled repository.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [61869 62260])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62279 62283])
                            ("base" variable nil (reparse-symbol function_parameters) [62285 62289])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [62291 62298])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [62300 62307])
                            ("repoid" variable nil (reparse-symbol function_parameters) [62309 62315]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [62265 64950])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64976 64980])
                            ("base" variable nil (reparse-symbol function_parameters) [64982 64986])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [64988 64995])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [64997 65004]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [64955 65377]))                  
                :type "class")
                nil [61005 65377])
            ("SearchCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    search command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65525 65529]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [65512 65782])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65800 65804]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [65787 65949])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65969 65973]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [65954 66159])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66176 66180])
                            ("base" variable nil (reparse-symbol function_parameters) [66182 66186])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [66188 66195])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [66197 66204]))                          
                        :documentation "Verify that conditions are met so that this command can
        run; namely that this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [66164 66578])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66597 66601])
                            ("base" variable nil (reparse-symbol function_parameters) [66603 66607])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [66609 66616])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [66618 66625]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [66583 67189])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67205 67209])
                            ("base" variable nil (reparse-symbol function_parameters) [67211 67215])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [67217 67224])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [67226 67233]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [67194 67599])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67625 67629])
                            ("base" variable nil (reparse-symbol function_parameters) [67631 67635])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [67637 67644])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [67646 67653]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [67604 68027]))                  
                :type "class")
                nil [65379 68027])
            ("UpgradeCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    upgrade command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68177 68181]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [68164 68449])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68467 68471]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [68454 68615])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68635 68639]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [68620 68827])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68844 68848])
                            ("base" variable nil (reparse-symbol function_parameters) [68850 68854])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [68856 68863])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [68865 68872]))                          
                        :documentation "Verify that conditions are met so that this command can
         run.  These include that the program is being run by the root
         user, and that there are enabled repositories with gpg.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [68832 69354])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69373 69377])
                            ("base" variable nil (reparse-symbol function_parameters) [69379 69383])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [69385 69392])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [69394 69401]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [69359 70065]))                  
                :type "class")
                nil [68029 70065])
            ("LocalInstallCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    localinstall command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("YumCommand" code nil (reparse-symbol indented_block_body) [70239 70264])
                            ("self" variable nil (reparse-symbol indented_block_body) [70273 70291]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70224 70228]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70211 70292])
                    ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70310 70314]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [70297 70588])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70606 70610]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [70593 70748])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70768 70772]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [70753 70934])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70951 70955])
                            ("base" variable nil (reparse-symbol function_parameters) [70957 70961])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [70963 70970])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [70972 70979]))                          
                        :documentation "Verify that conditions are met so that this command can
        run.  These include that there are enabled repositories with
        gpg keys, and that this command is called with appropriate
        arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [70939 71488])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71515 71519])
                            ("base" variable nil (reparse-symbol function_parameters) [71521 71525])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [71527 71534])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [71536 71543]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is:

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [71501 72167])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72183 72187])
                            ("base" variable nil (reparse-symbol function_parameters) [72189 72193])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [72195 72202])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [72204 72211]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [72172 72577]))                  
                :type "class")
                nil [70066 72577])
            ("ResolveDepCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    resolvedep command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("YumCommand" code nil (reparse-symbol indented_block_body) [72747 72772])
                            ("self" variable nil (reparse-symbol indented_block_body) [72781 72799]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72732 72736]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72719 72800])
                    ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72818 72822]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [72805 73079])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73097 73101]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [73084 73245])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73265 73269]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [73250 73481])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73500 73504])
                            ("base" variable nil (reparse-symbol function_parameters) [73506 73510])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [73512 73519])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [73521 73528]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [73486 74113])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74139 74143])
                            ("base" variable nil (reparse-symbol function_parameters) [74145 74149])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [74151 74158])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [74160 74167]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [74118 74538]))                  
                :type "class")
                nil [72578 74538])
            ("ShellCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    shell command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74684 74688]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [74671 74940])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74958 74962]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [74945 75106])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75126 75130]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [75111 75301])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75318 75322])
                            ("base" variable nil (reparse-symbol function_parameters) [75324 75328])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [75330 75337])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [75339 75346]))                          
                        :documentation "Verify that conditions are met so that this command can
        run; namely that this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [75306 75721])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75740 75744])
                            ("base" variable nil (reparse-symbol function_parameters) [75746 75750])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [75752 75759])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [75761 75768]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [75726 76290])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76306 76310])
                            ("base" variable nil (reparse-symbol function_parameters) [76312 76316])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [76318 76325])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [76327 76334]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [76295 76700]))                  
                :type "class")
                nil [74540 76700])
            ("DepListCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    deplist command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76850 76854]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [76837 77108])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77126 77130]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [77113 77274])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77294 77298]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [77279 77470])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77487 77491])
                            ("base" variable nil (reparse-symbol function_parameters) [77493 77497])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [77499 77506])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [77508 77515]))                          
                        :documentation "Verify that conditions are met so that this command can
        run; namely that this command is called with appropriate
        arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [77475 77900])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77919 77923])
                            ("base" variable nil (reparse-symbol function_parameters) [77925 77929])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [77931 77938])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [77940 77947]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [77905 78519])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78545 78549])
                            ("base" variable nil (reparse-symbol function_parameters) [78551 78555])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [78557 78564])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [78566 78573]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [78524 78958]))                  
                :type "class")
                nil [76702 78958])
            ("RepoListCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    repolist command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79114 79118]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [79101 79385])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79403 79407]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [79390 79563])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79583 79587]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [79568 79774])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79793 79797])
                            ("base" variable nil (reparse-symbol function_parameters) [79799 79803])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [79805 79812])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [79814 79821]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [79779 92307])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92323 92327])
                            ("base" variable nil (reparse-symbol function_parameters) [92329 92333])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [92335 92342])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [92344 92351]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [92312 92717])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92743 92747])
                            ("base" variable nil (reparse-symbol function_parameters) [92749 92753])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [92755 92762])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [92764 92771]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [92722 93142]))                  
                :type "class")
                nil [78960 93142])
            ("HelpCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    help command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93287 93291]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [93274 93542])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93560 93564]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [93547 93705])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93725 93729]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [93710 93903])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93920 93924])
                            ("base" variable nil (reparse-symbol function_parameters) [93926 93930])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [93932 93939])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [93941 93948]))                          
                        :documentation "Verify that conditions are met so that this command can
        run; namely that this command is called with appropriate
        arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [93908 94501])
                    ("_makeOutput" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("command" variable nil (reparse-symbol function_parameters) [94540 94547]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [94506 95704])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95723 95727])
                            ("base" variable nil (reparse-symbol function_parameters) [95729 95733])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [95735 95742])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [95744 95751]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [95709 96374])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96390 96394])
                            ("base" variable nil (reparse-symbol function_parameters) [96396 96400])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [96402 96409])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [96411 96418]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [96379 96784]))                  
                :type "class")
                nil [93144 96784])
            ("ReInstallCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    reinstall command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96937 96941]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [96924 97197])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97215 97219]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [97202 97363])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97380 97384])
                            ("base" variable nil (reparse-symbol function_parameters) [97386 97390])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [97392 97399])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [97401 97408]))                          
                        :documentation "Verify that conditions are met so that this command can
        run.  These include that the program is being run by the root
        user, that there are enabled repositories with gpg keys, and
        that this command is called with appropriate arguments.


        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [97368 98006])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98025 98029])
                            ("base" variable nil (reparse-symbol function_parameters) [98031 98035])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [98037 98044])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [98046 98053]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [98011 98596])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98616 98620]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [98601 98782])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98798 98802])
                            ("base" variable nil (reparse-symbol function_parameters) [98804 98808])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [98810 98817])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [98819 98826]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [98787 99192]))                  
                :type "class")
                nil [96785 99192])
            ("DowngradeCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    downgrade command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99353 99357]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [99340 99613])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99631 99635]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [99618 99779])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99796 99800])
                            ("base" variable nil (reparse-symbol function_parameters) [99802 99806])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [99808 99815])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [99817 99824]))                          
                        :documentation "Verify that conditions are met so that this command can
        run.  These include that the program is being run by the root
        user, that there are enabled repositories with gpg keys, and
        that this command is called with appropriate arguments.


        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [99784 100422])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100441 100445])
                            ("base" variable nil (reparse-symbol function_parameters) [100447 100451])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [100453 100460])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [100462 100469]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [100427 101012])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101032 101036]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [101017 101198])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101214 101218])
                            ("base" variable nil (reparse-symbol function_parameters) [101220 101224])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [101226 101233])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [101235 101242]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [101203 101608]))                  
                :type "class")
                nil [99201 101608])
            ("VersionCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    version command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101758 101762]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [101745 102016])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102034 102038]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [102021 102197])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102217 102221]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [102202 102421])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102440 102444])
                            ("base" variable nil (reparse-symbol function_parameters) [102446 102450])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [102452 102459])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [102461 102468]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [102426 109592])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109608 109612])
                            ("base" variable nil (reparse-symbol function_parameters) [109614 109618])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [109620 109627])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [109629 109636]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [109597 110276])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110302 110306])
                            ("base" variable nil (reparse-symbol function_parameters) [110308 110312])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [110314 110321])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [110323 110330]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [110281 110704]))                  
                :type "class")
                nil [101610 110704])
            ("HistoryCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    history command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110854 110858]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [110841 111112])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111130 111134]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [111117 111335])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111355 111359]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [111340 111542])
                    ("_hcmd_redo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111562 111566])
                            ("base" variable nil (reparse-symbol function_parameters) [111568 111572])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [111574 111581]))                          )
                        (reparse-symbol indented_block_body) [111547 112757])
                    ("_hcmd_undo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112777 112781])
                            ("base" variable nil (reparse-symbol function_parameters) [112783 112787])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [112789 112796]))                          )
                        (reparse-symbol indented_block_body) [112762 113170])
                    ("_hcmd_rollback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113194 113198])
                            ("base" variable nil (reparse-symbol function_parameters) [113200 113204])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [113206 113213]))                          )
                        (reparse-symbol indented_block_body) [113175 114848])
                    ("_hcmd_new" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114867 114871])
                            ("base" variable nil (reparse-symbol function_parameters) [114873 114877])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [114879 114886]))                          )
                        (reparse-symbol indented_block_body) [114853 114928])
                    ("_hcmd_stats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114949 114953])
                            ("base" variable nil (reparse-symbol function_parameters) [114955 114959])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [114961 114968]))                          )
                        (reparse-symbol indented_block_body) [114933 116021])
                    ("_hcmd_sync" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116041 116045])
                            ("base" variable nil (reparse-symbol function_parameters) [116047 116051])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [116053 116060]))                          )
                        (reparse-symbol indented_block_body) [116026 116497])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116514 116518])
                            ("base" variable nil (reparse-symbol function_parameters) [116520 116524])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [116526 116533])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [116535 116542]))                          
                        :documentation "Verify that conditions are met so that this command can
        run.  The exact conditions checked will vary depending on the
        subcommand that is being called.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [116502 117861])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117880 117884])
                            ("base" variable nil (reparse-symbol function_parameters) [117886 117890])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [117892 117899])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [117901 117908]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [117866 119712])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119728 119732])
                            ("base" variable nil (reparse-symbol function_parameters) [119734 119738])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [119740 119747])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [119749 119756]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [119717 120235])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120261 120265])
                            ("base" variable nil (reparse-symbol function_parameters) [120267 120271])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [120273 120280])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [120282 120289]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [120240 120818]))                  
                :type "class")
                nil [110706 120818])
            ("CheckRpmdbCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    check-rpmdb command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120975 120979]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [120962 121246])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121264 121268]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [121251 121431])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121451 121455]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [121436 121629])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121648 121652])
                            ("base" variable nil (reparse-symbol function_parameters) [121654 121658])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [121660 121667])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [121669 121676]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [121634 122461])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122477 122481])
                            ("base" variable nil (reparse-symbol function_parameters) [122483 122487])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [122489 122496])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [122498 122505]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [122466 122871])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122897 122901])
                            ("base" variable nil (reparse-symbol function_parameters) [122903 122907])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [122909 122916])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [122918 122925]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [122876 123296]))                  
                :type "class")
                nil [120820 123296])
            ("LoadTransactionCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    load-transaction command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123463 123467]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [123450 123752])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123770 123774]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [123757 123916])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123936 123940]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [123921 124121])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124140 124144])
                            ("base" variable nil (reparse-symbol function_parameters) [124146 124150])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [124152 124159])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [124161 124168]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [124126 128801])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [128818 128822])
                            ("base" variable nil (reparse-symbol function_parameters) [128824 128828])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [128830 128837])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [128839 128846]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [128807 129290])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129316 129320])
                            ("base" variable nil (reparse-symbol function_parameters) [129322 129326])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [129328 129335])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [129337 129344]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [129295 129796]))                  
                :type "class")
                nil [123298 129796])
            ("SwapCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    swap command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129940 129944]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [129927 130195])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130213 130217]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [130200 130406])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130426 130430]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [130411 130624])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130641 130645])
                            ("base" variable nil (reparse-symbol function_parameters) [130647 130651])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [130653 130660])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [130662 130669]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that the program is being run by the root user,
        that there are enabled repositories with gpg keys, and that
        this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [130629 131269])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131288 131292])
                            ("base" variable nil (reparse-symbol function_parameters) [131294 131298])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [131300 131307])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [131309 131316]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [131274 133064]))                  
                :type "class")
                nil [129798 133064])
            ("RepoPkgsCommand" type
               (:documentation "A class containing methods needed by the cli to execute the
    repo command.
    "
                :superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133212 133216]))                          
                        :documentation "Return a list containing the names of this command.  This
        command can be called from the command line by using any of these names.

        :return: a list containing the names of this command
        ")
                        (reparse-symbol indented_block_body) [133199 133547])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133565 133569]))                          
                        :documentation "Return a usage string for this command.

        :return: a usage string for this command
        ")
                        (reparse-symbol indented_block_body) [133552 133778])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133798 133802]))                          
                        :documentation "Return a one line summary of this command.

        :return: a one line summary of this command
        ")
                        (reparse-symbol indented_block_body) [133783 134019])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134036 134040])
                            ("base" variable nil (reparse-symbol function_parameters) [134042 134046])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [134048 134055])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [134057 134064]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that the program is being run by the root user,
        that there are enabled repositories with gpg keys, and that
        this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [134024 134664])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134683 134687])
                            ("base" variable nil (reparse-symbol function_parameters) [134689 134693])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [134695 134702])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [134704 134711]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [134669 143782])
                    ("needTs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143798 143802])
                            ("base" variable nil (reparse-symbol function_parameters) [143804 143808])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [143810 143817])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [143819 143826]))                          
                        :documentation "Return whether a transaction set must be set up before this
        command can run.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: True if a transaction set is needed, False otherwise
        ")
                        (reparse-symbol indented_block_body) [143787 144374])
                    ("cacheRequirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144400 144404])
                            ("base" variable nil (reparse-symbol function_parameters) [144406 144410])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [144412 144419])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [144421 144428]))                          
                        :documentation "Return the cache requirements for the remote repos.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: a list of arguments passed to *basecmd*
        :return: Type of requirement: read-only:past, read-only:present, read-only:future, write
        ")
                        (reparse-symbol indented_block_body) [144379 145170]))                  
                :type "class")
                nil [133066 145170])
            ("_upi" variable nil nil [145212 145229])
            ("UpdateinfoCommand" type
               (:superclasses ("YumCommand")
                :members 
                  ( ("direct_cmds" variable nil (reparse-symbol indented_block_body) [145298 145646])
                    ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145942 145946]))                          )
                        (reparse-symbol indented_block_body) [145929 146013])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146031 146035]))                          )
                        (reparse-symbol indented_block_body) [146018 146122])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146142 146146]))                          )
                        (reparse-symbol indented_block_body) [146127 146204])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146221 146225])
                            ("base" variable nil (reparse-symbol function_parameters) [146227 146231])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [146233 146240])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [146242 146249]))                          )
                        (reparse-symbol indented_block_body) [146209 146265])
                    ("list_show_pkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146289 146293])
                            ("base" variable nil (reparse-symbol function_parameters) [146295 146299])
                            ("md_info" variable nil (reparse-symbol function_parameters) [146301 146308])
                            ("list_type" variable nil (reparse-symbol function_parameters) [146310 146319])
                            ("show_type" variable nil (reparse-symbol function_parameters) [146321 146330])
                            ("iname2tup" variable nil (reparse-symbol function_parameters) [146355 146364])
                            ("data" variable nil (reparse-symbol function_parameters) [146366 146370])
                            ("msg" variable nil (reparse-symbol function_parameters) [146372 146375]))                          )
                        (reparse-symbol indented_block_body) [146270 148092])
                    ("info_show_pkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148116 148120])
                            ("base" variable nil (reparse-symbol function_parameters) [148122 148126])
                            ("md_info" variable nil (reparse-symbol function_parameters) [148128 148135])
                            ("list_type" variable nil (reparse-symbol function_parameters) [148137 148146])
                            ("show_type" variable nil (reparse-symbol function_parameters) [148148 148157])
                            ("iname2tup" variable nil (reparse-symbol function_parameters) [148182 148191])
                            ("data" variable nil (reparse-symbol function_parameters) [148193 148197])
                            ("msg" variable nil (reparse-symbol function_parameters) [148199 148202]))                          )
                        (reparse-symbol indented_block_body) [148097 149158])
                    ("summary_show_pkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149185 149189])
                            ("base" variable nil (reparse-symbol function_parameters) [149191 149195])
                            ("md_info" variable nil (reparse-symbol function_parameters) [149197 149204])
                            ("list_type" variable nil (reparse-symbol function_parameters) [149206 149215])
                            ("show_type" variable nil (reparse-symbol function_parameters) [149217 149226])
                            ("iname2tup" variable nil (reparse-symbol function_parameters) [149254 149263])
                            ("data" variable nil (reparse-symbol function_parameters) [149265 149269])
                            ("msg" variable nil (reparse-symbol function_parameters) [149271 149274]))                          )
                        (reparse-symbol indented_block_body) [149163 151722])
                    ("_get_new_pkgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151745 151749])
                            ("md_info" variable nil (reparse-symbol function_parameters) [151751 151758]))                          )
                        (reparse-symbol indented_block_body) [151727 152142])
                    ("_cmd2filt" variable nil (reparse-symbol indented_block_body) [152147 152632])
                    ("for" code nil (reparse-symbol indented_block_body) [152637 152721])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152740 152744])
                            ("base" variable nil (reparse-symbol function_parameters) [152746 152750])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [152752 152759])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [152761 152768]))                          )
                        (reparse-symbol indented_block_body) [152726 154941])
                    ("doCommand_li_new" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154967 154971])
                            ("base" variable nil (reparse-symbol function_parameters) [154973 154977])
                            ("list_type" variable nil (reparse-symbol function_parameters) [154979 154988])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [154990 154997])
                            ("md_info" variable nil (reparse-symbol function_parameters) [154999 155006])
                            ("msg" variable nil (reparse-symbol function_parameters) [155008 155011])
                            ("show_pkgs" variable nil (reparse-symbol function_parameters) [155038 155047])
                            ("iname2tup" variable nil (reparse-symbol function_parameters) [155049 155058]))                          )
                        (reparse-symbol indented_block_body) [154946 156113])
                    ("_parse_extcmds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156137 156141])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [156143 156150]))                          )
                        (reparse-symbol indented_block_body) [156118 156559])
                    ("doCommand_li" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156581 156585])
                            ("base" variable nil (reparse-symbol function_parameters) [156587 156591])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [156593 156600])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [156602 156609])
                            ("show_pkgs" variable nil (reparse-symbol function_parameters) [156611 156620]))                          )
                        (reparse-symbol indented_block_body) [156564 159456]))                  
                :type "class")
                nil [145230 159456])
            ("UpdateMinimalCommand" type
               (:superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159515 159519]))                          )
                        (reparse-symbol indented_block_body) [159502 159575])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159593 159597]))                          )
                        (reparse-symbol indented_block_body) [159580 159636])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159656 159660]))                          )
                        (reparse-symbol indented_block_body) [159641 159789])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159806 159810])
                            ("base" variable nil (reparse-symbol function_parameters) [159812 159816])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [159818 159825])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [159827 159834]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that the program is being run by the root user,
        that there are enabled repositories with gpg keys, and that
        this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [159794 160342])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160361 160365])
                            ("base" variable nil (reparse-symbol function_parameters) [160367 160371])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [160373 160380])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [160382 160389]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [160347 161134]))                  
                :type "class")
                nil [159458 161134])
            ("FSSnapshotCommand" type
               (:superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161190 161194]))                          )
                        (reparse-symbol indented_block_body) [161177 161237])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161255 161259]))                          )
                        (reparse-symbol indented_block_body) [161242 161282])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161302 161306]))                          )
                        (reparse-symbol indented_block_body) [161287 161395])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161412 161416])
                            ("base" variable nil (reparse-symbol function_parameters) [161418 161422])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [161424 161431])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [161433 161440]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that the program is being run by the root user,
        that there are enabled repositories with gpg keys, and that
        this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [161400 161922])
                    ("_li_snaps" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("base" variable nil (reparse-symbol function_parameters) [161959 161963])
                            ("snaps" variable nil (reparse-symbol function_parameters) [161965 161970]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [161927 163022])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163041 163045])
                            ("base" variable nil (reparse-symbol function_parameters) [163047 163051])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [163053 163060])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [163062 163069]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [163027 167200]))                  
                :type "class")
                nil [161136 167200])
            ("FSCommand" type
               (:superclasses ("YumCommand")
                :members 
                  ( ("getNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167248 167252]))                          )
                        (reparse-symbol indented_block_body) [167235 167277])
                    ("getUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167295 167299]))                          )
                        (reparse-symbol indented_block_body) [167282 167322])
                    ("getSummary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167342 167346]))                          )
                        (reparse-symbol indented_block_body) [167327 167463])
                    ("doCheck" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167480 167484])
                            ("base" variable nil (reparse-symbol function_parameters) [167486 167490])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [167492 167499])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [167501 167508]))                          
                        :documentation "Verify that conditions are met so that this command can run.
        These include that the program is being run by the root user,
        that there are enabled repositories with gpg keys, and that
        this command is called with appropriate arguments.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        ")
                        (reparse-symbol indented_block_body) [167468 168240])
                    ("_fs_pkg_walk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168262 168266])
                            ("pkgs" variable nil (reparse-symbol function_parameters) [168268 168272])
                            ("prefix" variable nil (reparse-symbol function_parameters) [168274 168280])
                            ("modified" variable nil (reparse-symbol function_parameters) [168282 168290])
                            ("verbose" variable nil (reparse-symbol function_parameters) [168298 168305]))                          )
                        (reparse-symbol indented_block_body) [168245 170888])
                    ("_fs_du" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170904 170908])
                            ("base" variable nil (reparse-symbol function_parameters) [170910 170914])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [170916 170923]))                          )
                        (reparse-symbol indented_block_body) [170893 178372])
                    ("_fs_filters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [178393 178397])
                            ("base" variable nil (reparse-symbol function_parameters) [178399 178403])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [178405 178412]))                          )
                        (reparse-symbol indented_block_body) [178377 181409])
                    ("_fs_refilter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [181431 181435])
                            ("base" variable nil (reparse-symbol function_parameters) [181437 181441])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [181443 181450]))                          )
                        (reparse-symbol indented_block_body) [181414 182466])
                    ("_fs_refilter_cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [182496 182500])
                            ("base" variable nil (reparse-symbol function_parameters) [182502 182506])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [182508 182515]))                          )
                        (reparse-symbol indented_block_body) [182471 183177])
                    ("_fs_diff" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [183195 183199])
                            ("base" variable nil (reparse-symbol function_parameters) [183201 183205])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [183207 183214]))                          )
                        (reparse-symbol indented_block_body) [183182 186726])
                    ("_fs_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [186746 186750])
                            ("base" variable nil (reparse-symbol function_parameters) [186752 186756])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [186758 186765]))                          )
                        (reparse-symbol indented_block_body) [186731 187832])
                    ("doCommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187851 187855])
                            ("base" variable nil (reparse-symbol function_parameters) [187857 187861])
                            ("basecmd" variable nil (reparse-symbol function_parameters) [187863 187870])
                            ("extcmds" variable nil (reparse-symbol function_parameters) [187872 187879]))                          
                        :documentation "Execute this command.

        :param base: a :class:`yum.Yumbase` object
        :param basecmd: the name of the command
        :param extcmds: the command line arguments passed to *basecmd*
        :return: (exit_code, [ errors ])

        exit_code is::

            0 = we're done, exit
            1 = we've errored, exit with error string
            2 = we've got work yet to do, onto the next stage
        ")
                        (reparse-symbol indented_block_body) [187837 189505]))                  
                :type "class")
                nil [167202 189505]))          
      :file "yumcommands.py"
      :pointmax 189505
      :fsize 189504
      :lastmodtime '(23519 41652 0 0)
      :unmatched-syntax '((INDENT_BLOCK 166578 . 166654) (NEWLINE 166577 . 166578) (COLON 166576 . 166577) (TRY 166484 . 166487) (AS 166572 . 166574) (INDENT_BLOCK 166192 . 166263) (NEWLINE 166191 . 166192) (COLON 166190 . 166191) (TRY 166090 . 166093) (AS 166186 . 166188) (INDENT_BLOCK 165602 . 165703) (NEWLINE 165601 . 165602) (COLON 165600 . 165601) (TRY 165506 . 165509) (AS 165596 . 165598) (INDENT_BLOCK 165247 . 165295) (NEWLINE 165246 . 165247) (COLON 165245 . 165246) (TRY 165140 . 165143) (AS 165241 . 165243) (INDENT_BLOCK 164739 . 164787) (NEWLINE 164738 . 164739) (COLON 164737 . 164738) (TRY 164645 . 164648) (AS 164733 . 164735) (INDENT_BLOCK 164370 . 164446) (NEWLINE 164369 . 164370) (COLON 164368 . 164369) (TRY 164276 . 164279) (AS 164364 . 164366)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Entrance point for the yum command line interface.
\"\"\"" code nil nil [766 824])
            ("os" include nil nil [826 835])
            ("os.path" include nil nil [836 850])
            ("sys" include nil nil [851 861])
            ("logging" include nil nil [862 876])
            ("time" include nil nil [877 888])
            ("errno" include nil nil [889 901])
            ("yum" include nil nil [903 925])
            ("yum" include nil nil [926 949])
            ("yum" include nil nil [950 979])
            ("yum" include nil nil [980 997])
            ("yum.i18n" include nil nil [998 1044])
            ("yum.misc" include nil nil [1045 1060])
            ("cli" include nil nil [1061 1071])
            ("utils" include nil nil [1072 1125])
            ("main" function
               (:documentation "Run the yum program from a command line interface."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [1191 1195]))                  )
                nil [1182 10457])
            ("hotshot" function
               (:documentation "Profile the given function using the hotshot profiler.

    :param func: the function to profile
    :return: the return code given by the hotshot profiler
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [10470 10474])
                    ("args" variable nil (reparse-symbol function_parameters) [10476 10481])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [10483 10491]))                  )
                nil [10458 10879])
            ("cprof" function
               (:documentation "Profile the given function using the cprof profiler.

    :param func: the function to profile
    :return: the return code given by the cprof profiler
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [10890 10894])
                    ("args" variable nil (reparse-symbol function_parameters) [10896 10901])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [10903 10911]))                  )
                nil [10880 11298])
            ("print_stats" function
               (:documentation "Print out information from a :class:`Stats` object.

    :param stats: the :class:`Stats` object to print information from
    "
                :arguments 
                  ( ("stats" variable nil (reparse-symbol function_parameters) [11315 11320]))                  )
                nil [11299 11609])
            ("user_main" function
               (:documentation "Call one of the multiple main() functions based on environment variables.

    :param args: command line arguments passed into yum
    :param exit_code: if *exit_code* is True, this function will exit
       python with its exit code when it has finished executing.
       Otherwise, it will return its exit code.
    :return: the exit code from yum execution
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [11624 11628])
                    ("exit_code" variable nil (reparse-symbol function_parameters) [11630 11639]))                  )
                nil [11610 12447])
            ("event_test" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [12464 12468])
                    ("package" variable nil (reparse-symbol function_parameters) [12470 12477])
                    ("action" variable nil (reparse-symbol function_parameters) [12479 12485])
                    ("te_current" variable nil (reparse-symbol function_parameters) [12487 12497])
                    ("te_total" variable nil (reparse-symbol function_parameters) [12499 12507])
                    ("ts_current" variable nil (reparse-symbol function_parameters) [12509 12519])
                    ("ts_total" variable nil (reparse-symbol function_parameters) [12521 12529]))                  
                :documentation "Output information about an rpm operation.  This may
    include a text progress bar.

    :param package: the package involved in the event
    :param action: the type of action that is taking place.  Valid
       values are given by
       :func:`rpmtrans.RPMBaseCallback.action.keys()`
    :param te_current: a number representing the amount of work
       already done in the current transaction
    :param te_total: a number representing the total amount of work
       to be done in the current transaction
    :param ts_current: the number of the current transaction in
       transaction set
    :param ts_total: the total number of transactions in the
       transaction set
    ")
                nil [12449 13742])
            ("suppress_keyboard_interrupt_message" code nil nil [13782 13819])
            ("if" code nil nil [13821 14020]))          
      :file "yummain.py"
      :pointmax 14020
      :fsize 14019
      :lastmodtime '(23830 49296 214000 0)
      :unmatched-syntax nil))
  :file "!usr!share!yum-cli!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
