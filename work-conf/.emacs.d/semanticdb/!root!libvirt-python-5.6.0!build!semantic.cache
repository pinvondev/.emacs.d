;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("sys" include nil nil [368 378])
            ("try" code nil nil [379 650])
            ("libvirt" include nil nil [651 665])
            ("qemuAgentCommand" function
               (:documentation "Send a Guest Agent command to domain "
                :arguments 
                  ( ("domain" variable nil (reparse-symbol function_parameters) [804 810])
                    ("cmd" variable nil (reparse-symbol function_parameters) [812 815])
                    ("timeout" variable nil (reparse-symbol function_parameters) [817 824])
                    ("flags" variable nil (reparse-symbol function_parameters) [826 831]))                  )
                nil [783 1066])
            ("qemuAttach" function
               (:documentation "This API is QEMU specific, so it will only work with hypervisor
    connections to the QEMU driver.
    
    This API will attach to an externally launched QEMU process
    identified by @pid. There are several requirements to successfully
    attach to an external QEMU process:
    
      - It must have been started with a monitor socket using the UNIX
        domain socket protocol.
      - No device hotplug/unplug, or other configuration changes can
        have been made via the monitor since it started.
      - The '-name' and '-uuid' arguments should have been set (not
        mandatory, but strongly recommended)
    
    To date, the only platforms we know of where pid_t is larger than
    unsigned int (64-bit Windows) also lack UNIX sockets, so the choice
    of @pid_value as an unsigned int should not present any difficulties.
    
    If successful, then the guest will appear in the list of running
    domains for this connection, and other APIs should operate
    normally (provided the above requirements were honored). "
                :arguments 
                  ( ("conn" variable nil (reparse-symbol function_parameters) [1082 1086])
                    ("pid_value" variable nil (reparse-symbol function_parameters) [1088 1097])
                    ("flags" variable nil (reparse-symbol function_parameters) [1099 1104]))                  )
                nil [1067 2379])
            ("qemuMonitorCommand" function
               (:documentation "Send an arbitrary monitor command through qemu monitor of domain "
                :arguments 
                  ( ("domain" variable nil (reparse-symbol function_parameters) [2403 2409])
                    ("cmd" variable nil (reparse-symbol function_parameters) [2411 2414])
                    ("flags" variable nil (reparse-symbol function_parameters) [2416 2421]))                  )
                nil [2380 2679])
            ("VIR_CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_REGEX" variable nil nil [2728 2784])
            ("VIR_CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_NOCASE" variable nil nil [2785 2842])
            ("VIR_DOMAIN_QEMU_AGENT_COMMAND_BLOCK" code nil nil [2885 2925])
            ("VIR_DOMAIN_QEMU_AGENT_COMMAND_MIN" code nil nil [2926 2964])
            ("VIR_DOMAIN_QEMU_AGENT_COMMAND_DEFAULT" code nil nil [2965 3007])
            ("VIR_DOMAIN_QEMU_AGENT_COMMAND_NOWAIT" variable nil nil [3008 3048])
            ("VIR_DOMAIN_QEMU_AGENT_COMMAND_SHUTDOWN" variable nil nil [3049 3092])
            ("VIR_DOMAIN_QEMU_MONITOR_COMMAND_DEFAULT" variable nil nil [3129 3172])
            ("VIR_DOMAIN_QEMU_MONITOR_COMMAND_HMP" variable nil nil [3173 3212]))          
      :file "libvirt_qemu.py"
      :pointmax 3214
      :fsize 3213
      :lastmodtime '(23903 54665 470000 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("sys" include nil nil [407 417])
            ("try" code nil nil [419 675])
            ("libvirtError" type
               (:superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("err" variable nil (reparse-symbol indented_block_body) [927 961])
                            ("if" code nil (reparse-symbol indented_block_body) [970 1050])
                            ("Exception" code nil (reparse-symbol indented_block_body) [1059 1088])
                            ("self" variable nil (reparse-symbol indented_block_body) [1098 1112]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [759 763])
                            ("defmsg" variable nil (reparse-symbol function_parameters) [765 771])
                            ("conn" variable nil (reparse-symbol function_parameters) [773 777])
                            ("dom" variable nil (reparse-symbol function_parameters) [784 787])
                            ("net" variable nil (reparse-symbol function_parameters) [794 797])
                            ("pool" variable nil (reparse-symbol function_parameters) [804 808])
                            ("vol" variable nil (reparse-symbol function_parameters) [815 818]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [746 1113])
                    ("get_error_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1137 1141]))                          )
                        (reparse-symbol indented_block_body) [1118 1224])
                    ("get_error_domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1250 1254]))                          )
                        (reparse-symbol indented_block_body) [1229 1337])
                    ("get_error_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1364 1368]))                          )
                        (reparse-symbol indented_block_body) [1342 1451])
                    ("get_error_level" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1476 1480]))                          )
                        (reparse-symbol indented_block_body) [1456 1563])
                    ("get_str1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1581 1585]))                          )
                        (reparse-symbol indented_block_body) [1568 1668])
                    ("get_str2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1686 1690]))                          )
                        (reparse-symbol indented_block_body) [1673 1773])
                    ("get_str3" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795]))                          )
                        (reparse-symbol indented_block_body) [1778 1878])
                    ("get_int1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1896 1900]))                          )
                        (reparse-symbol indented_block_body) [1883 1983])
                    ("get_int2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2001 2005]))                          )
                        (reparse-symbol indented_block_body) [1988 2088]))                  
                :type "class")
                nil [711 2088])
            ("registerErrorHandler" function
               (:documentation "Register a Python function for error reporting.
       The function is called back as f(ctx, error), with error
       being a list of information about the error being raised.
       Returns 1 in case of success."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [2162 2163])
                    ("ctx" variable nil (reparse-symbol function_parameters) [2165 2168]))                  )
                nil [2137 2448])
            ("openAuth" function (:arguments 
              ( ("uri" variable nil (reparse-symbol function_parameters) [2462 2465])
                ("auth" variable nil (reparse-symbol function_parameters) [2467 2471])
                ("flags" variable nil (reparse-symbol function_parameters) [2473 2478]))              ) nil [2449 2642])
            ("getVersion" function
               (:documentation "If no name parameter is passed (or name is None) then the
    version of the libvirt library is returned as an integer.

    If a name is passed and it refers to a driver linked to the
    libvirt library, then this returns a tuple of (library version,
    driver version).

    If the name passed refers to a non-existent driver, then you
    will get the exception 'no support for hypervisor'.

    Versions numbers are integers: 1000000*major + 1000*minor + release."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2690 2694]))                  )
                nil [2674 3384])
            ("_eventInvokeHandleCallback" function
               (:documentation "
    Invoke the Event Impl Handle Callback in C
    "
                :arguments 
                  ( ("watch" variable nil (reparse-symbol function_parameters) [3454 3459])
                    ("fd" variable nil (reparse-symbol function_parameters) [3461 3463])
                    ("event" variable nil (reparse-symbol function_parameters) [3465 3470])
                    ("opaque" variable nil (reparse-symbol function_parameters) [3472 3478])
                    ("opaquecompat" variable nil (reparse-symbol function_parameters) [3480 3492]))                  )
                nil [3423 4069])
            ("_eventInvokeTimeoutCallback" function
               (:documentation "
    Invoke the Event Impl Timeout Callback in C
    "
                :arguments 
                  ( ("timer" variable nil (reparse-symbol function_parameters) [4140 4145])
                    ("opaque" variable nil (reparse-symbol function_parameters) [4147 4153])
                    ("opaquecompat" variable nil (reparse-symbol function_parameters) [4155 4167]))                  )
                nil [4108 4736])
            ("_dispatchEventHandleCallback" function (:arguments 
              ( ("watch" variable nil (reparse-symbol function_parameters) [4770 4775])
                ("fd" variable nil (reparse-symbol function_parameters) [4777 4779])
                ("events" variable nil (reparse-symbol function_parameters) [4781 4787])
                ("cbData" variable nil (reparse-symbol function_parameters) [4789 4795]))              ) nil [4737 4898])
            ("_dispatchEventTimeoutCallback" function (:arguments 
              ( ("timer" variable nil (reparse-symbol function_parameters) [4933 4938])
                ("cbData" variable nil (reparse-symbol function_parameters) [4940 4946]))              ) nil [4899 5037])
            ("virEventAddHandle" function
               (:documentation "
    register a callback for monitoring file handle events

    @fd: file handle to monitor for events
    @events: bitset of events to watch from virEventHandleType constants
    @cb: callback to invoke when an event occurs
    @opaque: user data to pass to callback

    Example callback prototype is:
        def cb(watch,   # int id of the handle
               fd,      # int file descriptor the event occurred on
               events,  # int bitmap of events that have occurred
               opaque): # opaque data passed to eventAddHandle
    "
                :arguments 
                  ( ("fd" variable nil (reparse-symbol function_parameters) [5060 5062])
                    ("events" variable nil (reparse-symbol function_parameters) [5064 5070])
                    ("cb" variable nil (reparse-symbol function_parameters) [5072 5074])
                    ("opaque" variable nil (reparse-symbol function_parameters) [5076 5082]))                  )
                nil [5038 5834])
            ("virEventAddTimeout" function
               (:documentation "
    register a callback for a timer event

    @timeout: time between events in milliseconds
    @cb: callback to invoke when an event occurs
    @opaque: user data to pass to callback

    Setting timeout to -1 will disable the timer. Setting the timeout
    to zero will cause it to fire on every event loop iteration.

    Example callback prototype is:
        def cb(timer,   # int id of the timer
               opaque): # opaque data passed to eventAddTimeout
    "
                :arguments 
                  ( ("timeout" variable nil (reparse-symbol function_parameters) [5858 5865])
                    ("cb" variable nil (reparse-symbol function_parameters) [5867 5869])
                    ("opaque" variable nil (reparse-symbol function_parameters) [5871 5877]))                  )
                nil [5835 6548])
            ("virEventInvokeFreeCallback" function
               (:documentation "
    Execute callback which frees the opaque buffer

    @opaque: the opaque object passed to addHandle or addTimeout

    WARNING: This function should not be called from any call by libvirt's
    core. It will most probably cause deadlock in C-level libvirt code.
    Instead it should be scheduled and called from implementation's stack.

    See https://libvirt.org/html/libvirt-libvirt-event.html#virEventAddHandleFunc
    for more information.

    This function is not dependent on any event loop implementation.
    "
                :arguments 
                  ( ("opaque" variable nil (reparse-symbol function_parameters) [6656 6662]))                  )
                nil [6625 7265])
            ("open" function
               (:documentation "This function should be called first to get a connection to the
    Hypervisor and xen store
    
    If @name is None, if the LIBVIRT_DEFAULT_URI environment variable is set,
    then it will be used. Otherwise if the client configuration file
    has the \"uri_default\" parameter set, then it will be used. Finally
    probing will be done to determine a suitable default driver to activate.
    This involves trying each hypervisor in turn until one successfully opens.
    
    If connecting to an unprivileged hypervisor driver which requires
    the libvirtd daemon to be active, it will automatically be launched
    if not already running. This can be prevented by setting the
    environment variable LIBVIRT_AUTOSTART=0
    
    URIs are documented at https://libvirt.org/uri.html
    
    virConnectClose should be used to release the resources after the connection
    is no longer needed. "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [7450 7454]))                  )
                nil [7441 8513])
            ("openReadOnly" function
               (:documentation "This function should be called first to get a restricted connection to the
    library functionalities. The set of APIs usable are then restricted
    on the available methods to control the domains.
    
    See virConnectOpen for notes about environment variables which can
    have an effect on opening drivers and freeing the connection resources
    
    URIs are documented at https://libvirt.org/uri.html "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [8531 8535]))                  )
                nil [8514 9121])
            ("virEventRegisterDefaultImpl" function (:documentation "Registers a default event implementation based on the
    poll() system call. This is a generic implementation
    that can be used by any client application which does
    not have a need to integrate with an external event
    loop impl.
    
    For proper event handling, it is important that the event implementation
    is registered before a connection to the Hypervisor is opened.
    
    Once registered, the application has to invoke virEventRunDefaultImpl() in
    a loop to process events.  Failure to do so may result in connections being
    closed unexpectedly as a result of keepalive timeout.  The default
    event loop fully supports handle and timeout events, but only
    wakes up on events registered by libvirt API calls such as
    virEventAddHandle() or virConnectDomainEventRegisterAny(). ") nil [9165 10171])
            ("virEventRegisterImpl" function
               (:documentation "Registers an event implementation, to allow integration
    with an external event loop. Applications would use this
    to integrate with the libglib2 event loop, or libevent
    or the QT event loop.
    
    For proper event handling, it is important that the event implementation
    is registered before a connection to the Hypervisor is opened.
    
    Use of the virEventAddHandle() and similar APIs require that the
    corresponding handler is registered.  Use of the
    virConnectDomainEventRegisterAny() and similar APIs requires that
    the three timeout handlers are registered.  Likewise, the three
    timeout handlers must be registered if the remote server has been
    configured to send keepalive messages, or if the client intends
    to call virConnectSetKeepAlive(), to avoid either side from
    unexpectedly closing the connection due to inactivity.
    
    If an application does not need to integrate with an
    existing event loop implementation, then the
    virEventRegisterDefaultImpl() method can be used to setup
    the generic libvirt implementation.
    
    Once registered, the event loop implementation cannot be
    changed, and must be run continuously. Note that callbacks
    may remain registered for a short time even after calling
    virConnectClose on all open connections, so it is not safe
    to stop running the event loop immediately after closing
    the connection. "
                :arguments 
                  ( ("addHandle" variable nil (reparse-symbol function_parameters) [10197 10206])
                    ("updateHandle" variable nil (reparse-symbol function_parameters) [10208 10220])
                    ("removeHandle" variable nil (reparse-symbol function_parameters) [10222 10234])
                    ("addTimeout" variable nil (reparse-symbol function_parameters) [10236 10246])
                    ("updateTimeout" variable nil (reparse-symbol function_parameters) [10248 10261])
                    ("removeTimeout" variable nil (reparse-symbol function_parameters) [10263 10276]))                  )
                nil [10172 11832])
            ("virEventRemoveHandle" function
               (:documentation "Unregister a callback from a file handle.  This function
    requires that an event loop has previously been registered with
    virEventRegisterImpl() or virEventRegisterDefaultImpl(). "
                :arguments 
                  ( ("watch" variable nil (reparse-symbol function_parameters) [11858 11863]))                  )
                nil [11833 12198])
            ("virEventRemoveTimeout" function
               (:documentation "Unregister a callback for a timer.  This function
    requires that an event loop has previously been registered with
    virEventRegisterImpl() or virEventRegisterDefaultImpl(). "
                :arguments 
                  ( ("timer" variable nil (reparse-symbol function_parameters) [12225 12230]))                  )
                nil [12199 12560])
            ("virEventRunDefaultImpl" function (:documentation "Run one iteration of the event loop. Applications
    will generally want to have a thread which invokes
    this method in an infinite loop.  Furthermore, it is wise
    to set up a pipe-to-self handler (via virEventAddHandle())
    or a timeout (via virEventAddTimeout()) before calling this
    function, as it will block forever if there are no
    registered events.
    
      static bool quit;
    
      while (!quit) {
        if (virEventRunDefaultImpl() < 0)
          ...print error...
      } ") nil [12561 13242])
            ("virEventUpdateHandle" function
               (:documentation "Change event set for a monitored file handle.  This function
    requires that an event loop has previously been registered with
    virEventRegisterImpl() or virEventRegisterDefaultImpl().
    
    Will not fail if fd exists. "
                :arguments 
                  ( ("watch" variable nil (reparse-symbol function_parameters) [13268 13273])
                    ("events" variable nil (reparse-symbol function_parameters) [13275 13281]))                  )
                nil [13243 13573])
            ("virEventUpdateTimeout" function
               (:documentation "Change frequency for a timer.  This function
    requires that an event loop has previously been registered with
    virEventRegisterImpl() or virEventRegisterDefaultImpl().
    
    Setting frequency to -1 will disable the timer. Setting the frequency
    to zero will cause it to fire on every event loop iteration.
    
    Will not fail if timer exists. "
                :arguments 
                  ( ("timer" variable nil (reparse-symbol function_parameters) [13600 13605])
                    ("timeout" variable nil (reparse-symbol function_parameters) [13607 13614]))                  )
                nil [13574 14039])
            ("virGetLastError" function (:documentation "Provide a pointer to the last error caught at the library level
    
    The error object is kept in thread local storage, so separate
    threads can safely access this concurrently. ") nil [14079 14351])
            ("virGetLastErrorCode" function (:documentation "Get the most recent error code (enum virErrorNumber). ") nil [14352 14572])
            ("virGetLastErrorDomain" function (:documentation "Get the most recent error domain (enum virErrorDomain). ") nil [14573 14801])
            ("virGetLastErrorMessage" function (:documentation "Get the most recent error message ") nil [14802 15013])
            ("virInitialize" function (:documentation "Initialize the library.
    
    This method is invoked automatically by any of the virConnectOpen() API
    calls, and by virGetVersion(). Since release 1.0.0, there is no need to
    call this method even in a multithreaded application, since
    initialization is performed in a thread safe manner; but applications
    using an older version of the library should manually call this before
    setting up competing threads that attempt virConnectOpen in parallel.
    
    The only other time it would be necessary to call virInitialize is if the
    application did not invoke virConnectOpen as its first API call, such
    as when calling virEventRegisterImpl() before setting up connections,
    or when using virSetErrorFunc() to alter error reporting of the first
    connection attempt. ") nil [15056 16001])
            ("virResetLastError" function (:documentation "Reset the last error caught at the library level.
    
    The error object is kept in thread local storage, so separate
    threads can safely access this concurrently, only resetting
    their own error object. ") nil [16041 16325])
            ("virDomain" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16400 16417])
                            ("if" code nil (reparse-symbol indented_block_body) [16426 16567])
                            ("self" variable nil (reparse-symbol indented_block_body) [16575 16589]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16368 16372])
                            ("conn" variable nil (reparse-symbol function_parameters) [16374 16378])
                            ("_obj" variable nil (reparse-symbol function_parameters) [16380 16384]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16355 16590])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16607 16611]))                          )
                        (reparse-symbol indented_block_body) [16595 16715])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16732 16736]))                          )
                        (reparse-symbol indented_block_body) [16720 16765])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16784 16788]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [16770 16893])
                    ("ID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16971 16975]))                          
                        :documentation "Get the hypervisor ID number for the domain ")
                        (reparse-symbol indented_block_body) [16964 17105])
                    ("OSType" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17121 17125]))                          
                        :documentation "Get the type of domain operation system. ")
                        (reparse-symbol indented_block_body) [17110 17341])
                    ("UUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17413 17417]))                          
                        :documentation "Extract the UUID unique Identifier of a domain. ")
                        (reparse-symbol indented_block_body) [17404 17636])
                    ("UUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17656 17660]))                          
                        :documentation "Fetch globally unique ID of the domain as a string. ")
                        (reparse-symbol indented_block_body) [17641 17895])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17978 17982])
                            ("flags" variable nil (reparse-symbol function_parameters) [17984 17989]))                          
                        :documentation "Provide an XML description of the domain. The description may be reused
        later to relaunch the domain with virDomainCreateXML().
        
        No security-sensitive data will be included unless @flags contains
        VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
        connections.  If @flags includes VIR_DOMAIN_XML_INACTIVE, then the
        XML represents the configuration that will be used on the next boot
        of a persistent domain; otherwise, the configuration represents the
        currently running domain.  If @flags contains
        VIR_DOMAIN_XML_UPDATE_CPU, then the portion of the domain XML
        describing CPU capabilities is modified to match actual
        capabilities of the host. ")
                        (reparse-symbol indented_block_body) [17966 18910])
                    ("abortJob" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18928 18932]))                          
                        :documentation "Requests that the current background job be aborted at the
        soonest opportunity. In case the job is a migration in a post-copy mode,
        virDomainAbortJob will report an error (see virDomainMigrateStartPostCopy
        for more details). ")
                        (reparse-symbol indented_block_body) [18915 19352])
                    ("addIOThread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19373 19377])
                            ("iothread_id" variable nil (reparse-symbol function_parameters) [19379 19390])
                            ("flags" variable nil (reparse-symbol function_parameters) [19392 19397]))                          
                        :documentation "Dynamically add an IOThread to the domain. It is left up to the
        underlying virtual hypervisor to determine the valid range for an
        @iothread_id and determining whether the @iothread_id already exists.
        
        Note that this call can fail if the underlying virtualization hypervisor
        does not support it or if growing the number is arbitrarily limited.
        This function requires privileged access to the hypervisor.
        
        @flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
        Both flags may be set.
        If VIR_DOMAIN_AFFECT_LIVE is set, the change affects a running domain
        and may fail if domain is not alive.
        If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
        and will fail for transient domains. If neither flag is specified (that is,
        @flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain modifies
        persistent setup, while an active domain is hypervisor-dependent on whether
        just live or both live and persistent state is changed. ")
                        (reparse-symbol indented_block_body) [19357 20681])
                    ("attachDevice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20703 20707])
                            ("xml" variable nil (reparse-symbol function_parameters) [20709 20712]))                          
                        :documentation "Create a virtual device attachment to backend.  This function,
        having hotplug semantics, is only allowed on an active domain.
        
        For compatibility, this method can also be used to change the media
        in an existing CDROM/Floppy device, however, applications are
        recommended to use the virDomainUpdateDeviceFlag method instead.
        
        Be aware that hotplug changes might not persist across a domain going
        into S4 state (also known as hibernation) unless you also modify the
        persistent domain definition. ")
                        (reparse-symbol indented_block_body) [20686 21460])
                    ("attachDeviceFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21487 21491])
                            ("xml" variable nil (reparse-symbol function_parameters) [21493 21496])
                            ("flags" variable nil (reparse-symbol function_parameters) [21498 21503]))                          
                        :documentation "Attach a virtual device to a domain, using the flags parameter
        to control how the device is attached.  VIR_DOMAIN_AFFECT_CURRENT
        specifies that the device allocation is made based on current domain
        state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
        allocated to the active domain instance only and is not added to the
        persisted domain configuration.  VIR_DOMAIN_AFFECT_CONFIG
        specifies that the device shall be allocated to the persisted domain
        configuration only.  Note that the target hypervisor must return an
        error if unable to satisfy flags.  E.g. the hypervisor driver will
        return failure if LIVE is specified but it only supports modifying the
        persisted device allocation.
        
        For compatibility, this method can also be used to change the media
        in an existing CDROM/Floppy device, however, applications are
        recommended to use the virDomainUpdateDeviceFlag method instead.
        
        Be aware that hotplug changes might not persist across a domain going
        into S4 state (also known as hibernation) unless you also modify the
        persistent domain definition. ")
                        (reparse-symbol indented_block_body) [21465 22911])
                    ("autostart" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22988 22992]))                          
                        :documentation "Extract the autostart flag for a domain ")
                        (reparse-symbol indented_block_body) [22974 23211])
                    ("blkioParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23236 23240])
                            ("flags" variable nil (reparse-symbol function_parameters) [23242 23247]))                          
                        :documentation "Get the blkio parameters ")
                        (reparse-symbol indented_block_body) [23216 23474])
                    ("blockCommit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23561 23565])
                            ("disk" variable nil (reparse-symbol function_parameters) [23567 23571])
                            ("base" variable nil (reparse-symbol function_parameters) [23573 23577])
                            ("top" variable nil (reparse-symbol function_parameters) [23579 23582])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [23584 23593])
                            ("flags" variable nil (reparse-symbol function_parameters) [23597 23602]))                          
                        :documentation "Commit changes that were made to temporary top-level files within a disk
        image backing file chain into a lower-level base file.  In other words,
        take all the difference between @base and @top, and update @base to contain
        that difference; after the commit, any portion of the chain that previously
        depended on @top will now depend on @base, and all files after @base up
        to and including @top will now be invalidated.  A typical use of this
        command is to reduce the length of a backing file chain after taking an
        external disk snapshot.  To move data in the opposite direction, see
        virDomainBlockPull().
        
        This command starts a long-running commit block job, whose status may
        be tracked by virDomainBlockJobInfo() with a job type of
        VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT, and the operation can be aborted with
        virDomainBlockJobAbort().  When finished, an asynchronous event is
        raised to indicate the final status, and the job no longer exists.  If
        the job is aborted, it is up to the hypervisor whether starting a new
        job will resume from the same point, or start over.
        
        As a special case, if @top is the active image (or None), and @flags
        includes VIR_DOMAIN_BLOCK_COMMIT_ACTIVE, the block job will have a type
        of VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT, and operates in two phases.
        In the first phase, the contents are being committed into @base, and the
        job can only be canceled.  The job transitions to the second phase when
        the job info states cur == end, and remains alive to keep all further
        changes to @top synchronized into @base; an event with status
        VIR_DOMAIN_BLOCK_JOB_READY is also issued to mark the job transition.
        Once in the second phase, the user must choose whether to cancel the job
        (keeping @top as the active image, but now containing only the changes
        since the time the job ended) or to pivot the job (adjusting to @base as
        the active image, and invalidating @top).
        
        Be aware that this command may invalidate files even if it is aborted;
        the user is cautioned against relying on the contents of invalidated
        intermediate files such as @top (when @top is not the active image)
        without manually rebasing those files to use a backing file of a
        read-only copy of @base prior to the point where the commit operation
        was started (and such a rebase cannot be safely done until the commit
        has successfully completed).  However, the domain itself will not have
        any issues; the active layer remains valid throughout the entire commit
        operation.
        
        Some hypervisors may support a shortcut where if @flags contains
        VIR_DOMAIN_BLOCK_COMMIT_DELETE, then this command will unlink all files
        that were invalidated, after the commit successfully completes.
        
        If @flags contains VIR_DOMAIN_BLOCK_COMMIT_RELATIVE, the name recorded
        into the overlay of the @top image (if there is such image) as the
        path to the new backing file will be kept relative to other images.
        The operation will fail if libvirt can't infer the name.
        
        By default, if @base is None, the commit target will be the bottom of
        the backing chain; if @flags contains VIR_DOMAIN_BLOCK_COMMIT_SHALLOW,
        then the immediate backing file of @top will be used instead.  If @top
        is None, the active image at the top of the chain will be used.  Some
        hypervisors place restrictions on how much can be committed, and might
        fail if @base is not the immediate backing file of @top, or if @top is
        the active layer in use by a running domain but @flags did not include
        VIR_DOMAIN_BLOCK_COMMIT_ACTIVE, or if @top is not the top-most file;
        restrictions may differ for online vs. offline domains.
        
        The @disk parameter is either an unambiguous source name of the
        block device (the <source file='...'/> sub-element, such as
        \"/path/to/image\"), or the device target shorthand (the
        <target dev='...'/> sub-element, such as \"vda\").  Valid names
        can be found by calling virDomainGetXMLDesc() and inspecting
        elements within //domain/devices/disk.
        
        The @base and @top parameters can be either paths to files within the
        backing chain, or the device target shorthand (the <target dev='...'/>
        sub-element, such as \"vda\") followed by an index to the backing chain
        enclosed in square brackets. Backing chain indexes can be found by
        inspecting //disk//backingStore/@index in the domain XML. Thus, for
        example, \"vda[3]\" refers to the backing store with index equal to \"3\"
        in the chain of disk \"vda\".
        
        The maximum bandwidth that will be used to do the commit can be
        specified with the @bandwidth parameter.  If set to 0, there is no
        limit.  If @flags includes VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES,
        @bandwidth is in bytes/second; otherwise, it is in MiB/second.
        Values larger than 2^52 bytes/sec may be rejected due to overflow
        considerations based on the word size of both client and server,
        and values larger than 2^31 bytes/sec may cause overflow problems
        if later queried by virDomainGetBlockJobInfo() without scaling.
        Hypervisors may further restrict the range of valid bandwidth
        values.  Some hypervisors do not support this feature and will
        return an error if bandwidth is not 0; in this case, it might still
        be possible for a later call to virDomainBlockJobSetSpeed() to
        succeed.  The actual speed can be determined with
        virDomainGetBlockJobInfo(). ")
                        (reparse-symbol indented_block_body) [23545 29702])
                    ("blockCopy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29779 29783])
                            ("disk" variable nil (reparse-symbol function_parameters) [29785 29789])
                            ("destxml" variable nil (reparse-symbol function_parameters) [29791 29798])
                            ("params" variable nil (reparse-symbol function_parameters) [29800 29806])
                            ("flags" variable nil (reparse-symbol function_parameters) [29813 29818]))                          
                        :documentation "Copy the guest-visible contents of a disk image to a new file described by destxml ")
                        (reparse-symbol indented_block_body) [29765 30106])
                    ("blockInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30125 30129])
                            ("path" variable nil (reparse-symbol function_parameters) [30131 30135])
                            ("flags" variable nil (reparse-symbol function_parameters) [30137 30142]))                          
                        :documentation "Extract information about a domain block device size ")
                        (reparse-symbol indented_block_body) [30111 30391])
                    ("blockIoTune" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30412 30416])
                            ("disk" variable nil (reparse-symbol function_parameters) [30418 30422])
                            ("flags" variable nil (reparse-symbol function_parameters) [30424 30429]))                          
                        :documentation "Get the I/O tunables for a block device ")
                        (reparse-symbol indented_block_body) [30396 30669])
                    ("blockJobAbort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30758 30762])
                            ("disk" variable nil (reparse-symbol function_parameters) [30764 30768])
                            ("flags" variable nil (reparse-symbol function_parameters) [30770 30775]))                          
                        :documentation "Cancel the active block job on the given disk.
        
        The @disk parameter is either an unambiguous source name of the
        block device (the <source file='...'/> sub-element, such as
        \"/path/to/image\"), or (since 0.9.5) the device target shorthand
        (the <target dev='...'/> sub-element, such as \"vda\").  Valid names
        can be found by calling virDomainGetXMLDesc() and inspecting
        elements within //domain/devices/disk.
        
        If the current block job for @disk is VIR_DOMAIN_BLOCK_JOB_TYPE_PULL, then
        by default, this function performs a synchronous operation and the caller
        may assume that the operation has completed when 0 is returned.  However,
        BlockJob operations may take a long time to cancel, and during this time
        further domain interactions may be unresponsive.  To avoid this problem,
        pass VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC in the @flags argument to enable
        asynchronous behavior, returning as soon as possible.  When the job has
        been canceled, a BlockJob event will be emitted, with status
        VIR_DOMAIN_BLOCK_JOB_CANCELED (even if the ABORT_ASYNC flag was not
        used); it is also possible to poll virDomainBlockJobInfo() to see if
        the job cancellation is still pending.  This type of job can be restarted
        to pick up from where it left off.
        
        If the current block job for @disk is VIR_DOMAIN_BLOCK_JOB_TYPE_COPY, then
        the default is to abort the mirroring and revert to the source disk;
        likewise, if the current job is VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT,
        the default is to abort without changing the active layer of @disk.
        Adding @flags of VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT causes this call to
        fail with VIR_ERR_BLOCK_COPY_ACTIVE if the copy or commit is not yet
        ready; otherwise it will swap the disk over to the new active image
        to end the mirroring or active commit.  An event will be issued when the
        job is ended, and it is possible to use VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC
        to control whether this command waits for the completion of the job.
        Restarting a copy or active commit job requires starting over from the
        beginning of the first phase. ")
                        (reparse-symbol indented_block_body) [30740 33267])
                    ("blockJobInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33347 33351])
                            ("path" variable nil (reparse-symbol function_parameters) [33353 33357])
                            ("flags" variable nil (reparse-symbol function_parameters) [33359 33364]))                          
                        :documentation "Get progress information for a block job ")
                        (reparse-symbol indented_block_body) [33330 33607])
                    ("blockJobSetSpeed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33699 33703])
                            ("disk" variable nil (reparse-symbol function_parameters) [33705 33709])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [33711 33720])
                            ("flags" variable nil (reparse-symbol function_parameters) [33722 33727]))                          
                        :documentation "Set the maximimum allowable bandwidth that a block job may consume.  If
        bandwidth is 0, the limit will revert to the hypervisor default of
        unlimited.
        
        If @flags contains VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES, @bandwidth
        is in bytes/second; otherwise, it is in MiB/second.  Values larger than
        2^52 bytes/sec may be rejected due to overflow considerations based on
        the word size of both client and server, and values larger than 2^31
        bytes/sec may cause overflow problems if later queried by
        virDomainGetBlockJobInfo() without scaling.  Hypervisors may further
        restrict the range of valid bandwidth values.
        
        The @disk parameter is either an unambiguous source name of the
        block device (the <source file='...'/> sub-element, such as
        \"/path/to/image\"), or (since 0.9.5) the device target shorthand
        (the <target dev='...'/> sub-element, such as \"vda\").  Valid names
        can be found by calling virDomainGetXMLDesc() and inspecting
        elements within //domain/devices/disk. ")
                        (reparse-symbol indented_block_body) [33678 35042])
                    ("blockPeek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35119 35123])
                            ("disk" variable nil (reparse-symbol function_parameters) [35125 35129])
                            ("offset" variable nil (reparse-symbol function_parameters) [35131 35137])
                            ("size" variable nil (reparse-symbol function_parameters) [35139 35143])
                            ("flags" variable nil (reparse-symbol function_parameters) [35145 35150]))                          
                        :documentation "Read the contents of domain's disk device ")
                        (reparse-symbol indented_block_body) [35105 35396])
                    ("blockPull" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35481 35485])
                            ("disk" variable nil (reparse-symbol function_parameters) [35487 35491])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [35493 35502])
                            ("flags" variable nil (reparse-symbol function_parameters) [35506 35511]))                          
                        :documentation "Populate a disk image with data from its backing image.  Once all data from
        its backing image has been pulled, the disk no longer depends on a backing
        image.  This function pulls data for the entire device in the background.
        Progress of the operation can be checked with virDomainGetBlockJobInfo() and
        the operation can be aborted with virDomainBlockJobAbort().  When finished,
        an asynchronous event is raised to indicate the final status.  To move
        data in the opposite direction, see virDomainBlockCommit().
        
        The @disk parameter is either an unambiguous source name of the
        block device (the <source file='...'/> sub-element, such as
        \"/path/to/image\"), or (since 0.9.5) the device target shorthand
        (the <target dev='...'/> sub-element, such as \"vda\").  Valid names
        can be found by calling virDomainGetXMLDesc() and inspecting
        elements within //domain/devices/disk.
        
        The maximum bandwidth that will be used to do the copy can be
        specified with the @bandwidth parameter.  If set to 0, there is no
        limit.  If @flags includes VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES,
        @bandwidth is in bytes/second; otherwise, it is in MiB/second.
        Values larger than 2^52 bytes/sec may be rejected due to overflow
        considerations based on the word size of both client and server,
        and values larger than 2^31 bytes/sec may cause overflow problems
        if later queried by virDomainGetBlockJobInfo() without scaling.
        Hypervisors may further restrict the range of valid bandwidth
        values.  Some hypervisors do not support this feature and will
        return an error if bandwidth is not 0; in this case, it might still
        be possible for a later call to virDomainBlockJobSetSpeed() to
        succeed.  The actual speed can be determined with
        virDomainGetBlockJobInfo().
        
        This is shorthand for virDomainBlockRebase() with a None base. ")
                        (reparse-symbol indented_block_body) [35467 37733])
                    ("blockRebase" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37754 37758])
                            ("disk" variable nil (reparse-symbol function_parameters) [37760 37764])
                            ("base" variable nil (reparse-symbol function_parameters) [37766 37770])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [37772 37781])
                            ("flags" variable nil (reparse-symbol function_parameters) [37785 37790]))                          
                        :documentation "Populate a disk image with data from its backing image chain, and
        setting the backing image to @base, or alternatively copy an entire
        backing chain to a new file @base.
        
        When @flags is 0, this starts a pull, where @base must be the absolute
        path of one of the backing images further up the chain, or None to
        convert the disk image so that it has no backing image.  Once all
        data from its backing image chain has been pulled, the disk no
        longer depends on those intermediate backing images.  This function
        pulls data for the entire device in the background.  Progress of
        the operation can be checked with virDomainGetBlockJobInfo() with a
        job type of VIR_DOMAIN_BLOCK_JOB_TYPE_PULL, and the operation can be
        aborted with virDomainBlockJobAbort().  When finished, an asynchronous
        event is raised to indicate the final status, and the job no longer
        exists.  If the job is aborted, a new one can be started later to
        resume from the same point.
        
        If @flags contains VIR_DOMAIN_BLOCK_REBASE_RELATIVE, the name recorded
        into the active disk as the location for @base will be kept relative.
        The operation will fail if libvirt can't infer the name.
        
        When @flags includes VIR_DOMAIN_BLOCK_REBASE_COPY, this starts a copy,
        where @base must be the name of a new file to copy the chain to.  By
        default, the copy will pull the entire source chain into the destination
        file, but if @flags also contains VIR_DOMAIN_BLOCK_REBASE_SHALLOW, then
        only the top of the source chain will be copied (the source and
        destination have a common backing file).  By default, @base will be
        created with the same file format as the source, but this can be altered
        by adding VIR_DOMAIN_BLOCK_REBASE_COPY_RAW to force the copy to be raw
        (does not make sense with the shallow flag unless the source is also raw),
        or by using VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT to reuse an existing file
        which was pre-created with the correct format and metadata and sufficient
        size to hold the copy. In case the VIR_DOMAIN_BLOCK_REBASE_SHALLOW flag
        is used the pre-created file has to exhibit the same guest visible contents
        as the backing file of the original image. This allows a management app to
        pre-create files with relative backing file names, rather than the default
        of absolute backing file names; as a security precaution, you should
        generally only use reuse_ext with the shallow flag and a non-raw
        destination file.  By default, the copy destination will be treated as
        type='file', but using VIR_DOMAIN_BLOCK_REBASE_COPY_DEV treats the
        destination as type='block' (affecting how virDomainGetBlockInfo() will
        report allocation after pivoting).
        
        A copy job has two parts; in the first phase, the @bandwidth parameter
        affects how fast the source is pulled into the destination, and the job
        can only be canceled by reverting to the source file; progress in this
        phase can be tracked via the virDomainBlockJobInfo() command, with a
        job type of VIR_DOMAIN_BLOCK_JOB_TYPE_COPY.  The job transitions to the
        second phase when the job info states cur == end, and remains alive to
        mirror all further changes to both source and destination.  The user
        must call virDomainBlockJobAbort() to end the mirroring while choosing
        whether to revert to source or pivot to the destination.  An event is
        issued when the job ends, and depending on the hypervisor, an event may
        also be issued when the job transitions from pulling to mirroring.  If
        the job is aborted, a new job will have to start over from the beginning
        of the first phase.
        
        Some hypervisors will restrict certain actions, such as virDomainSave()
        or virDomainDetachDevice(), while a copy job is active; they may
        also restrict a copy job to transient domains.
        
        The @disk parameter is either an unambiguous source name of the
        block device (the <source file='...'/> sub-element, such as
        \"/path/to/image\"), or the device target shorthand (the
        <target dev='...'/> sub-element, such as \"vda\").  Valid names
        can be found by calling virDomainGetXMLDesc() and inspecting
        elements within //domain/devices/disk.
        
        The @base parameter can be either a path to a file within the backing
        chain, or the device target shorthand (the <target dev='...'/>
        sub-element, such as \"vda\") followed by an index to the backing chain
        enclosed in square brackets. Backing chain indexes can be found by
        inspecting //disk//backingStore/@index in the domain XML. Thus, for
        example, \"vda[3]\" refers to the backing store with index equal to \"3\"
        in the chain of disk \"vda\".
        
        The maximum bandwidth that will be used to do the copy can be
        specified with the @bandwidth parameter.  If set to 0, there is no
        limit.  If @flags includes VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES,
        @bandwidth is in bytes/second; otherwise, it is in MiB/second.
        Values larger than 2^52 bytes/sec may be rejected due to overflow
        considerations based on the word size of both client and server,
        and values larger than 2^31 bytes/sec may cause overflow problems
        if later queried by virDomainGetBlockJobInfo() without scaling.
        Hypervisors may further restrict the range of valid bandwidth
        values.  Some hypervisors do not support this feature and will
        return an error if bandwidth is not 0; in this case, it might still
        be possible for a later call to virDomainBlockJobSetSpeed() to
        succeed.  The actual speed can be determined with
        virDomainGetBlockJobInfo().
        
        When @base is None and @flags is 0, this is identical to
        virDomainBlockPull().  When @flags contains VIR_DOMAIN_BLOCK_REBASE_COPY,
        this command is shorthand for virDomainBlockCopy() where the destination
        XML encodes @base as a <disk type='file'>, @bandwidth is properly scaled
        and passed as a typed parameter, the shallow and reuse external flags
        are preserved, and remaining flags control whether the XML encodes a
        destination format of raw instead of leaving the destination identical
        to the source format or probed from the reused file. ")
                        (reparse-symbol indented_block_body) [37738 44616])
                    ("blockResize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44637 44641])
                            ("disk" variable nil (reparse-symbol function_parameters) [44643 44647])
                            ("size" variable nil (reparse-symbol function_parameters) [44649 44653])
                            ("flags" variable nil (reparse-symbol function_parameters) [44655 44660]))                          
                        :documentation "Resize a block device of domain while the domain is running.  If
        @flags is 0, then @size is in kibibytes (blocks of 1024 bytes);
        since 0.9.11, if @flags includes VIR_DOMAIN_BLOCK_RESIZE_BYTES,
        @size is in bytes instead.  @size is taken directly as the new
        size.  Depending on the file format, the hypervisor may round up
        to the next alignment boundary.
        
        The @disk parameter is either an unambiguous source name of the
        block device (the <source file='...'/> sub-element, such as
        \"/path/to/image\"), or (since 0.9.5) the device target shorthand
        (the <target dev='...'/> sub-element, such as \"vda\").  Valid names
        can be found by calling virDomainGetXMLDesc() and inspecting
        elements within //domain/devices/disk.
        
        Note that this call may fail if the underlying virtualization hypervisor
        does not support it; this call requires privileged access to the
        hypervisor. ")
                        (reparse-symbol indented_block_body) [44621 45846])
                    ("blockStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45924 45928])
                            ("path" variable nil (reparse-symbol function_parameters) [45930 45934]))                          
                        :documentation "Extracts block device statistics for a domain ")
                        (reparse-symbol indented_block_body) [45909 46163])
                    ("blockStatsFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46188 46192])
                            ("path" variable nil (reparse-symbol function_parameters) [46194 46198])
                            ("flags" variable nil (reparse-symbol function_parameters) [46200 46205]))                          
                        :documentation "Extracts block device statistics parameters of a running domain ")
                        (reparse-symbol indented_block_body) [46168 46471])
                    ("controlInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46492 46496])
                            ("flags" variable nil (reparse-symbol function_parameters) [46498 46503]))                          
                        :documentation "Extract details about current state of control interface to a domain. ")
                        (reparse-symbol indented_block_body) [46476 46767])
                    ("coreDump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46851 46855])
                            ("to" variable nil (reparse-symbol function_parameters) [46857 46859])
                            ("flags" variable nil (reparse-symbol function_parameters) [46861 46866]))                          
                        :documentation "This method will dump the core of a domain on a given file for analysis.
        Note that for remote Xen Daemon the file path will be interpreted in
        the remote host. Hypervisors may require  the user to manually ensure
        proper permissions on the file named by @to.
        
        If @flags includes VIR_DUMP_CRASH, then leave the guest shut off with
        a crashed state after the dump completes.  If @flags includes
        VIR_DUMP_LIVE, then make the core dump while continuing to allow
        the guest to run; otherwise, the guest is suspended during the dump.
        VIR_DUMP_RESET flag forces reset of the guest after dump.
        The above three flags are mutually exclusive.
        
        Additionally, if @flags includes VIR_DUMP_BYPASS_CACHE, then libvirt
        will attempt to bypass the file system cache while creating the file,
        or fail if it cannot do so for the given system; this can allow less
        pressure on file system cache, but also risks slowing saves to NFS.
        
        For more control over the output format, see virDomainCoreDumpWithFormat(). ")
                        (reparse-symbol indented_block_body) [46838 48168])
                    ("coreDumpWithFormat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48196 48200])
                            ("to" variable nil (reparse-symbol function_parameters) [48202 48204])
                            ("dumpformat" variable nil (reparse-symbol function_parameters) [48206 48216])
                            ("flags" variable nil (reparse-symbol function_parameters) [48218 48223]))                          
                        :documentation "This method will dump the core of a domain on a given file for analysis.
        Note that for remote Xen Daemon the file path will be interpreted in
        the remote host. Hypervisors may require  the user to manually ensure
        proper permissions on the file named by @to.
        
        @dumpformat controls which format the dump will have; use of
        VIR_DOMAIN_CORE_DUMP_FORMAT_RAW mirrors what virDomainCoreDump() will
        perform.  Not all hypervisors are able to support all formats.
        
        If @flags includes VIR_DUMP_CRASH, then leave the guest shut off with
        a crashed state after the dump completes.  If @flags includes
        VIR_DUMP_LIVE, then make the core dump while continuing to allow
        the guest to run; otherwise, the guest is suspended during the dump.
        VIR_DUMP_RESET flag forces reset of the guest after dump.
        The above three flags are mutually exclusive.
        
        Additionally, if @flags includes VIR_DUMP_BYPASS_CACHE, then libvirt
        will attempt to bypass the file system cache while creating the file,
        or fail if it cannot do so for the given system; this can allow less
        pressure on file system cache, but also risks slowing saves to NFS. ")
                        (reparse-symbol indented_block_body) [48173 49691])
                    ("create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49707 49711]))                          
                        :documentation "Launch a defined domain. If the call succeeds the domain moves from the
        defined to the running domains pools.  The domain will be paused only
        if restoring from managed state created from a paused domain.  For more
        control, see virDomainCreateWithFlags(). ")
                        (reparse-symbol indented_block_body) [49696 50157])
                    ("createWithFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50182 50186])
                            ("flags" variable nil (reparse-symbol function_parameters) [50188 50193]))                          
                        :documentation "Launch a defined domain. If the call succeeds the domain moves from the
        defined to the running domains pools.
        
        If the VIR_DOMAIN_START_PAUSED flag is set, or if the guest domain
        has a managed save image that requested paused state (see
        virDomainManagedSave()) the guest domain will be started, but its
        CPUs will remain paused. The CPUs can later be manually started
        using virDomainResume().  In all other cases, the guest domain will
        be running.
        
        If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
        domain will be automatically destroyed when the virConnectPtr
        object is finally released. This will also happen if the
        client application crashes / loses its connection to the
        libvirtd daemon. Any domains marked for auto destroy will
        block attempts at migration, save-to-file, or snapshots.
        
        If the VIR_DOMAIN_START_BYPASS_CACHE flag is set, and there is a
        managed save file for this domain (created by virDomainManagedSave()),
        then libvirt will attempt to bypass the file system cache while restoring
        the file, or fail if it cannot do so for the given system; this can allow
        less pressure on file system cache, but also risks slowing loads from NFS.
        
        If the VIR_DOMAIN_START_FORCE_BOOT flag is set, then any managed save
        file for this domain is discarded, and the domain boots from scratch. ")
                        (reparse-symbol indented_block_body) [50162 51877])
                    ("delIOThread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51898 51902])
                            ("iothread_id" variable nil (reparse-symbol function_parameters) [51904 51915])
                            ("flags" variable nil (reparse-symbol function_parameters) [51917 51922]))                          
                        :documentation "Dynamically delete an IOThread from the domain. The @iothread_id to be
        deleted must not have a resource associated with it and can be any of
        the currently valid IOThread ID's.
        
        Note that this call can fail if the underlying virtualization hypervisor
        does not support it or if reducing the number is arbitrarily limited.
        This function requires privileged access to the hypervisor.
        
        @flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
        Both flags may be set.
        If VIR_DOMAIN_AFFECT_LIVE is set, the change affects a running domain
        and may fail if domain is not alive.
        If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
        and will fail for transient domains. If neither flag is specified (that is,
        @flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain modifies
        persistent setup, while an active domain is hypervisor-dependent on whether
        just live or both live and persistent state is changed. ")
                        (reparse-symbol indented_block_body) [51882 53183])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53200 53204]))                          
                        :documentation "Destroy the domain object. The running instance is shutdown if not down
        already and all resources used by it are given back to the hypervisor. This
        does not free the associated virDomainPtr object.
        This function may require privileged access.
        
        virDomainDestroy first requests that a guest terminate
        (e.g. SIGTERM), then waits for it to comply. After a reasonable
        timeout, if the guest still exists, virDomainDestroy will
        forcefully terminate the guest (e.g. SIGKILL) if necessary (which
        may produce undesirable results, for example unflushed disk cache
        in the guest). To avoid this possibility, it's recommended to
        instead call virDomainDestroyFlags, sending the
        VIR_DOMAIN_DESTROY_GRACEFUL flag.
        
        If the domain is transient and has any snapshot metadata (see
        virDomainSnapshotNum()), then that metadata will automatically
        be deleted when the domain quits. ")
                        (reparse-symbol indented_block_body) [53188 54358])
                    ("destroyFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54380 54384])
                            ("flags" variable nil (reparse-symbol function_parameters) [54386 54391]))                          
                        :documentation "Destroy the domain object. The running instance is shutdown if not down
        already and all resources used by it are given back to the hypervisor.
        This does not free the associated virDomainPtr object.
        This function may require privileged access.
        
        Calling this function with no @flags set (equal to zero) is
        equivalent to calling virDomainDestroy, and after a reasonable
        timeout will forcefully terminate the guest (e.g. SIGKILL) if
        necessary (which may produce undesirable results, for example
        unflushed disk cache in the guest). Including
        VIR_DOMAIN_DESTROY_GRACEFUL in the flags will prevent the forceful
        termination of the guest, and virDomainDestroyFlags will instead
        return an error if the guest doesn't terminate by the end of the
        timeout; at that time, the management application can decide if
        calling again without VIR_DOMAIN_DESTROY_GRACEFUL is appropriate.
        
        Another alternative which may produce cleaner results for the
        guest's disks is to use virDomainShutdown() instead, but that
        depends on guest support (some hypervisor/guest combinations may
        ignore the shutdown request). ")
                        (reparse-symbol indented_block_body) [54363 55815])
                    ("detachDevice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55837 55841])
                            ("xml" variable nil (reparse-symbol function_parameters) [55843 55846]))                          
                        :documentation "This is an equivalent of virDomainDetachDeviceFlags() when called with
        @flags parameter set to VIR_DOMAIN_AFFECT_LIVE.
        
        See virDomainDetachDeviceFlags() for more details. ")
                        (reparse-symbol indented_block_body) [55820 56225])
                    ("detachDeviceAlias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56252 56256])
                            ("alias" variable nil (reparse-symbol function_parameters) [56258 56263])
                            ("flags" variable nil (reparse-symbol function_parameters) [56265 56270]))                          
                        :documentation "Detach a virtual device from a domain, using the alias to
        specify the device. The value of @flags should be either
        VIR_DOMAIN_AFFECT_CURRENT, or a bitwise-or of values from
        VIR_DOMAIN_AFFECT_LIVE and VIR_DOMAIN_AFFECT_CURRENT, although
        hypervisors vary in which flags are supported.
        
        In contrast to virDomainDetachDeviceFlags() this API is
        asynchronous - it returns immediately after sending the detach
        request to the hypervisor. It's caller's responsibility to
        wait for VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED event to signal
        actual device removal or for
        VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED to signal rejected
        device removal. ")
                        (reparse-symbol indented_block_body) [56230 57199])
                    ("detachDeviceFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57226 57230])
                            ("xml" variable nil (reparse-symbol function_parameters) [57232 57235])
                            ("flags" variable nil (reparse-symbol function_parameters) [57237 57242]))                          
                        :documentation "Detach a virtual device from a domain, using the flags parameter
        to control how the device is detached.  VIR_DOMAIN_AFFECT_CURRENT
        specifies that the device allocation is removed based on current domain
        state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
        deallocated from the active domain instance only and is not from the
        persisted domain configuration.  VIR_DOMAIN_AFFECT_CONFIG
        specifies that the device shall be deallocated from the persisted domain
        configuration only.  Note that the target hypervisor must return an
        error if unable to satisfy flags.  E.g. the hypervisor driver will
        return failure if LIVE is specified but it only supports removing the
        persisted device allocation.
        
        Some hypervisors may prevent this operation if there is a current
        block copy operation on the device being detached; in that case,
        use virDomainBlockJobAbort() to stop the block copy first.
        
        Beware that depending on the hypervisor and device type, detaching a device
        from a running domain may be asynchronous. That is, calling
        virDomainDetachDeviceFlags may just request device removal while the device
        is actually removed later (in cooperation with a guest OS). Previously,
        this fact was ignored and the device could have been removed from domain
        configuration before it was actually removed by the hypervisor causing
        various failures on subsequent operations. To check whether the device was
        successfully removed, either recheck domain configuration using
        virDomainGetXMLDesc() or add a handler for the VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED
        event. In case the device is already gone when virDomainDetachDeviceFlags
        returns, the event is delivered before this API call ends. To help existing
        clients work better in most cases, this API will try to transform an
        asynchronous device removal that finishes shortly after the request into
        a synchronous removal. In other words, this API may wait a bit for the
        removal to complete in case it was not synchronous.
        
        Be aware that hotplug changes might not persist across a domain going
        into S4 state (also known as hibernation) unless you also modify the
        persistent domain definition.
        
        The supplied XML description of the device should be as specific
        as its definition in the domain XML. The set of attributes used
        to match the device are internal to the drivers. Using a partial definition,
        or attempting to detach a device that is not present in the domain XML,
        but shares some specific attributes with one that is present,
        may lead to unexpected results. ")
                        (reparse-symbol indented_block_body) [57204 60275])
                    ("diskErrors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60353 60357])
                            ("flags" variable nil (reparse-symbol function_parameters) [60359 60364]))                          
                        :documentation "Extract errors on disk devices. ")
                        (reparse-symbol indented_block_body) [60338 60588])
                    ("emulatorPinInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60613 60617])
                            ("flags" variable nil (reparse-symbol function_parameters) [60619 60624]))                          
                        :documentation "Query the CPU affinity setting of the emulator process of domain ")
                        (reparse-symbol indented_block_body) [60593 60891])
                    ("fSTrim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60973 60977])
                            ("mountPoint" variable nil (reparse-symbol function_parameters) [60979 60989])
                            ("minimum" variable nil (reparse-symbol function_parameters) [60991 60998])
                            ("flags" variable nil (reparse-symbol function_parameters) [61000 61005]))                          
                        :documentation "Calls FITRIM within the guest (hence guest agent may be
        required depending on hypervisor used). Either call it on each
        mounted filesystem (@mountPoint is None) or just on specified
        @mountPoint. @minimum hints that free ranges smaller than this
        may be ignored (this is a hint and the guest may not respect
        it).  By increasing this value, the fstrim operation will
        complete more quickly for filesystems with badly fragmented
        free space, although not all blocks will be discarded.
        If @minimum is not zero, the command may fail. ")
                        (reparse-symbol indented_block_body) [60962 61791])
                    ("fsInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61865 61869])
                            ("flags" variable nil (reparse-symbol function_parameters) [61871 61876]))                          
                        :documentation "Get a list of mapping information for each mounted file systems within the specified guest and the disks. ")
                        (reparse-symbol indented_block_body) [61854 62166])
                    ("getCPUStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62187 62191])
                            ("total" variable nil (reparse-symbol function_parameters) [62193 62198])
                            ("flags" variable nil (reparse-symbol function_parameters) [62200 62205]))                          
                        :documentation "Extracts CPU statistics for a running domain. On success it will
           return a list of data of dictionary type. If boolean total is False or 0, the
           first element of the list refers to CPU0 on the host, second element is
           CPU1, and so on. The format of data struct is as follows:
           [{cpu_time:xxx}, {cpu_time:xxx}, ...]
           If it is True or 1, it returns total domain CPU statistics in the format of
           [{cpu_time:xxx, user_time:xxx, system_time:xxx}] ")
                        (reparse-symbol indented_block_body) [62171 62902])
                    ("guestVcpus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62922 62926])
                            ("flags" variable nil (reparse-symbol function_parameters) [62928 62933]))                          
                        :documentation "returns a dictionary containing information regarding guest vcpus ")
                        (reparse-symbol indented_block_body) [62907 63189])
                    ("hasCurrentSnapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63292 63296])
                            ("flags" variable nil (reparse-symbol function_parameters) [63298 63303]))                          
                        :documentation "Determine if the domain has a current snapshot. ")
                        (reparse-symbol indented_block_body) [63269 63551])
                    ("hasManagedSaveImage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63646 63650])
                            ("flags" variable nil (reparse-symbol function_parameters) [63652 63657]))                          
                        :documentation "Check if a domain has a managed save image as created by
        virDomainManagedSave(). Note that any running domain should not have
        such an image, as it should have been removed on restart. ")
                        (reparse-symbol indented_block_body) [63622 64059])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64077 64081])
                            ("flags" variable nil (reparse-symbol function_parameters) [64083 64088]))                          
                        :documentation "Get the hostname for that domain.
        
        Dependent on hypervisor used, this may require a guest agent to be
        available. ")
                        (reparse-symbol indented_block_body) [64064 64413])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64485 64489]))                          
                        :documentation "Extract information about a domain. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted. ")
                        (reparse-symbol indented_block_body) [64476 64814])
                    ("injectNMI" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64899 64903])
                            ("flags" variable nil (reparse-symbol function_parameters) [64905 64910]))                          
                        :documentation "Send NMI to the guest ")
                        (reparse-symbol indented_block_body) [64885 65114])
                    ("interfaceAddresses" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65200 65204])
                            ("source" variable nil (reparse-symbol function_parameters) [65206 65212])
                            ("flags" variable nil (reparse-symbol function_parameters) [65214 65219]))                          
                        :documentation "returns a dictionary of domain interfaces along with their MAC and IP addresses ")
                        (reparse-symbol indented_block_body) [65177 65509])
                    ("interfaceParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65538 65542])
                            ("device" variable nil (reparse-symbol function_parameters) [65544 65550])
                            ("flags" variable nil (reparse-symbol function_parameters) [65552 65557]))                          
                        :documentation "Get the bandwidth tunables for a interface device ")
                        (reparse-symbol indented_block_body) [65514 65825])
                    ("interfaceStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65849 65853])
                            ("path" variable nil (reparse-symbol function_parameters) [65855 65859]))                          
                        :documentation "Extracts interface device statistics for a domain ")
                        (reparse-symbol indented_block_body) [65830 66100])
                    ("ioThreadInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66122 66126])
                            ("flags" variable nil (reparse-symbol function_parameters) [66128 66133]))                          
                        :documentation "Query the CPU affinity setting of the IOThreads of the domain ")
                        (reparse-symbol indented_block_body) [66105 66391])
                    ("isActive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66475 66479]))                          
                        :documentation "Determine if the domain is currently running ")
                        (reparse-symbol indented_block_body) [66462 66695])
                    ("isPersistent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66717 66721]))                          
                        :documentation "Determine if the domain has a persistent configuration
        which means it will still exist after shutting down ")
                        (reparse-symbol indented_block_body) [66700 67015])
                    ("isUpdated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67034 67038]))                          
                        :documentation "Determine if the domain has been updated. ")
                        (reparse-symbol indented_block_body) [67020 67253])
                    ("jobInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67328 67332]))                          
                        :documentation "Extract information about an active job being processed for a domain. ")
                        (reparse-symbol indented_block_body) [67316 67579])
                    ("jobStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67597 67601])
                            ("flags" variable nil (reparse-symbol function_parameters) [67603 67608]))                          
                        :documentation "Extract information about an active job being processed for a domain. ")
                        (reparse-symbol indented_block_body) [67584 67866])
                    ("launchSecurityInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67894 67898])
                            ("flags" variable nil (reparse-symbol function_parameters) [67900 67905]))                          
                        :documentation "Get launch security info for a domain ")
                        (reparse-symbol indented_block_body) [67871 68151])
                    ("managedSave" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68238 68242])
                            ("flags" variable nil (reparse-symbol function_parameters) [68244 68249]))                          
                        :documentation "This method will suspend a domain and save its memory contents to
        a file on disk. After the call, if successful, the domain is not
        listed as running anymore.
        The difference from virDomainSave() is that libvirt is keeping track of
        the saved state itself, and will reuse it once the domain is being
        restarted (automatically or via an explicit libvirt call).
        As a result any running domain is sure to not have a managed saved image.
        This also implies that managed save only works on persistent domains,
        since the domain must still exist in order to use virDomainCreate() to
        restart it.
        
        If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
        attempt to bypass the file system cache while creating the file, or
        fail if it cannot do so for the given system; this can allow less
        pressure on file system cache, but also risks slowing saves to NFS.
        
        Normally, the managed saved state will remember whether the domain
        was running or paused, and start will resume to the same state.
        Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
        @flags will override the default saved into the file.  These two
        flags are mutually exclusive. ")
                        (reparse-symbol indented_block_body) [68222 69739])
                    ("managedSaveDefineXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69769 69773])
                            ("dxml" variable nil (reparse-symbol function_parameters) [69775 69779])
                            ("flags" variable nil (reparse-symbol function_parameters) [69781 69786]))                          
                        :documentation "This updates the definition of a domain stored in a saved state
        file.
        
        @dxml can be used to alter host-specific portions of the domain XML
        that will be used on the next start of the domain. For example, it is
        possible to alter the backing filename that is associated with a
        disk device.
        
        Normally, the saved state file will remember whether the domain was
        running or paused, and restore defaults to the same state.
        Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
        @flags will override the default saved into the file; omitting both
        leaves the file's default unchanged.  These two flags are mutually
        exclusive. ")
                        (reparse-symbol indented_block_body) [69744 70725])
                    ("managedSaveGetXMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70756 70760])
                            ("flags" variable nil (reparse-symbol function_parameters) [70762 70767]))                          
                        :documentation "This method will extract the XML description of the managed save
        state file of a domain.
        
        No security-sensitive data will be included unless @flags contains
        VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
        connections.  For this API, @flags should not contain either
        VIR_DOMAIN_XML_INACTIVE or VIR_DOMAIN_XML_UPDATE_CPU. ")
                        (reparse-symbol indented_block_body) [70730 71353])
                    ("managedSaveRemove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71380 71384])
                            ("flags" variable nil (reparse-symbol function_parameters) [71386 71391]))                          
                        :documentation "Remove any managed save image for this domain. ")
                        (reparse-symbol indented_block_body) [71358 71636])
                    ("maxMemory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71655 71659]))                          
                        :documentation "Retrieve the maximum amount of physical memory allocated to a
        domain. If domain is None, then this get the amount of memory reserved
        to Domain0 i.e. the domain where the application runs. ")
                        (reparse-symbol indented_block_body) [71641 72041])
                    ("maxVcpus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72059 72063]))                          
                        :documentation "Provides the maximum number of virtual CPUs supported for
        the guest VM. If the guest is inactive, this is basically
        the same as virConnectGetMaxVcpus(). If the guest is running
        this will reflect the maximum number of virtual CPUs the
        guest was booted with.  For more details, see virDomainGetVcpusFlags(). ")
                        (reparse-symbol indented_block_body) [72046 72578])
                    ("memoryParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72662 72666])
                            ("flags" variable nil (reparse-symbol function_parameters) [72668 72673]))                          
                        :documentation "Get the memory parameters ")
                        (reparse-symbol indented_block_body) [72641 72903])
                    ("memoryPeek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72923 72927])
                            ("start" variable nil (reparse-symbol function_parameters) [72929 72934])
                            ("size" variable nil (reparse-symbol function_parameters) [72936 72940])
                            ("flags" variable nil (reparse-symbol function_parameters) [72942 72947]))                          
                        :documentation "Read the contents of domain's memory ")
                        (reparse-symbol indented_block_body) [72908 73183])
                    ("memoryStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73204 73208]))                          
                        :documentation "Extracts memory statistics for a domain ")
                        (reparse-symbol indented_block_body) [73188 73427])
                    ("metadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73511 73515])
                            ("type" variable nil (reparse-symbol function_parameters) [73517 73521])
                            ("uri" variable nil (reparse-symbol function_parameters) [73523 73526])
                            ("flags" variable nil (reparse-symbol function_parameters) [73528 73533]))                          
                        :documentation "Retrieves the appropriate domain element given by @type.
        If VIR_DOMAIN_METADATA_ELEMENT is requested parameter @uri
        must be set to the name of the namespace the requested elements
        belong to, otherwise must be None.
        
        If an element of the domain XML is not present, the resulting
        error will be VIR_ERR_NO_DOMAIN_METADATA.  This method forms
        a shortcut for seeing information from virDomainSetMetadata()
        without having to go through virDomainGetXMLDesc().
        
        @flags controls whether the live domain or persistent
        configuration will be queried. ")
                        (reparse-symbol indented_block_body) [73498 74359])
                    ("migrate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74376 74380])
                            ("dconn" variable nil (reparse-symbol function_parameters) [74382 74387])
                            ("flags" variable nil (reparse-symbol function_parameters) [74389 74394])
                            ("dname" variable nil (reparse-symbol function_parameters) [74398 74403])
                            ("uri" variable nil (reparse-symbol function_parameters) [74410 74413])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [74420 74429]))                          
                        :documentation "Migrate the domain object from its current host to the destination
        host given by dconn (a connection to the destination host).
        
        This function is similar to virDomainMigrate3, but it only supports a fixed
        set of parameters: @dname corresponds to VIR_MIGRATE_PARAM_DEST_NAME, @uri
        is VIR_MIGRATE_PARAM_URI, and @bandwidth is VIR_MIGRATE_PARAM_BANDWIDTH.
        
        virDomainFree should be used to free the resources after the
        returned domain object is no longer needed. ")
                        (reparse-symbol indented_block_body) [74364 75281])
                    ("migrate2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75299 75303])
                            ("dconn" variable nil (reparse-symbol function_parameters) [75305 75310])
                            ("dxml" variable nil (reparse-symbol function_parameters) [75312 75316])
                            ("flags" variable nil (reparse-symbol function_parameters) [75323 75328])
                            ("dname" variable nil (reparse-symbol function_parameters) [75332 75337])
                            ("uri" variable nil (reparse-symbol function_parameters) [75344 75347])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [75354 75363]))                          
                        :documentation "Migrate the domain object from its current host to the destination
        host given by dconn (a connection to the destination host).
        
        This function is similar to virDomainMigrate3, but it only supports a fixed
        set of parameters: @dxml corresponds to VIR_MIGRATE_PARAM_DEST_XML, @dname
        is VIR_MIGRATE_PARAM_DEST_NAME, @uri is VIR_MIGRATE_PARAM_URI, and
        @bandwidth is VIR_MIGRATE_PARAM_BANDWIDTH.
        
        virDomainFree should be used to free the resources after the
        returned domain object is no longer needed. ")
                        (reparse-symbol indented_block_body) [75286 76268])
                    ("migrate3" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76344 76348])
                            ("dconn" variable nil (reparse-symbol function_parameters) [76350 76355])
                            ("params" variable nil (reparse-symbol function_parameters) [76357 76363])
                            ("flags" variable nil (reparse-symbol function_parameters) [76365 76370]))                          
                        :documentation "Migrate the domain object from its current host to the destination host
                    given by dconn (a connection to the destination host). ")
                        (reparse-symbol indented_block_body) [76331 76834])
                    ("migrateGetCompressionCache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76870 76874])
                            ("flags" variable nil (reparse-symbol function_parameters) [76876 76881]))                          
                        :documentation "Get current size of the cache (in bytes) used for compressing
                    repeatedly transferred memory pages during live migration. ")
                        (reparse-symbol indented_block_body) [76839 77138])
                    ("migrateGetMaxDowntime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77169 77173])
                            ("flags" variable nil (reparse-symbol function_parameters) [77175 77180]))                          
                        :documentation "Get the current value of the maximum downtime (in milliseconds)
                    allowed during a migration of a guest. ")
                        (reparse-symbol indented_block_body) [77143 77414])
                    ("migrateGetMaxSpeed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77442 77446])
                            ("flags" variable nil (reparse-symbol function_parameters) [77448 77453]))                          
                        :documentation "Get currently configured maximum migration speed for a domain ")
                        (reparse-symbol indented_block_body) [77419 77715])
                    ("migrateSetCompressionCache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77817 77821])
                            ("cacheSize" variable nil (reparse-symbol function_parameters) [77823 77832])
                            ("flags" variable nil (reparse-symbol function_parameters) [77834 77839]))                          
                        :documentation "Sets size of the cache (in bytes) used for compressing repeatedly
        transferred memory pages during live migration. It's supposed to be called
        while the domain is being live-migrated as a reaction to migration progress
        and increasing number of compression cache misses obtained from
        virDomainGetJobStats. ")
                        (reparse-symbol indented_block_body) [77786 78401])
                    ("migrateSetMaxDowntime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78432 78436])
                            ("downtime" variable nil (reparse-symbol function_parameters) [78438 78446])
                            ("flags" variable nil (reparse-symbol function_parameters) [78448 78453]))                          
                        :documentation "Sets maximum tolerable time for which the domain is allowed to be paused
        at the end of live migration. It's supposed to be called while the domain is
        being live-migrated as a reaction to migration progress. ")
                        (reparse-symbol indented_block_body) [78406 78892])
                    ("migrateSetMaxSpeed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78920 78924])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [78926 78935])
                            ("flags" variable nil (reparse-symbol function_parameters) [78937 78942]))                          
                        :documentation "The maximum bandwidth (in MiB/s) that will be used to do migration
        can be specified with the bandwidth parameter. Not all hypervisors
        will support a bandwidth cap ")
                        (reparse-symbol indented_block_body) [78897 79332])
                    ("migrateStartPostCopy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79362 79366])
                            ("flags" variable nil (reparse-symbol function_parameters) [79368 79373]))                          
                        :documentation "Starts post-copy migration. This function has to be called while
        migration (initiated with VIR_MIGRATE_POSTCOPY flag) is in progress.
        
        Traditional pre-copy migration iteratively walks through guest memory
        pages and migrates those that changed since the previous iteration. The
        iterative phase stops when the number of dirty pages is low enough so that
        the virtual CPUs can be paused, all dirty pages transferred to the
        destination, where the virtual CPUs are unpaused, and all this can happen
        within a predefined downtime period. It's clear that this process may never
        converge if downtime is too short and/or the guest keeps changing a lot of
        memory pages.
        
        When migration is switched to post-copy mode, the virtual CPUs are paused
        immediately, only a minimum set of pages is transferred, and the CPUs are
        unpaused on destination. The source keeps sending all remaining memory pages
        to the destination while the guest is already running there. Whenever the
        guest tries to read a memory page which has not been migrated yet, the
        hypervisor has to tell the source to transfer that page in a priority
        channel. To minimize such page faults, it is a good idea to run at least one
        iteration of pre-copy migration before switching to post-copy.
        
        Post-copy migration is guaranteed to converge since each page is transferred
        at most once no matter how fast it changes. On the other hand once the
        guest is running on the destination host, the migration can no longer be
        rolled back because none of the hosts has complete state. If this happens,
        libvirt will leave the domain paused on both hosts with
        VIR_DOMAIN_PAUSED_POSTCOPY_FAILED reason. It's up to the upper layer to
        decide what to do in such case. Because of this, libvirt will refuse to
        cancel post-copy migration via virDomainAbortJob.
        
        The following domain life cycle events are emitted during post-copy
        migration:
         VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY (on the source) -- migration entered
             post-copy mode.
         VIR_DOMAIN_EVENT_RESUMED_POSTCOPY (on the destination) -- the guest is
             running on the destination host while some of its memory pages still
             remain on the source host; neither the source nor the destination host
             contain a complete guest state from this point until migration
             finishes.
         VIR_DOMAIN_EVENT_RESUMED_MIGRATED (on the destination),
         VIR_DOMAIN_EVENT_STOPPED_MIGRATED (on the source) -- migration finished
             successfully and the destination host holds a complete guest state.
         VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED (on the destination) -- emitted
             when migration fails in post-copy mode and it's unclear whether any
             of the hosts has a complete guest state.
        
        The progress of a post-copy migration can be monitored normally using
        virDomainGetJobStats on the source host. Fetching statistics of a completed
        post-copy migration can also be done on the source host (by calling
        virDomainGetJobStats or listening to VIR_DOMAIN_EVENT_ID_JOB_COMPLETED
        event, but (in contrast to pre-copy migration) the statistics are not
        available on the destination host. Thus, VIR_DOMAIN_EVENT_ID_JOB_COMPLETED
        event is the only way of getting statistics of a completed post-copy
        migration of a transient domain (because the domain is removed after
        migration and there's no domain to run virDomainGetJobStats on). ")
                        (reparse-symbol indented_block_body) [79337 83307])
                    ("migrateToURI" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83329 83333])
                            ("duri" variable nil (reparse-symbol function_parameters) [83335 83339])
                            ("flags" variable nil (reparse-symbol function_parameters) [83341 83346])
                            ("dname" variable nil (reparse-symbol function_parameters) [83350 83355])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [83362 83371]))                          
                        :documentation "Migrate the domain object from its current host to the destination
        host given by duri.
        
        This function is similar to virDomainMigrateToURI3, but it only supports a
        fixed set of parameters: @dname corresponds to VIR_MIGRATE_PARAM_DEST_NAME,
        and @bandwidth corresponds to VIR_MIGRATE_PARAM_BANDWIDTH.
        
        The operation of this API hinges on the VIR_MIGRATE_PEER2PEER flag.
        
        If the VIR_MIGRATE_PEER2PEER flag IS set, the @duri parameter must be a
        valid libvirt connection URI, by which the source libvirt driver can connect
        to the destination libvirt. In other words, @duri corresponds to @dconnuri
        of virDomainMigrateToURI3.
        
        If the VIR_MIGRATE_PEER2PEER flag is NOT set, the @duri parameter takes a
        hypervisor specific URI used to initiate the migration. In this case @duri
        corresponds to VIR_MIGRATE_PARAM_URI of virDomainMigrateToURI3. ")
                        (reparse-symbol indented_block_body) [83312 84544])
                    ("migrateToURI2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84567 84571])
                            ("dconnuri" variable nil (reparse-symbol function_parameters) [84573 84581])
                            ("miguri" variable nil (reparse-symbol function_parameters) [84588 84594])
                            ("dxml" variable nil (reparse-symbol function_parameters) [84601 84605])
                            ("flags" variable nil (reparse-symbol function_parameters) [84612 84617])
                            ("dname" variable nil (reparse-symbol function_parameters) [84621 84626])
                            ("bandwidth" variable nil (reparse-symbol function_parameters) [84633 84642]))                          
                        :documentation "Migrate the domain object from its current host to the destination
        host given by @dconnuri.
        
        This function is similar to virDomainMigrateToURI3, but it only supports a
        fixed set of parameters: @miguri corresponds to VIR_MIGRATE_PARAM_URI, @dxml
        is VIR_MIGRATE_PARAM_DEST_XML, @dname is VIR_MIGRATE_PARAM_DEST_NAME, and
        @bandwidth corresponds to VIR_MIGRATE_PARAM_BANDWIDTH.
        
        The operation of this API hinges on the VIR_MIGRATE_PEER2PEER flag.
        
        If the VIR_MIGRATE_PEER2PEER flag IS set, the @dconnuri parameter must be a
        valid libvirt connection URI, by which the source libvirt driver can connect
        to the destination libvirt. In other words, @dconnuri has the same semantics
        as in virDomainMigrateToURI3.
        
        If the VIR_MIGRATE_PEER2PEER flag is NOT set, the @dconnuri must be None
        and the @miguri parameter takes a hypervisor specific URI used to initiate
        the migration. In this case @miguri corresponds to VIR_MIGRATE_PARAM_URI of
        virDomainMigrateToURI3. ")
                        (reparse-symbol indented_block_body) [84549 85971])
                    ("migrateToURI3" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86052 86056])
                            ("dconnuri" variable nil (reparse-symbol function_parameters) [86058 86066])
                            ("params" variable nil (reparse-symbol function_parameters) [86068 86074])
                            ("flags" variable nil (reparse-symbol function_parameters) [86076 86081]))                          
                        :documentation "Migrate the domain object from its current host to the destination host
                    given by URI. ")
                        (reparse-symbol indented_block_body) [86034 86395])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86475 86479]))                          
                        :documentation "Get the public name for that domain ")
                        (reparse-symbol indented_block_body) [86466 86603])
                    ("numaParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86685 86689])
                            ("flags" variable nil (reparse-symbol function_parameters) [86691 86696]))                          
                        :documentation "Get the NUMA parameters ")
                        (reparse-symbol indented_block_body) [86666 86920])
                    ("openChannel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87007 87011])
                            ("name" variable nil (reparse-symbol function_parameters) [87013 87017])
                            ("st" variable nil (reparse-symbol function_parameters) [87019 87021])
                            ("flags" variable nil (reparse-symbol function_parameters) [87023 87028]))                          
                        :documentation "This opens the host interface associated with a channel device on a
        guest, if the host interface is supported.  If @name is given, it
        can match either the device alias (e.g. \"channel0\"), or the virtio
        target name (e.g. \"org.qemu.guest_agent.0\").  If @name is omitted,
        then the first channel is opened. The channel is associated with
        the passed in @st stream, which should have been opened in
        non-blocking mode for bi-directional I/O.
        
        By default, when @flags is 0, the open will fail if libvirt detects
        that the channel is already in use by another client; passing
        VIR_DOMAIN_CHANNEL_FORCE will cause libvirt to forcefully remove the
        other client prior to opening this channel. ")
                        (reparse-symbol indented_block_body) [86991 88057])
                    ("openConsole" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88078 88082])
                            ("dev_name" variable nil (reparse-symbol function_parameters) [88084 88092])
                            ("st" variable nil (reparse-symbol function_parameters) [88094 88096])
                            ("flags" variable nil (reparse-symbol function_parameters) [88098 88103]))                          
                        :documentation "This opens the backend associated with a console, serial or
        parallel port device on a guest, if the backend is supported.
        If the @dev_name is omitted, then the first console or serial
        device is opened. The console is associated with the passed
        in @st stream, which should have been opened in non-blocking
        mode for bi-directional I/O.
        
        By default, when @flags is 0, the open will fail if libvirt
        detects that the console is already in use by another client;
        passing VIR_DOMAIN_CONSOLE_FORCE will cause libvirt to forcefully
        remove the other client prior to opening this console.
        
        If flag VIR_DOMAIN_CONSOLE_SAFE the console is opened only in the
        case where the hypervisor driver supports safe (mutually exclusive)
        console handling.
        
        Older servers did not support either flag, and also did not forbid
        simultaneous clients on a console, with potentially confusing results.
        When passing @flags of 0 in order to support a wider range of server
        versions, it is up to the client to ensure mutual exclusion. ")
                        (reparse-symbol indented_block_body) [88062 89522])
                    ("openGraphics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89544 89548])
                            ("idx" variable nil (reparse-symbol function_parameters) [89550 89553])
                            ("fd" variable nil (reparse-symbol function_parameters) [89555 89557])
                            ("flags" variable nil (reparse-symbol function_parameters) [89559 89564]))                          
                        :documentation "This will attempt to connect the file descriptor @fd, to
        the graphics backend of @dom. If @dom has multiple graphics
        backends configured, then @idx will determine which one is
        opened, starting from @idx 0.
        
        To disable any authentication, pass the VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH
        constant for @flags.
        
        The caller should use an anonymous socketpair to open
        @fd before invocation.
        
        This method can only be used when connected to a local
        libvirt hypervisor, over a UNIX domain socket. Attempts
        to use this method over a TCP connection will always fail ")
                        (reparse-symbol indented_block_body) [89527 90415])
                    ("openGraphicsFD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90439 90443])
                            ("idx" variable nil (reparse-symbol function_parameters) [90445 90448])
                            ("flags" variable nil (reparse-symbol function_parameters) [90450 90455]))                          
                        :documentation "This will create a socket pair connected to the graphics backend of @dom.
        One end of the socket will be returned on success, and the other end is
        handed to the hypervisor.
        If @dom has multiple graphics backends configured, then @idx will determine
        which one is opened, starting from @idx 0.
        
        To disable any authentication, pass the VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH
        constant for @flags.
        
        This method can only be used when connected to a local
        libvirt hypervisor, over a UNIX domain socket. Attempts
        to use this method over a TCP connection will always fail. ")
                        (reparse-symbol indented_block_body) [90420 91298])
                    ("pMSuspendForDuration" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91328 91332])
                            ("target" variable nil (reparse-symbol function_parameters) [91334 91340])
                            ("duration" variable nil (reparse-symbol function_parameters) [91342 91350])
                            ("flags" variable nil (reparse-symbol function_parameters) [91352 91357]))                          
                        :documentation "Attempt to have the guest enter the given @target power management
        suspension level.  If @duration is non-zero, also schedule the guest to
        resume normal operation after that many seconds, if nothing else has
        resumed it earlier.  Some hypervisors require that @duration be 0, for
        an indefinite suspension.
        
        Dependent on hypervisor used, this may require a
        guest agent to be available, e.g. QEMU.
        
        Beware that at least for QEMU, the domain's process will be terminated
        when VIR_NODE_SUSPEND_TARGET_DISK is used and a new process will be
        launched when libvirt is asked to wake up the domain. As a result of
        this, any runtime changes, such as device hotplug or memory settings,
        are lost unless such changes were made with VIR_DOMAIN_AFFECT_CONFIG
        flag. ")
                        (reparse-symbol indented_block_body) [91303 92440])
                    ("pMWakeup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92458 92462])
                            ("flags" variable nil (reparse-symbol function_parameters) [92464 92469]))                          
                        :documentation "Inject a wakeup into the guest that previously used
        virDomainPMSuspendForDuration, rather than waiting for the
        previously requested duration (if any) to elapse. ")
                        (reparse-symbol indented_block_body) [92445 92826])
                    ("perfEvents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92904 92908])
                            ("flags" variable nil (reparse-symbol function_parameters) [92910 92915]))                          
                        :documentation "Get all perf events setting. ")
                        (reparse-symbol indented_block_body) [92889 93136])
                    ("pinEmulator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93157 93161])
                            ("cpumap" variable nil (reparse-symbol function_parameters) [93163 93169])
                            ("flags" variable nil (reparse-symbol function_parameters) [93171 93176]))                          
                        :documentation "Dynamically change the real CPUs which can be allocated to the emulator process of a domain.
                    This function requires privileged access to the hypervisor. ")
                        (reparse-symbol indented_block_body) [93141 93543])
                    ("pinIOThread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93564 93568])
                            ("iothread_val" variable nil (reparse-symbol function_parameters) [93570 93582])
                            ("cpumap" variable nil (reparse-symbol function_parameters) [93584 93590])
                            ("flags" variable nil (reparse-symbol function_parameters) [93592 93597]))                          
                        :documentation "Dynamically change the real CPUs which can be allocated to an IOThread. This function requires privileged access to the hypervisor. ")
                        (reparse-symbol indented_block_body) [93548 93937])
                    ("pinVcpu" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93954 93958])
                            ("vcpu" variable nil (reparse-symbol function_parameters) [93960 93964])
                            ("cpumap" variable nil (reparse-symbol function_parameters) [93966 93972]))                          
                        :documentation "Dynamically change the real CPUs which can be allocated to a virtual CPU. This function requires privileged access to the hypervisor. ")
                        (reparse-symbol indented_block_body) [93942 94289])
                    ("pinVcpuFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94311 94315])
                            ("vcpu" variable nil (reparse-symbol function_parameters) [94317 94321])
                            ("cpumap" variable nil (reparse-symbol function_parameters) [94323 94329])
                            ("flags" variable nil (reparse-symbol function_parameters) [94331 94336]))                          
                        :documentation "Dynamically change the real CPUs which can be allocated to a virtual CPU. This function requires privileged access to the hypervisor. ")
                        (reparse-symbol indented_block_body) [94294 94672])
                    ("reboot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94754 94758])
                            ("flags" variable nil (reparse-symbol function_parameters) [94760 94765]))                          
                        :documentation "Reboot a domain, the domain object is still usable thereafter, but
        the domain OS is being stopped for a restart.
        Note that the guest OS may ignore the request.
        Additionally, the hypervisor may check and support the domain
        'on_reboot' XML setting resulting in a domain that shuts down instead
        of rebooting.
        
        If @flags is set to zero, then the hypervisor will choose the
        method of shutdown it considers best. To have greater control
        pass one or more of the virDomainRebootFlagValues. The order
        in which the hypervisor tries each shutdown method is undefined,
        and a hypervisor is not required to support all methods.
        
        To use guest agent (VIR_DOMAIN_REBOOT_GUEST_AGENT) the domain XML
        must have <channel> configured.
        
        Due to implementation limitations in some drivers (the qemu driver,
        for instance) it is not advised to migrate or save a guest that is
        rebooting as a result of this API. Migrating such a guest can lead
        to a plain shutdown on the destination. ")
                        (reparse-symbol indented_block_body) [94743 96049])
                    ("rename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96065 96069])
                            ("new_name" variable nil (reparse-symbol function_parameters) [96071 96079])
                            ("flags" variable nil (reparse-symbol function_parameters) [96081 96086]))                          
                        :documentation "Rename a domain. New domain name is specified in the second
        argument. Depending on each driver implementation it may be
        required that domain is in a specific state.
        
        There might be some attributes and/or elements in domain XML that if no
        value provided at XML defining time, libvirt will derive their value from
        the domain name. These are not updated by this API. Users are strongly
        advised to change these after the rename was successful. ")
                        (reparse-symbol indented_block_body) [96054 96768])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96783 96787])
                            ("flags" variable nil (reparse-symbol function_parameters) [96789 96794]))                          
                        :documentation "Reset a domain immediately without any guest OS shutdown.
        Reset emulates the power reset button on a machine, where all
        hardware sees the RST line set and reinitializes internal state.
        
        Note that there is a risk of data loss caused by reset without any
        guest OS shutdown. ")
                        (reparse-symbol indented_block_body) [96773 97280])
                    ("resume" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97296 97300]))                          
                        :documentation "Resume a suspended domain, the process is restarted from the state where
        it was frozen by calling virDomainSuspend().
        This function may require privileged access
        Moreover, resume may not be supported if domain is in some
        special state like VIR_DOMAIN_PMSUSPENDED. ")
                        (reparse-symbol indented_block_body) [97285 97763])
                    ("revertToSnapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97847 97851])
                            ("snap" variable nil (reparse-symbol function_parameters) [97853 97857])
                            ("flags" variable nil (reparse-symbol function_parameters) [97859 97864]))                          
                        :documentation "revert the domain to the given snapshot ")
                        (reparse-symbol indented_block_body) [97826 98181])
                    ("save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98261 98265])
                            ("to" variable nil (reparse-symbol function_parameters) [98267 98269]))                          
                        :documentation "This method will suspend a domain and save its memory contents to
        a file on disk. After the call, if successful, the domain is not
        listed as running anymore (this ends the life of a transient domain).
        Use virDomainRestore() to restore a domain after saving.
        
        See virDomainSaveFlags() for more control.  Also, a save file can
        be inspected or modified slightly with virDomainSaveImageGetXMLDesc()
        and virDomainSaveImageDefineXML(). ")
                        (reparse-symbol indented_block_body) [98252 98922])
                    ("saveFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98941 98945])
                            ("to" variable nil (reparse-symbol function_parameters) [98947 98949])
                            ("dxml" variable nil (reparse-symbol function_parameters) [98951 98955])
                            ("flags" variable nil (reparse-symbol function_parameters) [98962 98967]))                          
                        :documentation "This method will suspend a domain and save its memory contents to
        a file on disk. After the call, if successful, the domain is not
        listed as running anymore (this ends the life of a transient domain).
        Use virDomainRestore() to restore a domain after saving.
        
        If the hypervisor supports it, @dxml can be used to alter
        host-specific portions of the domain XML that will be used when
        restoring an image.  For example, it is possible to alter the
        backing filename that is associated with a disk device, in order to
        prepare for file renaming done as part of backing up the disk
        device while the domain is stopped.
        
        If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
        attempt to bypass the file system cache while creating the file, or
        fail if it cannot do so for the given system; this can allow less
        pressure on file system cache, but also risks slowing saves to NFS.
        
        Normally, the saved state file will remember whether the domain was
        running or paused, and restore defaults to the same state.
        Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
        @flags will override what state gets saved into the file.  These
        two flags are mutually exclusive.
        
        A save file can be inspected or modified slightly with
        virDomainSaveImageGetXMLDesc() and virDomainSaveImageDefineXML().
        
        Some hypervisors may prevent this operation if there is a current
        block copy operation; in that case, use virDomainBlockJobAbort()
        to stop the block copy first. ")
                        (reparse-symbol indented_block_body) [98927 100837])
                    ("schedulerParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100924 100928]))                          
                        :documentation "Get the scheduler parameters, the @params array will be filled with the values. ")
                        (reparse-symbol indented_block_body) [100900 101209])
                    ("schedulerParametersFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101243 101247])
                            ("flags" variable nil (reparse-symbol function_parameters) [101249 101254]))                          
                        :documentation "Get the scheduler parameters ")
                        (reparse-symbol indented_block_body) [101214 101503])
                    ("schedulerType" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101526 101530]))                          
                        :documentation "Get the scheduler type. ")
                        (reparse-symbol indented_block_body) [101508 101743])
                    ("screenshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101829 101833])
                            ("stream" variable nil (reparse-symbol function_parameters) [101835 101841])
                            ("screen" variable nil (reparse-symbol function_parameters) [101843 101849])
                            ("flags" variable nil (reparse-symbol function_parameters) [101851 101856]))                          
                        :documentation "Take a screenshot of current domain console as a stream. The image format
        is hypervisor specific. Moreover, some hypervisors supports multiple
        displays per domain. These can be distinguished by @screen argument.
        
        This call sets up a stream; subsequent use of stream API is necessary
        to transfer actual data, determine how much data is successfully
        transferred, and detect any errors.
        
        The screen ID is the sequential number of screen. In case of multiple
        graphics cards, heads are enumerated before devices, e.g. having
        two graphics cards, both with four heads, screen ID 5 addresses
        the second head on the second card. ")
                        (reparse-symbol indented_block_body) [101814 102849])
                    ("securityLabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102930 102934]))                          
                        :documentation "Extract information about the domain security label. Only the first label will be returned. ")
                        (reparse-symbol indented_block_body) [102912 103215])
                    ("securityLabelList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103242 103246]))                          
                        :documentation "Extract information about the domain security label. A list of all labels will be returned. ")
                        (reparse-symbol indented_block_body) [103220 103535])
                    ("sendKey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103618 103622])
                            ("codeset" variable nil (reparse-symbol function_parameters) [103624 103631])
                            ("holdtime" variable nil (reparse-symbol function_parameters) [103633 103641])
                            ("keycodes" variable nil (reparse-symbol function_parameters) [103643 103651])
                            ("nkeycodes" variable nil (reparse-symbol function_parameters) [103653 103662])
                            ("flags" variable nil (reparse-symbol function_parameters) [103664 103669]))                          
                        :documentation "Send key(s) to the guest. ")
                        (reparse-symbol indented_block_body) [103606 103913])
                    ("sendProcessSignal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103940 103944])
                            ("pid_value" variable nil (reparse-symbol function_parameters) [103946 103955])
                            ("signum" variable nil (reparse-symbol function_parameters) [103957 103963])
                            ("flags" variable nil (reparse-symbol function_parameters) [103965 103970]))                          
                        :documentation "Send a signal to the designated process in the guest
        
        The signal numbers must be taken from the virDomainProcessSignal
        enum. These will be translated to the corresponding signal
        number for the guest OS, by the guest agent delivering the
        signal. If there is no mapping from virDomainProcessSignal to
        the native OS signals, this API will report an error.
        
        If @pid_value is an integer greater than zero, it is
        treated as a process ID. If @pid_value is an integer
        less than zero, it is treated as a process group ID.
        All the @pid_value numbers are from the container/guest
        namespace. The value zero is not valid.
        
        Not all hypervisors will support sending signals to
        arbitrary processes or process groups. If this API is
        implemented the minimum requirement is to be able to
        use @pid_value == 1 (i.e. kill init). No other value is
        required to be supported.
        
        If the @signum is VIR_DOMAIN_PROCESS_SIGNAL_NOP then this
        API will simply report whether the process is running in
        the container/guest. ")
                        (reparse-symbol indented_block_body) [103918 105351])
                    ("setAutostart" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105373 105377])
                            ("autostart" variable nil (reparse-symbol function_parameters) [105379 105388]))                          
                        :documentation "Configure the domain to be automatically started
        when the host machine boots. ")
                        (reparse-symbol indented_block_body) [105356 105664])
                    ("setBlkioParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105750 105754])
                            ("params" variable nil (reparse-symbol function_parameters) [105756 105762])
                            ("flags" variable nil (reparse-symbol function_parameters) [105764 105769]))                          
                        :documentation "Change the blkio tunables ")
                        (reparse-symbol indented_block_body) [105727 106003])
                    ("setBlockIoTune" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106027 106031])
                            ("disk" variable nil (reparse-symbol function_parameters) [106033 106037])
                            ("params" variable nil (reparse-symbol function_parameters) [106039 106045])
                            ("flags" variable nil (reparse-symbol function_parameters) [106047 106052]))                          
                        :documentation "Change the I/O tunables for a block device ")
                        (reparse-symbol indented_block_body) [106008 106301])
                    ("setBlockThreshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106394 106398])
                            ("dev" variable nil (reparse-symbol function_parameters) [106400 106403])
                            ("threshold" variable nil (reparse-symbol function_parameters) [106405 106414])
                            ("flags" variable nil (reparse-symbol function_parameters) [106416 106421]))                          
                        :documentation "Set the threshold level for delivering the
        VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD if the device or backing chain element
        described by @dev is written beyond the set threshold level. The threshold
        level is unset once the event fires. The event might not be delivered at all
        if libvirtd was not running at the moment when the threshold was reached.
        
        Hypervisors report the last written sector of an image in the bulk stats API
        (virConnectGetAllDomainStats/virDomainListGetStats) as
        \"block.<num>.allocation\" in the VIR_DOMAIN_STATS_BLOCK group. The current
        threshold value is reported as \"block.<num>.threshold\".
        
        This event allows to use thin-provisioned storage which needs management
        tools to grow it without the need for polling of the data. ")
                        (reparse-symbol indented_block_body) [106372 107471])
                    ("setGuestVcpus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107494 107498])
                            ("cpumap" variable nil (reparse-symbol function_parameters) [107500 107506])
                            ("state" variable nil (reparse-symbol function_parameters) [107508 107513])
                            ("flags" variable nil (reparse-symbol function_parameters) [107515 107520]))                          
                        :documentation "Sets state of individual vcpus described by @cpumap via guest agent. Other
        vcpus are not modified.
        
        This API requires the VM to run. Various hypervisors or guest agent
        implementation may limit to operate on just 1 vCPU per call.
        
        @cpumap is a list of vCPU numbers. Its syntax is a comma separated list and
        a special markup using '-' and '^' (ex. '0-4', '0-3,^2'). The '-' denotes
        the range and the '^' denotes exclusive. The expression is sequentially
        evaluated, so \"0-15,^8\" is identical to \"9-14,0-7,15\" but not identical to
        \"^8,0-15\".
        
        Note that OSes (notably Linux) may require vCPU 0 to stay online to support
        low-level features a S3 sleep. ")
                        (reparse-symbol indented_block_body) [107476 108475])
                    ("setInterfaceParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108565 108569])
                            ("device" variable nil (reparse-symbol function_parameters) [108571 108577])
                            ("params" variable nil (reparse-symbol function_parameters) [108579 108585])
                            ("flags" variable nil (reparse-symbol function_parameters) [108587 108592]))                          
                        :documentation "Change the bandwidth tunables for a interface device ")
                        (reparse-symbol indented_block_body) [108538 108869])
                    ("setLifecycleAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108963 108967])
                            ("type" variable nil (reparse-symbol function_parameters) [108969 108973])
                            ("action" variable nil (reparse-symbol function_parameters) [108975 108981])
                            ("flags" variable nil (reparse-symbol function_parameters) [108983 108988]))                          
                        :documentation "Changes the actions of lifecycle events for domain represented as
        <on_$type>$action</on_$type> in the domain XML.
        
        QEMU driver has a limitation that if all lifecycle events are set
        to destroy when the domain is started, it's not possible to change
        any action for running domain. ")
                        (reparse-symbol indented_block_body) [108940 109521])
                    ("setMaxMemory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109543 109547])
                            ("memory" variable nil (reparse-symbol function_parameters) [109549 109555]))                          
                        :documentation "Dynamically change the maximum amount of physical memory allocated to a
        domain. If domain is None, then this change the amount of memory reserved
        to Domain0 i.e. the domain where the application runs.
        This function may require privileged access to the hypervisor.
        
        This command is hypervisor-specific for whether active, persistent,
        or both configurations are changed; for more control, use
        virDomainSetMemoryFlags(). ")
                        (reparse-symbol indented_block_body) [109526 110216])
                    ("setMemory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110235 110239])
                            ("memory" variable nil (reparse-symbol function_parameters) [110241 110247]))                          
                        :documentation "Dynamically change the target amount of physical memory allocated to a
        domain. If domain is None, then this change the amount of memory reserved
        to Domain0 i.e. the domain where the application runs.
        This function may require privileged access to the hypervisor.
        
        This command is hypervisor-specific for whether active, persistent,
        or both configurations are changed; for more control, use
        virDomainSetMemoryFlags(). ")
                        (reparse-symbol indented_block_body) [110221 110901])
                    ("setMemoryFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110925 110929])
                            ("memory" variable nil (reparse-symbol function_parameters) [110931 110937])
                            ("flags" variable nil (reparse-symbol function_parameters) [110939 110944]))                          
                        :documentation "Dynamically change the target amount of physical memory allocated to a
        domain. If domain is None, then this change the amount of memory reserved
        to Domain0 i.e. the domain where the application runs.
        This function may require privileged access to the hypervisor.
        
        @flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
        Both flags may be set. If VIR_DOMAIN_AFFECT_LIVE is set, the change affects
        a running domain and will fail if domain is not active.
        If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
        and will fail for transient domains. If neither flag is specified
        (that is, @flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain
        modifies persistent setup, while an active domain is hypervisor-dependent
        on whether just live or both live and persistent state is changed.
        If VIR_DOMAIN_MEM_MAXIMUM is set, the change affects domain's maximum memory
        size rather than current memory size.
        Not all hypervisors can support all flag combinations. ")
                        (reparse-symbol indented_block_body) [110906 112253])
                    ("setMemoryParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112340 112344])
                            ("params" variable nil (reparse-symbol function_parameters) [112346 112352])
                            ("flags" variable nil (reparse-symbol function_parameters) [112354 112359]))                          
                        :documentation "Change the memory tunables ")
                        (reparse-symbol indented_block_body) [112316 112596])
                    ("setMemoryStatsPeriod" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112692 112696])
                            ("period" variable nil (reparse-symbol function_parameters) [112698 112704])
                            ("flags" variable nil (reparse-symbol function_parameters) [112706 112711]))                          
                        :documentation "Dynamically change the domain memory balloon driver statistics collection
        period. Use 0 to disable and a positive value to enable.
        
        @flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
        Both flags may be set. If VIR_DOMAIN_AFFECT_LIVE is set, the change affects
        a running domain and will fail if domain is not active.
        If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
        and will fail for transient domains. If neither flag is specified
        (that is, @flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain
        modifies persistent setup, while an active domain is hypervisor-dependent
        on whether just live or both live and persistent state is changed.
        
        Not all hypervisors can support all flag combinations. ")
                        (reparse-symbol indented_block_body) [112667 113762])
                    ("setMetadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113783 113787])
                            ("type" variable nil (reparse-symbol function_parameters) [113789 113793])
                            ("metadata" variable nil (reparse-symbol function_parameters) [113795 113803])
                            ("key" variable nil (reparse-symbol function_parameters) [113805 113808])
                            ("uri" variable nil (reparse-symbol function_parameters) [113810 113813])
                            ("flags" variable nil (reparse-symbol function_parameters) [113815 113820]))                          
                        :documentation "Sets the appropriate domain element given by @type to the
        value of @metadata.  A @type of VIR_DOMAIN_METADATA_DESCRIPTION
        is free-form text; VIR_DOMAIN_METADATA_TITLE is free-form, but no
        newlines are permitted, and should be short (although the length is
        not enforced). For these two options @key and @uri are irrelevant and
        must be set to None.
        
        For type VIR_DOMAIN_METADATA_ELEMENT @metadata  must be well-formed
        XML belonging to namespace defined by @uri with local name @key.
        
        Passing None for @metadata says to remove that element from the
        domain XML (passing the empty string leaves the element present).
        
        The resulting metadata will be present in virDomainGetXMLDesc(),
        as well as quick access through virDomainGetMetadata().
        
        @flags controls whether the live domain, persistent configuration,
        or both will be modified. ")
                        (reparse-symbol indented_block_body) [113767 114996])
                    ("setNumaParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115081 115085])
                            ("params" variable nil (reparse-symbol function_parameters) [115087 115093])
                            ("flags" variable nil (reparse-symbol function_parameters) [115095 115100]))                          
                        :documentation "Change the NUMA tunables ")
                        (reparse-symbol indented_block_body) [115059 115331])
                    ("setPerfEvents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115354 115358])
                            ("params" variable nil (reparse-symbol function_parameters) [115360 115366])
                            ("flags" variable nil (reparse-symbol function_parameters) [115368 115373]))                          
                        :documentation "Enable or disable the particular list of perf events ")
                        (reparse-symbol indented_block_body) [115336 115624])
                    ("setSchedulerParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115656 115660])
                            ("params" variable nil (reparse-symbol function_parameters) [115662 115668]))                          
                        :documentation "Change the scheduler parameters ")
                        (reparse-symbol indented_block_body) [115629 115907])
                    ("setSchedulerParametersFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115944 115948])
                            ("params" variable nil (reparse-symbol function_parameters) [115950 115956])
                            ("flags" variable nil (reparse-symbol function_parameters) [115958 115963]))                          
                        :documentation "Change the scheduler parameters ")
                        (reparse-symbol indented_block_body) [115912 116221])
                    ("setUserPassword" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116312 116316])
                            ("user" variable nil (reparse-symbol function_parameters) [116318 116322])
                            ("password" variable nil (reparse-symbol function_parameters) [116324 116332])
                            ("flags" variable nil (reparse-symbol function_parameters) [116334 116339]))                          
                        :documentation "Sets the @user password to the value specified by @password.
        If @flags contain VIR_DOMAIN_PASSWORD_ENCRYPTED, the password
        is assumed to be encrypted by the method required by the guest OS.
        
        Please note that some hypervisors may require guest agent to
        be configured and running in order to be able to run this API. ")
                        (reparse-symbol indented_block_body) [116292 116904])
                    ("setVcpu" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116921 116925])
                            ("vcpumap" variable nil (reparse-symbol function_parameters) [116927 116934])
                            ("state" variable nil (reparse-symbol function_parameters) [116936 116941])
                            ("flags" variable nil (reparse-symbol function_parameters) [116943 116948]))                          
                        :documentation "Enables/disables individual vcpus described by @vcpumap in the hypervisor.
        
        Various hypervisor implementations may limit to operate on just 1
        hotpluggable entity (which may contain multiple vCPUs on certain platforms).
        
        Note that OSes and hypervisors may require vCPU 0 to stay online. ")
                        (reparse-symbol indented_block_body) [116909 117468])
                    ("setVcpus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117486 117490])
                            ("nvcpus" variable nil (reparse-symbol function_parameters) [117492 117498]))                          
                        :documentation "Dynamically change the number of virtual CPUs used by the domain.
        Note that this call may fail if the underlying virtualization hypervisor
        does not support it or if growing the number is arbitrarily limited.
        This function may require privileged access to the hypervisor.
        
        Note that if this call is executed before the guest has finished booting,
        the guest may fail to process the change.
        
        This command only changes the runtime configuration of the domain,
        so can only be called on an active domain.  It is hypervisor-dependent
        whether it also affects persistent configuration; for more control,
        use virDomainSetVcpusFlags(). ")
                        (reparse-symbol indented_block_body) [117473 118390])
                    ("setVcpusFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118413 118417])
                            ("nvcpus" variable nil (reparse-symbol function_parameters) [118419 118425])
                            ("flags" variable nil (reparse-symbol function_parameters) [118427 118432]))                          
                        :documentation "Dynamically change the number of virtual CPUs used by the domain.
        Note that this call may fail if the underlying virtualization hypervisor
        does not support it or if growing the number is arbitrarily limited.
        This function may require privileged access to the hypervisor.
        
        @flags may include VIR_DOMAIN_AFFECT_LIVE to affect a running
        domain (which may fail if domain is not active), or
        VIR_DOMAIN_AFFECT_CONFIG to affect the next boot via the XML
        description of the domain.  Both flags may be set.
        If neither flag is specified (that is, @flags is VIR_DOMAIN_AFFECT_CURRENT),
        then an inactive domain modifies persistent setup, while an active domain
        is hypervisor-dependent on whether just live or both live and persistent
        state is changed.
        
        Note that if this call is executed before the guest has finished booting,
        the guest may fail to process the change.
        
        If @flags includes VIR_DOMAIN_VCPU_MAXIMUM, then
        VIR_DOMAIN_AFFECT_LIVE must be clear, and only the maximum virtual
        CPU limit is altered; generally, this value must be less than or
        equal to virConnectGetMaxVcpus().  Otherwise, this call affects the
        current virtual CPU limit, which must be less than or equal to the
        maximum limit. Note that hypervisors may not allow changing the maximum
        vcpu count if processor topology is specified.
        
        If @flags includes VIR_DOMAIN_VCPU_GUEST, then the state of processors is
        modified inside the guest instead of the hypervisor. This flag can only
        be used with live guests and is incompatible with VIR_DOMAIN_VCPU_MAXIMUM.
        The usage of this flag may require a guest agent configured.
        
        Not all hypervisors can support all flag combinations. ")
                        (reparse-symbol indented_block_body) [118395 120502])
                    ("shutdown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120520 120524]))                          
                        :documentation "Shutdown a domain, the domain object is still usable thereafter, but
        the domain OS is being stopped. Note that the guest OS may ignore the
        request. Additionally, the hypervisor may check and support the domain
        'on_poweroff' XML setting resulting in a domain that reboots instead of
        shutting down. For guests that react to a shutdown request, the differences
        from virDomainDestroy() are that the guests disk storage will be in a
        stable state rather than having the (virtual) power cord pulled, and
        this command returns as soon as the shutdown request is issued rather
        than blocking until the guest is no longer running.
        
        If the domain is transient and has any snapshot metadata (see
        virDomainSnapshotNum()), then that metadata will automatically
        be deleted when the domain quits. ")
                        (reparse-symbol indented_block_body) [120507 121570])
                    ("shutdownFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121593 121597])
                            ("flags" variable nil (reparse-symbol function_parameters) [121599 121604]))                          
                        :documentation "Shutdown a domain, the domain object is still usable thereafter but
        the domain OS is being stopped. Note that the guest OS may ignore the
        request. Additionally, the hypervisor may check and support the domain
        'on_poweroff' XML setting resulting in a domain that reboots instead of
        shutting down. For guests that react to a shutdown request, the differences
        from virDomainDestroy() are that the guest's disk storage will be in a
        stable state rather than having the (virtual) power cord pulled, and
        this command returns as soon as the shutdown request is issued rather
        than blocking until the guest is no longer running.
        
        If the domain is transient and has any snapshot metadata (see
        virDomainSnapshotNum()), then that metadata will automatically
        be deleted when the domain quits.
        
        If @flags is set to zero, then the hypervisor will choose the
        method of shutdown it considers best. To have greater control
        pass one or more of the virDomainShutdownFlagValues. The order
        in which the hypervisor tries each shutdown method is undefined,
        and a hypervisor is not required to support all methods.
        
        To use guest agent (VIR_DOMAIN_SHUTDOWN_GUEST_AGENT) the domain XML
        must have <channel> configured. ")
                        (reparse-symbol indented_block_body) [121575 123152])
                    ("snapshotCreateXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123254 123258])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [123260 123267])
                            ("flags" variable nil (reparse-symbol function_parameters) [123269 123274]))                          
                        :documentation "Creates a new snapshot of a domain based on the snapshot xml
        contained in xmlDesc.
        
        If @flags is 0, the domain can be active, in which case the
        snapshot will be a system checkpoint (both disk state and runtime
        VM state such as RAM contents), where reverting to the snapshot is
        the same as resuming from hibernation (TCP connections may have
        timed out, but everything else picks up where it left off); or
        the domain can be inactive, in which case the snapshot includes
        just the disk state prior to booting.  The newly created snapshot
        becomes current (see virDomainSnapshotCurrent()), and is a child
        of any previous current snapshot.
        
        If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE, then this
        is a request to reinstate snapshot metadata that was previously
        discarded, rather than creating a new snapshot.  This can be used
        to recreate a snapshot hierarchy on a destination, then remove it
        on the source, in order to allow migration (since migration
        normally fails if snapshot metadata still remains on the source
        machine).  When redefining snapshot metadata, the current snapshot
        will not be altered unless the VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT
        flag is also present.  It is an error to request the
        VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT flag without
        VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.  On some hypervisors,
        redefining an existing snapshot can be used to alter host-specific
        portions of the domain XML to be used during revert (such as
        backing filenames associated with disk devices), but must not alter
        guest-visible layout.  When redefining a snapshot name that does
        not exist, the hypervisor may validate that reverting to the
        snapshot appears to be possible (for example, disk images have
        snapshot contents by the requested name).  Not all hypervisors
        support these flags.
        
        If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA, then the
        domain's disk images are modified according to @xmlDesc, but then
        the just-created snapshot has its metadata deleted.  This flag is
        incompatible with VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.
        
        If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_HALT, then the domain
        will be inactive after the snapshot completes, regardless of whether
        it was active before; otherwise, a running domain will still be
        running after the snapshot.  This flag is invalid on transient domains,
        and is incompatible with VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.
        
        If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_LIVE, then the domain
        is not paused while creating the snapshot. This increases the size
        of the memory dump file, but reduces downtime of the guest while
        taking the snapshot. Some hypervisors only support this flag during
        external checkpoints.
        
        If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY, then the
        snapshot will be limited to the disks described in @xmlDesc, and no
        VM state will be saved.  For an active guest, the disk image may be
        inconsistent (as if power had been pulled), and specifying this
        with the VIR_DOMAIN_SNAPSHOT_CREATE_HALT flag risks data loss.
        
        If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE, then the
        libvirt will attempt to use guest agent to freeze and thaw all
        file systems in use within domain OS. However, if the guest agent
        is not present, an error is thrown. Moreover, this flag requires
        VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY to be passed as well.
        
        By default, if the snapshot involves external files, and any of the
        destination files already exist as a non-empty regular file, the
        snapshot is rejected to avoid losing contents of those files.
        However, if @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT,
        then the destination files must be pre-created manually with
        the correct image format and metadata including backing store path
        (this allows a management app to pre-create files with relative backing
        file names, rather than the default of creating with absolute backing
        file names). Note that only the file specified in the snapshot XML is
        inserted as a snapshot thus setting incorrect metadata in the pre-created
        image may lead to the VM being unable to start or other block jobs may fail.
        
        Be aware that although libvirt prefers to report errors up front with
        no other effect, some hypervisors have certain types of failures where
        the overall command can easily fail even though the guest configuration
        was partially altered (for example, if a disk snapshot request for two
        disks fails on the second disk, but the first disk alteration cannot be
        rolled back).  If this API call fails, it is therefore normally
        necessary to follow up with virDomainGetXMLDesc() and check each disk
        to determine if any partial changes occurred.  However, if @flags
        contains VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC, then libvirt guarantees
        that this command will not alter any disks unless the entire set of
        changes can be done atomically, making failure recovery simpler (note
        that it is still possible to fail after disks have changed, but only
        in the much rarer cases of running out of memory or disk space).
        
        Some hypervisors may prevent this operation if there is a current
        block copy operation; in that case, use virDomainBlockJobAbort()
        to stop the block copy first.
        
        virDomainSnapshotFree should be used to free the resources after the
        snapshot object is no longer needed. ")
                        (reparse-symbol indented_block_body) [123232 129508])
                    ("snapshotCurrent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129533 129537])
                            ("flags" variable nil (reparse-symbol function_parameters) [129539 129544]))                          
                        :documentation "Get the current snapshot for a domain, if any.
        
        virDomainSnapshotFree should be used to free the resources after the
        snapshot object is no longer needed. ")
                        (reparse-symbol indented_block_body) [129513 129967])
                    ("snapshotListNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130052 130056])
                            ("flags" variable nil (reparse-symbol function_parameters) [130058 130063]))                          
                        :documentation "collect the list of snapshot names for the given domain ")
                        (reparse-symbol indented_block_body) [130030 130319])
                    ("snapshotLookupByName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130424 130428])
                            ("name" variable nil (reparse-symbol function_parameters) [130430 130434])
                            ("flags" variable nil (reparse-symbol function_parameters) [130436 130441]))                          
                        :documentation "Try to lookup a domain snapshot based on its name. ")
                        (reparse-symbol indented_block_body) [130399 130753])
                    ("snapshotNum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130774 130778])
                            ("flags" variable nil (reparse-symbol function_parameters) [130780 130785]))                          
                        :documentation "Provides the number of domain snapshots for this domain.
        
        By default, this command covers all snapshots; it is also possible to
        limit things to just snapshots with no parents, when @flags includes
        VIR_DOMAIN_SNAPSHOT_LIST_ROOTS.  Additional filters are provided in
        groups, where each group contains bits that describe mutually exclusive
        attributes of a snapshot, and where all bits within a group describe
        all possible snapshots.  Some hypervisors might reject explicit bits
        from a group where the hypervisor cannot make a distinction.  For a
        group supported by a given hypervisor, the behavior when no bits of a
        group are set is identical to the behavior when all bits in that group
        are set.  When setting bits from more than one group, it is possible to
        select an impossible combination, in that case a hypervisor may return
        either 0 or an error.
        
        The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
        VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
        have no further children (a leaf snapshot).
        
        The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
        VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
        whether they have metadata that would prevent the removal of the last
        reference to a domain.
        
        The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
        VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
        for filtering snapshots based on what domain state is tracked by the
        snapshot.
        
        The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
        VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
        whether the snapshot is stored inside the disk images or as
        additional files. ")
                        (reparse-symbol indented_block_body) [130758 132916])
                    ("state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132989 132993])
                            ("flags" variable nil (reparse-symbol function_parameters) [132995 133000]))                          
                        :documentation "Extract domain state. ")
                        (reparse-symbol indented_block_body) [132979 133204])
                    ("suspend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133287 133291]))                          
                        :documentation "Suspends an active domain, the process is frozen without further access
        to CPU resources and I/O but the memory used by the domain at the
        hypervisor level will stay allocated. Use virDomainResume() to reactivate
        the domain.
        This function may require privileged access.
        Moreover, suspend may not be supported if domain is in some
        special state like VIR_DOMAIN_PMSUSPENDED. ")
                        (reparse-symbol indented_block_body) [133275 133880])
                    ("undefine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133898 133902]))                          
                        :documentation "Undefine a domain. If the domain is running, it's converted to
        transient domain, without stopping it. If the domain is inactive,
        the domain configuration is removed.
        
        If the domain has a managed save image (see
        virDomainHasManagedSaveImage()), or if it is inactive and has any
        snapshot metadata (see virDomainSnapshotNum()), then the undefine will
        fail. See virDomainUndefineFlags() for more control. ")
                        (reparse-symbol indented_block_body) [133885 134530])
                    ("undefineFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134553 134557])
                            ("flags" variable nil (reparse-symbol function_parameters) [134559 134564]))                          
                        :documentation "Undefine a domain. If the domain is running, it's converted to
        transient domain, without stopping it. If the domain is inactive,
        the domain configuration is removed.
        
        If the domain has a managed save image (see virDomainHasManagedSaveImage()),
        then including VIR_DOMAIN_UNDEFINE_MANAGED_SAVE in @flags will also remove
        that file, and omitting the flag will cause the undefine process to fail.
        
        If the domain is inactive and has any snapshot metadata (see
        virDomainSnapshotNum()), then including
        VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA in @flags will also remove
        that metadata.  Omitting the flag will cause the undefine of an
        inactive domain to fail.  Active snapshots will retain snapshot
        metadata until the (now-transient) domain halts, regardless of
        whether this flag is present.  On hypervisors where snapshots do
        not use libvirt metadata, this flag has no effect.
        
        If the domain has any nvram specified, the undefine process will fail
        unless VIR_DOMAIN_UNDEFINE_KEEP_NVRAM is specified, or if
        VIR_DOMAIN_UNDEFINE_NVRAM is specified to remove the nvram file. ")
                        (reparse-symbol indented_block_body) [134535 135968])
                    ("updateDeviceFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135995 135999])
                            ("xml" variable nil (reparse-symbol function_parameters) [136001 136004])
                            ("flags" variable nil (reparse-symbol function_parameters) [136006 136011]))                          
                        :documentation "Change a virtual device on a domain, using the flags parameter
        to control how the device is changed.  VIR_DOMAIN_AFFECT_CURRENT
        specifies that the device change is made based on current domain
        state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
        changed on the active domain instance only and is not added to the
        persisted domain configuration. VIR_DOMAIN_AFFECT_CONFIG
        specifies that the device shall be changed on the persisted domain
        configuration only.  Note that the target hypervisor must return an
        error if unable to satisfy flags.  E.g. the hypervisor driver will
        return failure if LIVE is specified but it only supports modifying the
        persisted device allocation.
        
        This method is used for actions such changing CDROM/Floppy device
        media, altering the graphics configuration such as password,
        reconfiguring the NIC device backend connectivity, etc.
        
        The supplied XML description of the device should contain all
        the information that is found in the corresponding domain XML.
        Leaving out any piece of information may be treated as a
        request for its removal, which may be denied. For instance,
        when users want to change CDROM media only for live XML, they
        must provide live disk XML as found in the corresponding live
        domain XML with only the disk path changed. ")
                        (reparse-symbol indented_block_body) [135973 137670])
                    ("vcpuPinInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137749 137753])
                            ("flags" variable nil (reparse-symbol function_parameters) [137755 137760]))                          
                        :documentation "Query the CPU affinity setting of all virtual CPUs of domain ")
                        (reparse-symbol indented_block_body) [137733 138015])
                    ("vcpus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138030 138034]))                          
                        :documentation "Extract information about virtual CPUs of domain, store it in info array and also in cpumaps. ")
                        (reparse-symbol indented_block_body) [138020 138301])
                    ("vcpusFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138387 138391])
                            ("flags" variable nil (reparse-symbol function_parameters) [138393 138398]))                          
                        :documentation "Query the number of virtual CPUs used by the domain.  Note that
        this call may fail if the underlying virtualization hypervisor does
        not support it.  This function may require privileged access to the
        hypervisor.
        
        If @flags includes VIR_DOMAIN_AFFECT_LIVE, this will query a
        running domain (which will fail if domain is not active); if
        it includes VIR_DOMAIN_AFFECT_CONFIG, this will query the XML
        description of the domain.  It is an error to set both flags.
        If neither flag is set (that is, VIR_DOMAIN_AFFECT_CURRENT),
        then the configuration queried depends on whether the domain
        is currently running.
        
        If @flags includes VIR_DOMAIN_VCPU_MAXIMUM, then the maximum
        virtual CPU limit is queried.  Otherwise, this call queries the
        current virtual CPU count.
        
        If @flags includes VIR_DOMAIN_VCPU_GUEST, then the state of the processors
        is queried in the guest instead of the hypervisor. This flag is only usable
        on live domains. Guest agent may be needed for this flag to be available. ")
                        (reparse-symbol indented_block_body) [138372 139722])
                    ("listAllSnapshots" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139815 139819])
                            ("flags" variable nil (reparse-symbol function_parameters) [139821 139826]))                          
                        :documentation "List all snapshots and returns a list of snapshot objects")
                        (reparse-symbol indented_block_body) [139794 140218])
                    ("createWithFiles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140244 140248])
                            ("files" variable nil (reparse-symbol function_parameters) [140250 140255])
                            ("flags" variable nil (reparse-symbol function_parameters) [140257 140262]))                          
                        :documentation "Launch a defined domain. If the call succeeds the domain moves from the
        defined to the running domains pools.

        @files provides an array of file descriptors which will be
        made available to the 'init' process of the guest. The file
        handles exposed to the guest will be renumbered to start
        from 3 (ie immediately following stderr). This is only
        supported for guests which use container based virtualization
        technology.

        If the VIR_DOMAIN_START_PAUSED flag is set, or if the guest domain
        has a managed save image that requested paused state (see
        virDomainManagedSave()) the guest domain will be started, but its
        CPUs will remain paused. The CPUs can later be manually started
        using virDomainResume().  In all other cases, the guest domain will
        be running.

        If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
        domain will be automatically destroyed when the virConnectPtr
        object is finally released. This will also happen if the
        client application crashes / loses its connection to the
        libvirtd daemon. Any domains marked for auto destroy will
        block attempts at migration, save-to-file, or snapshots.

        If the VIR_DOMAIN_START_BYPASS_CACHE flag is set, and there is a
        managed save file for this domain (created by virDomainManagedSave()),
        then libvirt will attempt to bypass the file system cache while restoring
        the file, or fail if it cannot do so for the given system; this can allow
        less pressure on file system cache, but also risks slowing loads from NFS.

        If the VIR_DOMAIN_START_FORCE_BOOT flag is set, then any managed save
        file for this domain is discarded, and the domain boots from scratch. ")
                        (reparse-symbol indented_block_body) [140224 142275])
                    ("fsFreeze" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142293 142297])
                            ("mountpoints" variable nil (reparse-symbol function_parameters) [142299 142310])
                            ("flags" variable nil (reparse-symbol function_parameters) [142317 142322]))                          
                        :documentation "Freeze specified filesystems within the guest ")
                        (reparse-symbol indented_block_body) [142280 142561])
                    ("fsThaw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142577 142581])
                            ("mountpoints" variable nil (reparse-symbol function_parameters) [142583 142594])
                            ("flags" variable nil (reparse-symbol function_parameters) [142601 142606]))                          
                        :documentation "Thaw specified filesystems within the guest ")
                        (reparse-symbol indented_block_body) [142566 142839])
                    ("getTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142856 142860])
                            ("flags" variable nil (reparse-symbol function_parameters) [142862 142867]))                          
                        :documentation "Extract information about guest time ")
                        (reparse-symbol indented_block_body) [142844 143084])
                    ("setTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143101 143105])
                            ("time" variable nil (reparse-symbol function_parameters) [143107 143111])
                            ("flags" variable nil (reparse-symbol function_parameters) [143118 143123]))                          
                        :documentation "Set guest time to the given value. @time is a dict containing
        'seconds' field for seconds and 'nseconds' field for nanoseconds ")
                        (reparse-symbol indented_block_body) [143089 143442]))                  
                :type "class")
                nil [16326 143442])
            ("virNetwork" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [143518 143535])
                            ("if" code nil (reparse-symbol indented_block_body) [143544 143685])
                            ("self" variable nil (reparse-symbol indented_block_body) [143693 143707]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143486 143490])
                            ("conn" variable nil (reparse-symbol function_parameters) [143492 143496])
                            ("_obj" variable nil (reparse-symbol function_parameters) [143498 143502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [143473 143708])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143725 143729]))                          )
                        (reparse-symbol indented_block_body) [143713 143834])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143851 143855]))                          )
                        (reparse-symbol indented_block_body) [143839 143884])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143903 143907]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [143889 144013])
                    ("DHCPLeases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144092 144096])
                            ("mac" variable nil (reparse-symbol function_parameters) [144098 144101])
                            ("flags" variable nil (reparse-symbol function_parameters) [144108 144113]))                          
                        :documentation "Returns a list of dhcp leases for interfaces connected to the given virtual network ")
                        (reparse-symbol indented_block_body) [144077 144396])
                    ("UUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144410 144414]))                          
                        :documentation "Extract the UUID unique Identifier of a network. ")
                        (reparse-symbol indented_block_body) [144401 144636])
                    ("UUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144656 144660]))                          
                        :documentation "Fetch globally unique ID of the network as a string. ")
                        (reparse-symbol indented_block_body) [144641 144898])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144983 144987])
                            ("flags" variable nil (reparse-symbol function_parameters) [144989 144994]))                          
                        :documentation "Provide an XML description of the network. The description may be reused
        later to relaunch the network with virNetworkCreateXML().
        
        Normally, if a network included a physical function, the output includes
        all virtual functions tied to that physical interface.  If @flags includes
        VIR_NETWORK_XML_INACTIVE, then the expansion of virtual interfaces is
        not performed. ")
                        (reparse-symbol indented_block_body) [144971 145595])
                    ("autostart" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145673 145677]))                          
                        :documentation "Extract the autostart flag for a network. ")
                        (reparse-symbol indented_block_body) [145659 145900])
                    ("bridgeName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145988 145992]))                          
                        :documentation "Provides a bridge interface name to which a domain may connect
        a network interface in order to join the network. ")
                        (reparse-symbol indented_block_body) [145973 146298])
                    ("create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146314 146318]))                          
                        :documentation "Create and start a defined network. If the call succeed the network
        moves from the defined to the running networks pools. ")
                        (reparse-symbol indented_block_body) [146303 146617])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146634 146638]))                          
                        :documentation "Destroy the network object. The running instance is shutdown if not down
        already and all resources used by it are given back to the hypervisor. This
        does not free the associated virNetworkPtr object.
        This function may require privileged access ")
                        (reparse-symbol indented_block_body) [146622 147077])
                    ("isActive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147095 147099]))                          
                        :documentation "Determine if the network is currently running ")
                        (reparse-symbol indented_block_body) [147082 147318])
                    ("isPersistent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147340 147344]))                          
                        :documentation "Determine if the network has a persistent configuration
        which means it will still exist after shutting down ")
                        (reparse-symbol indented_block_body) [147323 147641])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147655 147659]))                          
                        :documentation "Get the public name for that network ")
                        (reparse-symbol indented_block_body) [147646 147785])
                    ("setAutostart" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147807 147811])
                            ("autostart" variable nil (reparse-symbol function_parameters) [147813 147822]))                          
                        :documentation "Configure the network to be automatically started
        when the host machine boots. ")
                        (reparse-symbol indented_block_body) [147790 148101])
                    ("undefine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148119 148123]))                          
                        :documentation "Undefine a network but does not stop it if it is running ")
                        (reparse-symbol indented_block_body) [148106 148353])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148369 148373])
                            ("command" variable nil (reparse-symbol function_parameters) [148375 148382])
                            ("section" variable nil (reparse-symbol function_parameters) [148384 148391])
                            ("parentIndex" variable nil (reparse-symbol function_parameters) [148393 148404])
                            ("xml" variable nil (reparse-symbol function_parameters) [148406 148409])
                            ("flags" variable nil (reparse-symbol function_parameters) [148411 148416]))                          
                        :documentation "Update the definition of an existing network, either its live
        running state, its persistent configuration, or both. ")
                        (reparse-symbol indented_block_body) [148358 148754]))                  
                :type "class")
                nil [143443 148754])
            ("virNetworkPort" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [148898 149039])
                            ("self" variable nil (reparse-symbol indented_block_body) [149047 149061]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148872 148876])
                            ("_obj" variable nil (reparse-symbol function_parameters) [148878 148882]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [148859 149062])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149079 149083]))                          )
                        (reparse-symbol indented_block_body) [149067 149192])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149209 149213]))                          )
                        (reparse-symbol indented_block_body) [149197 149242])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149261 149265]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [149247 149375]))                  
                :type "class")
                nil [148825 149375])
            ("virInterface" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [149453 149470])
                            ("if" code nil (reparse-symbol indented_block_body) [149479 149620])
                            ("self" variable nil (reparse-symbol indented_block_body) [149628 149642]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149421 149425])
                            ("conn" variable nil (reparse-symbol function_parameters) [149427 149431])
                            ("_obj" variable nil (reparse-symbol function_parameters) [149433 149437]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [149408 149643])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149660 149664]))                          )
                        (reparse-symbol indented_block_body) [149648 149771])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149788 149792]))                          )
                        (reparse-symbol indented_block_body) [149776 149821])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149840 149844]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [149826 149952])
                    ("MACString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150043 150047]))                          
                        :documentation "Get the MAC for an interface as string. For more information about
        MAC see RFC4122. ")
                        (reparse-symbol indented_block_body) [150029 150326])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150343 150347])
                            ("flags" variable nil (reparse-symbol function_parameters) [150349 150354]))                          
                        :documentation "VIR_INTERFACE_XML_INACTIVE - return the static configuration,
                                          suitable for use redefining the
                                          interface via virInterfaceDefineXML()
        
        Provide an XML description of the interface. If
        VIR_INTERFACE_XML_INACTIVE is set, the description may be reused
        later to redefine the interface with virInterfaceDefineXML(). If it
        is not set, the ip address and netmask will be the current live
        setting of the interface, not the settings from the config files. ")
                        (reparse-symbol indented_block_body) [150331 151122])
                    ("create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151138 151142])
                            ("flags" variable nil (reparse-symbol function_parameters) [151144 151149]))                          
                        :documentation "Activate an interface (i.e. call \"ifup\").
        
        If there was an open network config transaction at the time this
        interface was defined (that is, if virInterfaceChangeBegin() had
        been called), the interface will be brought back down (and then
        undefined) if virInterfaceChangeRollback() is called. ")
                        (reparse-symbol indented_block_body) [151127 151662])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151679 151683])
                            ("flags" variable nil (reparse-symbol function_parameters) [151685 151690]))                          
                        :documentation "deactivate an interface (ie call \"ifdown\")
        This does not remove the interface from the config, and
        does not free the associated virInterfacePtr object.
        
        If there is an open network config transaction at the time this
        interface is destroyed (that is, if virInterfaceChangeBegin() had
        been called), and if the interface is later undefined and then
        virInterfaceChangeRollback() is called, the restoral of the
        interface definition will also bring the interface back up. ")
                        (reparse-symbol indented_block_body) [151667 152404])
                    ("isActive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152422 152426]))                          
                        :documentation "Determine if the interface is currently running ")
                        (reparse-symbol indented_block_body) [152409 152651])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152665 152669]))                          
                        :documentation "Get the public name for that interface ")
                        (reparse-symbol indented_block_body) [152656 152799])
                    ("undefine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152817 152821]))                          
                        :documentation "Undefine an interface, ie remove it from the config.
        This does not free the associated virInterfacePtr object.
        
        Normally this change in the interface configuration is
        permanent/persistent, but if virInterfaceChangeBegin() has been
        previously called (i.e. if an interface config transaction is
        open), the removal of the interface definition will only become
        permanent if virInterfaceChangeCommit() is called prior to the next
        reboot of the system running libvirtd. Prior to that time, the
        definition can be explicitly restored using
        virInterfaceChangeRollback(), or will be automatically restored
        during the next reboot of the system running libvirtd. ")
                        (reparse-symbol indented_block_body) [152804 153737]))                  
                :type "class")
                nil [149376 153737])
            ("virStoragePool" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [153817 153834])
                            ("if" code nil (reparse-symbol indented_block_body) [153843 153916])
                            ("if" code nil (reparse-symbol indented_block_body) [153924 154065])
                            ("self" variable nil (reparse-symbol indented_block_body) [154073 154087]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153785 153789])
                            ("conn" variable nil (reparse-symbol function_parameters) [153791 153795])
                            ("_obj" variable nil (reparse-symbol function_parameters) [153797 153801]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [153772 154088])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154105 154109]))                          )
                        (reparse-symbol indented_block_body) [154093 154218])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154235 154239]))                          )
                        (reparse-symbol indented_block_body) [154223 154268])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154287 154291]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [154273 154401])
                    ("UUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154478 154482]))                          
                        :documentation "Extract the UUID unique Identifier of a storage pool. ")
                        (reparse-symbol indented_block_body) [154469 154718])
                    ("UUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154738 154742]))                          
                        :documentation "Fetch globally unique ID of the storage pool as a string. ")
                        (reparse-symbol indented_block_body) [154723 154994])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155083 155087])
                            ("flags" variable nil (reparse-symbol function_parameters) [155089 155094]))                          
                        :documentation "Fetch an XML document describing all aspects of the
        storage pool. This is suitable for later feeding back
        into the virStoragePoolCreateXML method. ")
                        (reparse-symbol indented_block_body) [155071 155454])
                    ("autostart" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155536 155540]))                          
                        :documentation "Extract the autostart flag for a storage pool ")
                        (reparse-symbol indented_block_body) [155522 155776])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155863 155867])
                            ("flags" variable nil (reparse-symbol function_parameters) [155869 155874]))                          
                        :documentation "Currently only filesystem pool accepts flags VIR_STORAGE_POOL_BUILD_OVERWRITE
        and VIR_STORAGE_POOL_BUILD_NO_OVERWRITE.
        
        Build the underlying storage pool ")
                        (reparse-symbol indented_block_body) [155853 156237])
                    ("create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156253 156257])
                            ("flags" variable nil (reparse-symbol function_parameters) [156259 156264]))                          
                        :documentation "Starts an inactive storage pool ")
                        (reparse-symbol indented_block_body) [156242 156483])
                    ("createXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156502 156506])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [156508 156515])
                            ("flags" variable nil (reparse-symbol function_parameters) [156517 156522]))                          
                        :documentation "Create a storage volume within a pool based
        on an XML description. Not all pools support
        creation of volumes.
        
        Since 1.0.1 VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA
        in flags can be used to get higher performance with
        qcow2 image files which don't support full preallocation,
        by creating a sparse image file with metadata.
        
        virStorageVolFree should be used to free the resources after the
        storage volume object is no longer needed. ")
                        (reparse-symbol indented_block_body) [156488 157280])
                    ("createXMLFrom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157303 157307])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [157309 157316])
                            ("clonevol" variable nil (reparse-symbol function_parameters) [157318 157326])
                            ("flags" variable nil (reparse-symbol function_parameters) [157328 157333]))                          
                        :documentation "Create a storage volume in the parent pool, using the
        'clonevol' volume as input. Information for the new
        volume (name, perms)  are passed via a typical volume
        XML description.
        
        Since 1.0.1 VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA
        in flags can be used to get higher performance with
        qcow2 image files which don't support full preallocation,
        by creating a sparse image file with metadata.
        
        virStorageVolFree should be used to free the resources after the
        storage volume object is no longer needed. ")
                        (reparse-symbol indented_block_body) [157285 158275])
                    ("delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158291 158295])
                            ("flags" variable nil (reparse-symbol function_parameters) [158297 158302]))                          
                        :documentation "Delete the underlying pool resources. This is
        a non-recoverable operation. The virStoragePoolPtr object
        itself is not free'd. ")
                        (reparse-symbol indented_block_body) [158280 158631])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158648 158652]))                          
                        :documentation "Destroy an active storage pool. This will deactivate the
        pool on the host, but keep any persistent config associated
        with it. If it has a persistent config it can later be
        restarted with virStoragePoolCreate(). This does not free
        the associated virStoragePoolPtr object. ")
                        (reparse-symbol indented_block_body) [158636 159135])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159212 159216]))                          
                        :documentation "Extract information about a storage pool. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted. ")
                        (reparse-symbol indented_block_body) [159203 159558])
                    ("isActive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159648 159652]))                          
                        :documentation "Determine if the storage pool is currently running ")
                        (reparse-symbol indented_block_body) [159635 159885])
                    ("isPersistent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159907 159911]))                          
                        :documentation "Determine if the storage pool has a persistent configuration
        which means it will still exist after shutting down ")
                        (reparse-symbol indented_block_body) [159890 160222])
                    ("listVolumes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160306 160310]))                          
                        :documentation "list the storage volumes, stores the pointers to the names in @names ")
                        (reparse-symbol indented_block_body) [160290 160569])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160655 160659]))                          
                        :documentation "Fetch the locally unique name of the storage pool ")
                        (reparse-symbol indented_block_body) [160646 160802])
                    ("numOfVolumes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160824 160828]))                          
                        :documentation "Fetch the number of storage volumes within a pool ")
                        (reparse-symbol indented_block_body) [160807 161068])
                    ("refresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161085 161089])
                            ("flags" variable nil (reparse-symbol function_parameters) [161091 161096]))                          
                        :documentation "Request that the pool refresh its list of volumes. This may
        involve communicating with a remote server, and/or initializing
        new devices at the OS layer ")
                        (reparse-symbol indented_block_body) [161073 161453])
                    ("setAutostart" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161475 161479])
                            ("autostart" variable nil (reparse-symbol function_parameters) [161481 161490]))                          
                        :documentation "Sets the autostart flag ")
                        (reparse-symbol indented_block_body) [161458 161715])
                    ("storageVolLookupByName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161747 161751])
                            ("name" variable nil (reparse-symbol function_parameters) [161753 161757]))                          
                        :documentation "Fetch a pointer to a storage volume based on its name
        within a pool
        
        virStorageVolFree should be used to free the resources after the
        storage volume object is no longer needed. ")
                        (reparse-symbol indented_block_body) [161720 162208])
                    ("undefine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162226 162230]))                          
                        :documentation "Undefine an inactive storage pool ")
                        (reparse-symbol indented_block_body) [162213 162446])
                    ("listAllVolumes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162547 162551])
                            ("flags" variable nil (reparse-symbol function_parameters) [162553 162558]))                          
                        :documentation "List all storage volumes and returns a list of storage volume objects")
                        (reparse-symbol indented_block_body) [162528 162962]))                  
                :type "class")
                nil [153738 162962])
            ("virStorageVol" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [163041 163058])
                            ("if" code nil (reparse-symbol indented_block_body) [163067 163140])
                            ("if" code nil (reparse-symbol indented_block_body) [163148 163289])
                            ("self" variable nil (reparse-symbol indented_block_body) [163297 163311]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163009 163013])
                            ("conn" variable nil (reparse-symbol function_parameters) [163015 163019])
                            ("_obj" variable nil (reparse-symbol function_parameters) [163021 163025]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [162996 163312])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163329 163333]))                          )
                        (reparse-symbol indented_block_body) [163317 163441])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163458 163462]))                          )
                        (reparse-symbol indented_block_body) [163446 163491])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163510 163514]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [163496 163623])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163711 163715])
                            ("flags" variable nil (reparse-symbol function_parameters) [163717 163722]))                          
                        :documentation "Fetch an XML document describing all aspects of
        the storage volume ")
                        (reparse-symbol indented_block_body) [163699 163991])
                    ("delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164007 164011])
                            ("flags" variable nil (reparse-symbol function_parameters) [164013 164018]))                          
                        :documentation "Delete the storage volume from the pool ")
                        (reparse-symbol indented_block_body) [163996 164242])
                    ("download" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164260 164264])
                            ("stream" variable nil (reparse-symbol function_parameters) [164266 164272])
                            ("offset" variable nil (reparse-symbol function_parameters) [164274 164280])
                            ("length" variable nil (reparse-symbol function_parameters) [164282 164288])
                            ("flags" variable nil (reparse-symbol function_parameters) [164290 164295]))                          
                        :documentation "Download the content of the volume as a stream. If @length
        is zero, then the remaining contents of the volume after
        @offset will be downloaded.
        
        If VIR_STORAGE_VOL_DOWNLOAD_SPARSE_STREAM is set in @flags
        effective transmission of holes is enabled. This assumes using
        the @stream with combination of virStreamSparseRecvAll() or
        virStreamRecvFlags(stream, ..., flags =
        VIR_STREAM_RECV_STOP_AT_HOLE) for honouring holes sent by
        server.
        
        This call sets up an asynchronous stream; subsequent use of
        stream APIs is necessary to transfer the actual data,
        determine how much data is successfully transferred, and
        detect any errors. The results will be unpredictable if
        another active stream is writing to the storage volume. ")
                        (reparse-symbol indented_block_body) [164247 165427])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165503 165507]))                          
                        :documentation "Extract information about a storage volume. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted. ")
                        (reparse-symbol indented_block_body) [165494 165848])
                    ("infoFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165867 165871])
                            ("flags" variable nil (reparse-symbol function_parameters) [165873 165878]))                          
                        :documentation "Extract information about a storage volume. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted. ")
                        (reparse-symbol indented_block_body) [165853 166238])
                    ("key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166322 166326]))                          
                        :documentation "Fetch the storage volume key. This is globally
        unique, so the same volume will have the same
        key no matter what host it is accessed from ")
                        (reparse-symbol indented_block_body) [166314 166656])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166670 166674]))                          
                        :documentation "Fetch the storage volume name. This is unique
        within the scope of a pool ")
                        (reparse-symbol indented_block_body) [166661 166847])
                    ("path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166861 166865]))                          
                        :documentation "Fetch the storage volume path. Depending on the pool
        configuration this is either persistent across hosts,
        or dynamically assigned at pool startup. Consult
        pool documentation for information on getting the
        persistent naming ")
                        (reparse-symbol indented_block_body) [166852 167300])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167316 167320])
                            ("capacity" variable nil (reparse-symbol function_parameters) [167322 167330])
                            ("flags" variable nil (reparse-symbol function_parameters) [167332 167337]))                          
                        :documentation "Changes the capacity of the storage volume @vol to @capacity. The
        operation will fail if the new capacity requires allocation that would
        exceed the remaining free space in the parent pool.  The contents of
        the new capacity will appear as all zero bytes. The capacity value will
        be rounded to the granularity supported by the hypervisor.
        
        Normally, the operation will attempt to affect capacity with a minimum
        impact on allocation (that is, the default operation favors a sparse
        resize).  If @flags contains VIR_STORAGE_VOL_RESIZE_ALLOCATE, then the
        operation will ensure that allocation is sufficient for the new
        capacity; this may make the operation take noticeably longer.
        
        Normally, the operation treats @capacity as the new size in bytes;
        but if @flags contains VIR_STORAGE_VOL_RESIZE_DELTA, then @capacity
        represents the size difference to add to the current size.  It is
        up to the storage pool implementation whether unaligned requests are
        rounded up to the next valid boundary, or rejected.
        
        Normally, this operation should only be used to enlarge capacity;
        but if @flags contains VIR_STORAGE_VOL_RESIZE_SHRINK, it is possible to
        attempt a reduction in capacity even though it might cause data loss.
        If VIR_STORAGE_VOL_RESIZE_DELTA is also present, then @capacity is
        subtracted from the current size; without it, @capacity represents
        the absolute new size regardless of whether it is larger or smaller
        than the current size. ")
                        (reparse-symbol indented_block_body) [167305 169155])
                    ("storagePoolLookupByVolume" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [169190 169194]))                          
                        :documentation "Fetch a storage pool which contains a particular volume
        
        virStoragePoolFree should be used to free the resources after the
        storage pool object is no longer needed. ")
                        (reparse-symbol indented_block_body) [169160 169624])
                    ("upload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [169640 169644])
                            ("stream" variable nil (reparse-symbol function_parameters) [169646 169652])
                            ("offset" variable nil (reparse-symbol function_parameters) [169654 169660])
                            ("length" variable nil (reparse-symbol function_parameters) [169662 169668])
                            ("flags" variable nil (reparse-symbol function_parameters) [169670 169675]))                          
                        :documentation "Upload new content to the volume from a stream. This call
        will fail if @offset + @length exceeds the size of the
        volume. Otherwise, if @length is non-zero, an error
        will be raised if an attempt is made to upload greater
        than @length bytes of data.
        
        If VIR_STORAGE_VOL_UPLOAD_SPARSE_STREAM is set in @flags
        effective transmission of holes is enabled. This assumes using
        the @stream with combination of virStreamSparseSendAll() or
        virStreamSendHole() to preserve source file sparseness.
        
        This call sets up an asynchronous stream; subsequent use of
        stream APIs is necessary to transfer the actual data,
        determine how much data is successfully transferred, and
        detect any errors. The results will be unpredictable if
        another active stream is writing to the storage volume.
        
        When the data stream is closed whether the upload is successful
        or not an attempt will be made to refresh the target storage pool
        if an asynchronous build is not running in order to reflect pool
        and volume changes as a result of the upload. Depending on
        the target volume storage backend and the source stream type
        for a successful upload, the target volume may take on the
        characteristics from the source stream such as format type,
        capacity, and allocation. ")
                        (reparse-symbol indented_block_body) [169629 171388])
                    ("wipe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171402 171406])
                            ("flags" variable nil (reparse-symbol function_parameters) [171408 171413]))                          
                        :documentation "Ensure data previously on a volume is not accessible to future reads.
        
        The data to be wiped may include the format and possibly size information,
        so non-raw images might become raw with a different size. It is storage
        backend dependent whether the format and size information is regenerated
        once the initial volume wipe is completed.
        
        Depending on the actual volume representation, this call may not
        overwrite the physical location of the volume. For instance, files
        stored journaled, log structured, copy-on-write, versioned, and
        network file systems are known to be problematic. ")
                        (reparse-symbol indented_block_body) [171393 172254])
                    ("wipePattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [172275 172279])
                            ("algorithm" variable nil (reparse-symbol function_parameters) [172281 172290])
                            ("flags" variable nil (reparse-symbol function_parameters) [172292 172297]))                          
                        :documentation "Similar to virStorageVolWipe, but one can choose between
        different wiping algorithms. Also note, that depending on the
        actual volume representation, this call may not really
        overwrite the physical location of the volume. For instance,
        files stored journaled, log structured, copy-on-write,
        versioned, and network file systems are known to be
        problematic. ")
                        (reparse-symbol indented_block_body) [172259 172905]))                  
                :type "class")
                nil [162963 172905])
            ("virConnect" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [172975 173116])
                            ("self" variable nil (reparse-symbol indented_block_body) [173124 173138]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [172949 172953])
                            ("_obj" variable nil (reparse-symbol function_parameters) [172955 172959]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [172936 173139])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173158 173162]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [173144 173268])
                    ("allocPages" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173347 173351])
                            ("pages" variable nil (reparse-symbol function_parameters) [173353 173358])
                            ("startCell" variable nil (reparse-symbol function_parameters) [173360 173369])
                            ("cellCount" variable nil (reparse-symbol function_parameters) [173373 173382])
                            ("flags" variable nil (reparse-symbol function_parameters) [173386 173391]))                          
                        :documentation "Allocate or free some pages in the huge pages pool ")
                        (reparse-symbol indented_block_body) [173332 173652])
                    ("baselineCPU" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173673 173677])
                            ("xmlCPUs" variable nil (reparse-symbol function_parameters) [173679 173686])
                            ("flags" variable nil (reparse-symbol function_parameters) [173688 173693]))                          
                        :documentation "Computes the most feature-rich CPU which is compatible with all given host CPUs. ")
                        (reparse-symbol indented_block_body) [173657 173974])
                    ("baselineHypervisorCPU" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174005 174009])
                            ("emulator" variable nil (reparse-symbol function_parameters) [174011 174019])
                            ("arch" variable nil (reparse-symbol function_parameters) [174021 174025])
                            ("machine" variable nil (reparse-symbol function_parameters) [174027 174034])
                            ("virttype" variable nil (reparse-symbol function_parameters) [174036 174044])
                            ("xmlCPUs" variable nil (reparse-symbol function_parameters) [174046 174053])
                            ("flags" variable nil (reparse-symbol function_parameters) [174055 174060]))                          
                        :documentation "Computes the most feature-rich CPU which is compatible with all given CPUs and can be provided by the specified hypervisor. ")
                        (reparse-symbol indented_block_body) [173979 174439])
                    ("changeBegin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174530 174534])
                            ("flags" variable nil (reparse-symbol function_parameters) [174536 174541]))                          
                        :documentation "This function creates a restore point to which one can return
        later by calling virInterfaceChangeRollback(). This function should
        be called before any transaction with interface configuration.
        Once it is known that a new configuration works, it can be committed via
        virInterfaceChangeCommit(), which frees the restore point.
        
        If virInterfaceChangeBegin() is called when a transaction is
        already opened, this function will fail, and a
        VIR_ERR_INVALID_OPERATION will be logged. ")
                        (reparse-symbol indented_block_body) [174514 175274])
                    ("changeCommit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175296 175300])
                            ("flags" variable nil (reparse-symbol function_parameters) [175302 175307]))                          
                        :documentation "This commits the changes made to interfaces and frees the restore point
        created by virInterfaceChangeBegin().
        
        If virInterfaceChangeCommit() is called when a transaction is not
        opened, this function will fail, and a VIR_ERR_INVALID_OPERATION
        will be logged. ")
                        (reparse-symbol indented_block_body) [175279 175800])
                    ("changeRollback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175824 175828])
                            ("flags" variable nil (reparse-symbol function_parameters) [175830 175835]))                          
                        :documentation "This cancels changes made to interfaces settings by restoring previous
        state created by virInterfaceChangeBegin().
        
        If virInterfaceChangeRollback() is called when a transaction is not
        opened, this function will fail, and a VIR_ERR_INVALID_OPERATION
        will be logged. ")
                        (reparse-symbol indented_block_body) [175805 176339])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176419 176423]))                          
                        :documentation "This function closes the connection to the Hypervisor. This should
        not be called if further interaction with the Hypervisor are needed
        especially if there is running domain which need further monitoring by
        the application.
        
        Connections are reference counted; the count is explicitly
        increased by the initial open (virConnectOpen, virConnectOpenAuth,
        and the like) as well as virConnectRef; it is also temporarily
        increased by other API that depend on the connection remaining
        alive.  The open and every virConnectRef call should have a
        matching virConnectClose, and all other references will be released
        after the corresponding operation completes. ")
                        (reparse-symbol indented_block_body) [176409 177351])
                    ("compareCPU" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [177371 177375])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [177377 177384])
                            ("flags" variable nil (reparse-symbol function_parameters) [177386 177391]))                          
                        :documentation "Compares the given CPU description with the host CPU.
        
        See virConnectCompareHypervisorCPU() if you want to consider hypervisor
        abilities and compare the CPU to the CPU which a hypervisor is able to
        provide on the host. ")
                        (reparse-symbol indented_block_body) [177356 177838])
                    ("compareHypervisorCPU" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [177868 177872])
                            ("emulator" variable nil (reparse-symbol function_parameters) [177874 177882])
                            ("arch" variable nil (reparse-symbol function_parameters) [177884 177888])
                            ("machine" variable nil (reparse-symbol function_parameters) [177890 177897])
                            ("virttype" variable nil (reparse-symbol function_parameters) [177899 177907])
                            ("xmlCPU" variable nil (reparse-symbol function_parameters) [177909 177915])
                            ("flags" variable nil (reparse-symbol function_parameters) [177917 177922]))                          
                        :documentation "Compares the given CPU description with the CPU the specified hypervisor is
        able to provide on the host. Any of @emulator, @arch, @machine, and
        @virttype parameters may be None; libvirt will choose sensible defaults
        tailored to the host and its current configuration.
        
        This is different from virConnectCompareCPU() which compares the CPU
        definition with the host CPU without considering any specific hypervisor and
        its abilities. ")
                        (reparse-symbol indented_block_body) [177843 178658])
                    ("createLinux" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [178746 178750])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [178752 178759])
                            ("flags" variable nil (reparse-symbol function_parameters) [178761 178766]))                          
                        :documentation "Deprecated after 0.4.6.
        Renamed to virDomainCreateXML() providing identical functionality.
        This existing name will be left indefinitely for API compatibility. ")
                        (reparse-symbol indented_block_body) [178730 179180])
                    ("createXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [179199 179203])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [179205 179212])
                            ("flags" variable nil (reparse-symbol function_parameters) [179214 179219]))                          
                        :documentation "Launch a new guest domain, based on an XML description similar
        to the one returned by virDomainGetXMLDesc()
        This function may require privileged access to the hypervisor.
        The domain is not persistent, so its definition will disappear when it
        is destroyed, or if the host is restarted (see virDomainDefineXML() to
        define persistent domains).
        
        If the VIR_DOMAIN_START_PAUSED flag is set, the guest domain
        will be started, but its CPUs will remain paused. The CPUs
        can later be manually started using virDomainResume.
        
        If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
        domain will be automatically destroyed when the virConnectPtr
        object is finally released. This will also happen if the
        client application crashes / loses its connection to the
        libvirtd daemon. Any domains marked for auto destroy will
        block attempts at migration, save-to-file, or snapshots.
        
        virDomainFree should be used to free the resources after the
        domain object is no longer needed. ")
                        (reparse-symbol indented_block_body) [179185 180569])
                    ("defineXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [180588 180592])
                            ("xml" variable nil (reparse-symbol function_parameters) [180594 180597]))                          
                        :documentation "Define a domain, but does not start it.
        This definition is persistent, until explicitly undefined with
        virDomainUndefine(). A previous definition for this domain would be
        overridden if it already exists.
        
        Some hypervisors may prevent this operation if there is a current
        block copy operation on a transient domain with the same id as the
        domain being defined; in that case, use virDomainBlockJobAbort() to
        stop the block copy first.
        
        virDomainFree should be used to free the resources after the
        domain object is no longer needed. ")
                        (reparse-symbol indented_block_body) [180574 181437])
                    ("defineXMLFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [181461 181465])
                            ("xml" variable nil (reparse-symbol function_parameters) [181467 181470])
                            ("flags" variable nil (reparse-symbol function_parameters) [181472 181477]))                          
                        :documentation "Defines a domain, but does not start it.
        This definition is persistent, until explicitly undefined with
        virDomainUndefine(). A previous definition for this domain would be
        overridden if it already exists.
        
        Some hypervisors may prevent this operation if there is a current
        block copy operation on a transient domain with the same id as the
        domain being defined; in that case, use virDomainBlockJobAbort() to
        stop the block copy first.
        
        virDomainFree should be used to free the resources after the
        domain object is no longer needed. ")
                        (reparse-symbol indented_block_body) [181442 182337])
                    ("domainXMLFromNative" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [182366 182370])
                            ("nativeFormat" variable nil (reparse-symbol function_parameters) [182372 182384])
                            ("nativeConfig" variable nil (reparse-symbol function_parameters) [182386 182398])
                            ("flags" variable nil (reparse-symbol function_parameters) [182400 182405]))                          
                        :documentation "Reads native configuration data  describing a domain, and
        generates libvirt domain XML. The format of the native
        data is hypervisor dependent. ")
                        (reparse-symbol indented_block_body) [182342 182799])
                    ("domainXMLToNative" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [182826 182830])
                            ("nativeFormat" variable nil (reparse-symbol function_parameters) [182832 182844])
                            ("domainXml" variable nil (reparse-symbol function_parameters) [182846 182855])
                            ("flags" variable nil (reparse-symbol function_parameters) [182857 182862]))                          
                        :documentation "Reads a domain XML configuration document, and generates
        a native configuration file describing the domain.
        The format of the native data is hypervisor dependent. ")
                        (reparse-symbol indented_block_body) [182804 183269])
                    ("findStoragePoolSources" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [183369 183373])
                            ("type" variable nil (reparse-symbol function_parameters) [183375 183379])
                            ("srcSpec" variable nil (reparse-symbol function_parameters) [183381 183388])
                            ("flags" variable nil (reparse-symbol function_parameters) [183390 183395]))                          
                        :documentation "Talks to a storage backend and attempts to auto-discover the set of
        available storage pool sources. e.g. For iSCSI this would be a set of
        iSCSI targets. For NFS this would be a list of exported paths.  The
        srcSpec (optional for some storage pool types, e.g. local ones) is
        an instance of the storage pool's source element specifying where
        to look for the pools.
        
        srcSpec is not required for some types (e.g., those querying
        local storage resources only) ")
                        (reparse-symbol indented_block_body) [183342 184141])
                    ("getCPUMap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [184219 184223])
                            ("flags" variable nil (reparse-symbol function_parameters) [184225 184230]))                          
                        :documentation "Get node CPU information ")
                        (reparse-symbol indented_block_body) [184205 184436])
                    ("getCPUModelNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [184462 184466])
                            ("arch" variable nil (reparse-symbol function_parameters) [184468 184472])
                            ("flags" variable nil (reparse-symbol function_parameters) [184474 184479]))                          
                        :documentation "Get the list of supported CPU models. ")
                        (reparse-symbol indented_block_body) [184441 184724])
                    ("getCPUStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [184745 184749])
                            ("cpuNum" variable nil (reparse-symbol function_parameters) [184751 184757])
                            ("flags" variable nil (reparse-symbol function_parameters) [184759 184764]))                          
                        :documentation "Extract node's CPU statistics. ")
                        (reparse-symbol indented_block_body) [184729 184988])
                    ("getCapabilities" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [185078 185082]))                          
                        :documentation "Provides capabilities of the hypervisor / driver. ")
                        (reparse-symbol indented_block_body) [185058 185322])
                    ("getCellsFreeMemory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [185409 185413])
                            ("startCell" variable nil (reparse-symbol function_parameters) [185415 185424])
                            ("maxCells" variable nil (reparse-symbol function_parameters) [185426 185434]))                          
                        :documentation "Returns the available memory for a list of cells ")
                        (reparse-symbol indented_block_body) [185386 185694])
                    ("getDomainCapabilities" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [185792 185796])
                            ("emulatorbin" variable nil (reparse-symbol function_parameters) [185798 185809])
                            ("arch" variable nil (reparse-symbol function_parameters) [185816 185820])
                            ("machine" variable nil (reparse-symbol function_parameters) [185827 185834])
                            ("virttype" variable nil (reparse-symbol function_parameters) [185841 185849])
                            ("flags" variable nil (reparse-symbol function_parameters) [185856 185861]))                          
                        :documentation "Query domain capabilities ")
                        (reparse-symbol indented_block_body) [185766 186136])
                    ("getFreeMemory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [186224 186228]))                          
                        :documentation "provides the free memory available on the Node
        Note: most libvirt APIs provide memory sizes in kibibytes, but in this
        function the returned value is in bytes. Divide by 1024 as necessary. ")
                        (reparse-symbol indented_block_body) [186206 186524])
                    ("getFreePages" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [186605 186609])
                            ("pages" variable nil (reparse-symbol function_parameters) [186611 186616])
                            ("startCell" variable nil (reparse-symbol function_parameters) [186618 186627])
                            ("maxCells" variable nil (reparse-symbol function_parameters) [186629 186637])
                            ("flags" variable nil (reparse-symbol function_parameters) [186639 186644]))                          
                        :documentation "Returns the number of available pages for a list of cells and page sizes ")
                        (reparse-symbol indented_block_body) [186588 186932])
                    ("getHostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187018 187022]))                          
                        :documentation "This returns a system hostname on which the hypervisor is
        running (based on the result of the gethostname system call, but
        possibly expanded to a fully-qualified domain name via getaddrinfo).
        If we are connected to a remote system, then this returns the
        hostname of the remote system. ")
                        (reparse-symbol indented_block_body) [187002 187521])
                    ("getInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187597 187601]))                          
                        :documentation "Extract hardware information about the Node. Note that the memory size is reported in MiB instead of KiB. ")
                        (reparse-symbol indented_block_body) [187585 187875])
                    ("getLibVersion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187898 187902]))                          
                        :documentation "Returns the libvirt version of the connection host ")
                        (reparse-symbol indented_block_body) [187880 188137])
                    ("getMaxVcpus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [188223 188227])
                            ("type" variable nil (reparse-symbol function_parameters) [188229 188233]))                          
                        :documentation "Provides the maximum number of virtual CPUs supported for a guest VM of a
        specific type. The 'type' parameter here corresponds to the 'type'
        attribute in the <domain> element of the XML. This API doesn't take emulator
        limits into consideration, hence the returned value is not guaranteed to be
        usable. It is recommended to use virConnectGetDomainCapabilities() and look
        for \"<vcpu max='...'>\" in its output instead. ")
                        (reparse-symbol indented_block_body) [188207 188875])
                    ("getMemoryParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [188963 188967])
                            ("flags" variable nil (reparse-symbol function_parameters) [188969 188974]))                          
                        :documentation "Get the node memory parameters ")
                        (reparse-symbol indented_block_body) [188939 189206])
                    ("getMemoryStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [189230 189234])
                            ("cellNum" variable nil (reparse-symbol function_parameters) [189236 189243])
                            ("flags" variable nil (reparse-symbol function_parameters) [189245 189250]))                          
                        :documentation "Extract node's memory statistics. ")
                        (reparse-symbol indented_block_body) [189211 189484])
                    ("getSEVInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [189504 189508])
                            ("flags" variable nil (reparse-symbol function_parameters) [189510 189515]))                          
                        :documentation "Get platform specific information from the SEV firmware ")
                        (reparse-symbol indented_block_body) [189489 189754])
                    ("getSecurityModel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [189780 189784]))                          
                        :documentation "Extract information about the hypervisor security model ")
                        (reparse-symbol indented_block_body) [189759 190026])
                    ("getSysinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [190111 190115])
                            ("flags" variable nil (reparse-symbol function_parameters) [190117 190122]))                          
                        :documentation "This returns the XML description of the sysinfo details for the
        host on which the hypervisor is running, in the same format as the
        <sysinfo> element of a domain XML.  This information is generally
        available only for hypervisors running with root privileges. ")
                        (reparse-symbol indented_block_body) [190096 190593])
                    ("getType" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [190610 190614]))                          
                        :documentation "Get the name of the Hypervisor driver used. This is merely the driver
        name; for example, both KVM and QEMU guests are serviced by the
        driver for the qemu:// URI, so a return of \"QEMU\" does not indicate
        whether KVM acceleration is present.  For more details about the
        hypervisor, use virConnectGetCapabilities(). ")
                        (reparse-symbol indented_block_body) [190598 191132])
                    ("getURI" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [191148 191152]))                          
                        :documentation "This returns the URI (name) of the hypervisor connection.
        Normally this is the same as or similar to the string passed
        to the virConnectOpen/virConnectOpenReadOnly call, but
        the driver may make the URI canonical.  If name == None
        was passed to virConnectOpen, then the driver will return
        a non-None URI which can be used to connect to the same
        hypervisor later. ")
                        (reparse-symbol indented_block_body) [191137 191734])
                    ("getVersion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [191813 191817]))                          
                        :documentation "Returns the running hypervisor version of the connection host ")
                        (reparse-symbol indented_block_body) [191798 192057])
                    ("interfaceDefineXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [192155 192159])
                            ("xml" variable nil (reparse-symbol function_parameters) [192161 192164])
                            ("flags" variable nil (reparse-symbol function_parameters) [192166 192171]))                          
                        :documentation "Define an inactive persistent physical host interface or modify an existing
        persistent one from the XML description.
        
        Normally this change in the interface configuration is immediately
        permanent/persistent, but if virInterfaceChangeBegin() has been
        previously called (i.e. if an interface config transaction is
        open), the new interface definition will only become permanent if
        virInterfaceChangeCommit() is called prior to the next reboot of
        the system running libvirtd. Prior to that time, it can be
        explicitly removed using virInterfaceChangeRollback(), or will be
        automatically removed during the next reboot of the system running
        libvirtd.
        
        virInterfaceFree should be used to free the resources after the
        interface object is no longer needed. ")
                        (reparse-symbol indented_block_body) [192132 193271])
                    ("interfaceLookupByMACString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [193307 193311])
                            ("macstr" variable nil (reparse-symbol function_parameters) [193313 193319]))                          
                        :documentation "Try to lookup an interface on the given hypervisor based on its MAC.
        
        virInterfaceFree should be used to free the resources after the
        interface object is no longer needed. ")
                        (reparse-symbol indented_block_body) [193276 193766])
                    ("interfaceLookupByName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [193797 193801])
                            ("name" variable nil (reparse-symbol function_parameters) [193803 193807]))                          
                        :documentation "Try to lookup an interface on the given hypervisor based on its name.
        
        virInterfaceFree should be used to free the resources after the
        interface object is no longer needed. ")
                        (reparse-symbol indented_block_body) [193771 194243])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [194325 194329]))                          
                        :documentation "Determine if the connection to the hypervisor is still alive
        
        A connection will be classed as alive if it is either local, or running
        over a channel (TCP or UNIX socket) which is not closed. ")
                        (reparse-symbol indented_block_body) [194313 194716])
                    ("isEncrypted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [194737 194741]))                          
                        :documentation "Determine if the connection to the hypervisor is encrypted ")
                        (reparse-symbol indented_block_body) [194721 194980])
                    ("isSecure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [194998 195002]))                          
                        :documentation "Determine if the connection to the hypervisor is secure
        
        A connection will be classed as secure if it is either
        encrypted, or running over a channel which is not exposed
        to eavesdropping (eg a UNIX domain socket, or pipe) ")
                        (reparse-symbol indented_block_body) [194985 195430])
                    ("listDefinedDomains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [195517 195521]))                          
                        :documentation "list the defined domains, stores the pointers to the names in @names ")
                        (reparse-symbol indented_block_body) [195494 195786])
                    ("listDefinedInterfaces" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [195817 195821]))                          
                        :documentation "list the defined interfaces, stores the pointers to the names in @names ")
                        (reparse-symbol indented_block_body) [195791 196095])
                    ("listDefinedNetworks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [196124 196128]))                          
                        :documentation "list the defined networks, stores the pointers to the names in @names ")
                        (reparse-symbol indented_block_body) [196100 196396])
                    ("listDefinedStoragePools" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [196429 196433]))                          
                        :documentation "list the defined storage pool, stores the pointers to the names in @names ")
                        (reparse-symbol indented_block_body) [196401 196713])
                    ("listDevices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [196734 196738])
                            ("cap" variable nil (reparse-symbol function_parameters) [196740 196743])
                            ("flags" variable nil (reparse-symbol function_parameters) [196745 196750]))                          
                        :documentation "list the node devices ")
                        (reparse-symbol indented_block_body) [196718 196962])
                    ("listDomainsID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [196985 196989]))                          
                        :documentation "Returns the list of the ID of the domains on the hypervisor ")
                        (reparse-symbol indented_block_body) [196967 197235])
                    ("listInterfaces" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [197259 197263]))                          
                        :documentation "list the running interfaces, stores the pointers to the names in @names ")
                        (reparse-symbol indented_block_body) [197240 197523])
                    ("listNWFilters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [197606 197610]))                          
                        :documentation "List the defined network filters ")
                        (reparse-symbol indented_block_body) [197588 197829])
                    ("listNetworks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [197910 197914]))                          
                        :documentation "list the networks, stores the pointers to the names in @names ")
                        (reparse-symbol indented_block_body) [197893 198160])
                    ("listSecrets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [198241 198245]))                          
                        :documentation "List the defined secret IDs ")
                        (reparse-symbol indented_block_body) [198225 198455])
                    ("listStoragePools" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [198540 198544]))                          
                        :documentation "list the storage pools, stores the pointers to the names in @names ")
                        (reparse-symbol indented_block_body) [198519 198803])
                    ("lookupByID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [198890 198894])
                            ("id" variable nil (reparse-symbol function_parameters) [198896 198898]))                          
                        :documentation "Try to find a domain based on the hypervisor ID number
        Note that this won't work for inactive domains which have an ID of -1,
        in that case a lookup based on the Name or UUId need to be done instead.
        
        virDomainFree should be used to free the resources after the
        domain object is no longer needed. ")
                        (reparse-symbol indented_block_body) [198875 199457])
                    ("lookupByName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [199479 199483])
                            ("name" variable nil (reparse-symbol function_parameters) [199485 199489]))                          
                        :documentation "Try to lookup a domain on the given hypervisor based on its name.
        
        virDomainFree should be used to free the resources after the
        domain object is no longer needed. ")
                        (reparse-symbol indented_block_body) [199462 199905])
                    ("lookupByUUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [199986 199990])
                            ("uuid" variable nil (reparse-symbol function_parameters) [199992 199996]))                          
                        :documentation "Try to lookup a domain on the given hypervisor based on its UUID. ")
                        (reparse-symbol indented_block_body) [199969 200291])
                    ("lookupByUUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [200386 200390])
                            ("uuidstr" variable nil (reparse-symbol function_parameters) [200392 200399]))                          
                        :documentation "Try to lookup a domain on the given hypervisor based on its UUID.
        
        virDomainFree should be used to free the resources after the
        domain object is no longer needed. ")
                        (reparse-symbol indented_block_body) [200363 200830])
                    ("networkCreateXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [200924 200928])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [200930 200937]))                          
                        :documentation "Create and start a new virtual network, based on an XML description
        similar to the one returned by virNetworkGetXMLDesc()
        
        virNetworkFree should be used to free the resources after the
        network object is no longer needed. ")
                        (reparse-symbol indented_block_body) [200903 201420])
                    ("networkDefineXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [201446 201450])
                            ("xml" variable nil (reparse-symbol function_parameters) [201452 201455]))                          
                        :documentation "Define an inactive persistent virtual network or modify an existing
        persistent one from the XML description.
        
        virNetworkFree should be used to free the resources after the
        network object is no longer needed. ")
                        (reparse-symbol indented_block_body) [201425 201921])
                    ("networkLookupByName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [201950 201954])
                            ("name" variable nil (reparse-symbol function_parameters) [201956 201960]))                          
                        :documentation "Try to lookup a network on the given hypervisor based on its name.
        
        virNetworkFree should be used to free the resources after the
        network object is no longer needed. ")
                        (reparse-symbol indented_block_body) [201926 202383])
                    ("networkLookupByUUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [202471 202475])
                            ("uuid" variable nil (reparse-symbol function_parameters) [202477 202481]))                          
                        :documentation "Try to lookup a network on the given hypervisor based on its UUID. ")
                        (reparse-symbol indented_block_body) [202447 202781])
                    ("networkLookupByUUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [202884 202888])
                            ("uuidstr" variable nil (reparse-symbol function_parameters) [202890 202897]))                          
                        :documentation "Try to lookup a network on the given hypervisor based on its UUID. ")
                        (reparse-symbol indented_block_body) [202854 203212])
                    ("newStream" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [203298 203302])
                            ("flags" variable nil (reparse-symbol function_parameters) [203304 203309]))                          
                        :documentation "Creates a new stream object which can be used to perform
        streamed I/O with other public API function.
        
        When no longer needed, a stream object must be released
        with virStreamFree. If a data stream has been used,
        then the application must call virStreamFinish or
        virStreamAbort before free'ing to, in order to notify
        the driver of termination.
        
        If a non-blocking data stream is required passed
        VIR_STREAM_NONBLOCK for flags, otherwise pass 0. ")
                        (reparse-symbol indented_block_body) [203284 204045])
                    ("nodeDeviceCreateXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [204142 204146])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [204148 204155])
                            ("flags" variable nil (reparse-symbol function_parameters) [204157 204162]))                          
                        :documentation "Create a new device on the VM host machine, for example, virtual
        HBAs created using vport_create.
        
        virNodeDeviceFree should be used to free the resources after the
        node device object is no longer needed. ")
                        (reparse-symbol indented_block_body) [204118 204646])
                    ("nodeDeviceLookupByName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [204678 204682])
                            ("name" variable nil (reparse-symbol function_parameters) [204684 204688]))                          
                        :documentation "Lookup a node device by its name.
        
        virNodeDeviceFree should be used to free the resources after the
        node device object is no longer needed. ")
                        (reparse-symbol indented_block_body) [204651 205094])
                    ("nodeDeviceLookupSCSIHostByWWN" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [205133 205137])
                            ("wwnn" variable nil (reparse-symbol function_parameters) [205139 205143])
                            ("wwpn" variable nil (reparse-symbol function_parameters) [205145 205149])
                            ("flags" variable nil (reparse-symbol function_parameters) [205151 205156]))                          
                        :documentation "Lookup SCSI Host which is capable with 'fc_host' by its WWNN and WWPN.
        
        virNodeDeviceFree should be used to free the resources after the
        node device object is no longer needed. ")
                        (reparse-symbol indented_block_body) [205099 205628])
                    ("numOfDefinedDomains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [205724 205728]))                          
                        :documentation "Provides the number of defined but inactive domains. ")
                        (reparse-symbol indented_block_body) [205700 205977])
                    ("numOfDefinedInterfaces" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [206079 206083]))                          
                        :documentation "Provides the number of defined (inactive) interfaces on the physical host. ")
                        (reparse-symbol indented_block_body) [206052 206360])
                    ("numOfDefinedNetworks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [206458 206462]))                          
                        :documentation "Provides the number of inactive networks. ")
                        (reparse-symbol indented_block_body) [206433 206702])
                    ("numOfDefinedStoragePools" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [206804 206808]))                          
                        :documentation "Provides the number of inactive storage pools ")
                        (reparse-symbol indented_block_body) [206775 207060])
                    ("numOfDevices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [207150 207154])
                            ("cap" variable nil (reparse-symbol function_parameters) [207156 207159])
                            ("flags" variable nil (reparse-symbol function_parameters) [207161 207166]))                          
                        :documentation "Provides the number of node devices.
        
        If the optional 'cap'  argument is non-None, then the count
        will be restricted to devices with the specified capability ")
                        (reparse-symbol indented_block_body) [207133 207538])
                    ("numOfDomains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [207627 207631]))                          
                        :documentation "Provides the number of active domains. ")
                        (reparse-symbol indented_block_body) [207610 207852])
                    ("numOfInterfaces" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [207947 207951]))                          
                        :documentation "Provides the number of active interfaces on the physical host. ")
                        (reparse-symbol indented_block_body) [207927 208202])
                    ("numOfNWFilters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [208295 208299]))                          
                        :documentation "Provides the number of nwfilters. ")
                        (reparse-symbol indented_block_body) [208276 208519])
                    ("numOfNetworks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [208610 208614]))                          
                        :documentation "Provides the number of active networks. ")
                        (reparse-symbol indented_block_body) [208592 208838])
                    ("numOfSecrets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [208927 208931]))                          
                        :documentation "Fetch number of currently defined secrets. ")
                        (reparse-symbol indented_block_body) [208910 209156])
                    ("numOfStoragePools" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [209251 209255]))                          
                        :documentation "Provides the number of active storage pools ")
                        (reparse-symbol indented_block_body) [209229 209491])
                    ("nwfilterBindingCreateXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [209594 209598])
                            ("xml" variable nil (reparse-symbol function_parameters) [209600 209603])
                            ("flags" variable nil (reparse-symbol function_parameters) [209605 209610]))                          
                        :documentation "Define a new network filter, based on an XML description
        similar to the one returned by virNWFilterGetXMLDesc()
        
        virNWFilterFree should be used to free the resources after the
        binding object is no longer needed. ")
                        (reparse-symbol indented_block_body) [209565 210113])
                    ("nwfilterBindingLookupByPortDev" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [210153 210157])
                            ("portdev" variable nil (reparse-symbol function_parameters) [210159 210166]))                          
                        :documentation "Try to lookup a network filter binding on the given hypervisor based
        on network port device name.
        
        virNWFilterBindingFree should be used to free the resources after the
        binding object is no longer needed. ")
                        (reparse-symbol indented_block_body) [210118 210669])
                    ("nwfilterDefineXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [210696 210700])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [210702 210709]))                          
                        :documentation "Define a new network filter, based on an XML description
        similar to the one returned by virNWFilterGetXMLDesc()
        
        virNWFilterFree should be used to free the resources after the
        nwfilter object is no longer needed. ")
                        (reparse-symbol indented_block_body) [210674 211187])
                    ("nwfilterLookupByName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [211217 211221])
                            ("name" variable nil (reparse-symbol function_parameters) [211223 211227]))                          
                        :documentation "Try to lookup a network filter on the given hypervisor based on its name.
        
        virNWFilterFree should be used to free the resources after the
        nwfilter object is no longer needed. ")
                        (reparse-symbol indented_block_body) [211192 211662])
                    ("nwfilterLookupByUUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [211751 211755])
                            ("uuid" variable nil (reparse-symbol function_parameters) [211757 211761]))                          
                        :documentation "Try to lookup a network filter on the given hypervisor based on its UUID. ")
                        (reparse-symbol indented_block_body) [211726 212071])
                    ("nwfilterLookupByUUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [212176 212180])
                            ("uuidstr" variable nil (reparse-symbol function_parameters) [212182 212189]))                          
                        :documentation "Try to lookup an nwfilter on the given hypervisor based on its UUID.
        
        virNWFilterFree should be used to free the resources after the
        nwfilter object is no longer needed. ")
                        (reparse-symbol indented_block_body) [212145 212634])
                    ("restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [212718 212722])
                            ("frm" variable nil (reparse-symbol function_parameters) [212724 212727]))                          
                        :documentation "This method will restore a domain saved to disk by virDomainSave().
        
        See virDomainRestoreFlags() for more control. ")
                        (reparse-symbol indented_block_body) [212706 213033])
                    ("restoreFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [213055 213059])
                            ("frm" variable nil (reparse-symbol function_parameters) [213061 213064])
                            ("dxml" variable nil (reparse-symbol function_parameters) [213066 213070])
                            ("flags" variable nil (reparse-symbol function_parameters) [213077 213082]))                          
                        :documentation "This method will restore a domain saved to disk by virDomainSave().
        
        If the hypervisor supports it, @dxml can be used to alter
        host-specific portions of the domain XML that will be used when
        restoring an image.  For example, it is possible to alter the
        backing filename that is associated with a disk device, in order to
        prepare for file renaming done as part of backing up the disk
        device while the domain is stopped.
        
        If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
        attempt to bypass the file system cache while restoring the file, or
        fail if it cannot do so for the given system; this can allow less
        pressure on file system cache, but also risks slowing restores from NFS.
        
        Normally, the saved state file will remember whether the domain was
        running or paused, and restore defaults to the same state.
        Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
        @flags will override the default read from the file.  These two
        flags are mutually exclusive. ")
                        (reparse-symbol indented_block_body) [213038 214407])
                    ("saveImageDefineXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [214435 214439])
                            ("file" variable nil (reparse-symbol function_parameters) [214441 214445])
                            ("dxml" variable nil (reparse-symbol function_parameters) [214447 214451])
                            ("flags" variable nil (reparse-symbol function_parameters) [214453 214458]))                          
                        :documentation "This updates the definition of a domain stored in a saved state
        file.  @file must be a file created previously by virDomainSave()
        or virDomainSaveFlags().
        
        @dxml can be used to alter host-specific portions of the domain XML
        that will be used when restoring an image.  For example, it is
        possible to alter the backing filename that is associated with a
        disk device, to match renaming done as part of backing up the disk
        device while the domain is stopped.
        
        Normally, the saved state file will remember whether the domain was
        running or paused, and restore defaults to the same state.
        Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
        @flags will override the default saved into the file; omitting both
        leaves the file's default unchanged.  These two flags are mutually
        exclusive. ")
                        (reparse-symbol indented_block_body) [214412 215584])
                    ("saveImageGetXMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [215613 215617])
                            ("file" variable nil (reparse-symbol function_parameters) [215619 215623])
                            ("flags" variable nil (reparse-symbol function_parameters) [215625 215630]))                          
                        :documentation "This method will extract the XML describing the domain at the time
        a saved state file was created.  @file must be a file created
        previously by virDomainSave() or virDomainSaveFlags().
        
        No security-sensitive data will be included unless @flags contains
        VIR_DOMAIN_XML_SECURE. ")
                        (reparse-symbol indented_block_body) [215589 216156])
                    ("secretDefineXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [216248 216252])
                            ("xml" variable nil (reparse-symbol function_parameters) [216254 216257])
                            ("flags" variable nil (reparse-symbol function_parameters) [216259 216264]))                          
                        :documentation "If XML specifies a UUID, locates the specified secret and replaces all
        attributes of the secret specified by UUID by attributes specified in xml
        (any attributes not specified in xml are discarded).
        
        Otherwise, creates a new secret with an automatically chosen UUID, and
        initializes its attributes from xml.
        
        virSecretFree should be used to free the resources after the
        secret object is no longer needed. ")
                        (reparse-symbol indented_block_body) [216228 216964])
                    ("secretLookupByUUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [217051 217055])
                            ("uuid" variable nil (reparse-symbol function_parameters) [217057 217061]))                          
                        :documentation "Try to lookup a secret on the given hypervisor based on its UUID. ")
                        (reparse-symbol indented_block_body) [217028 217357])
                    ("secretLookupByUUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [217458 217462])
                            ("uuidstr" variable nil (reparse-symbol function_parameters) [217464 217471]))                          
                        :documentation "Try to lookup a secret on the given hypervisor based on its UUID.
        Uses the printable string value to describe the UUID
        
        virSecretFree should be used to free the resources after the
        secret object is no longer needed. ")
                        (reparse-symbol indented_block_body) [217429 217964])
                    ("secretLookupByUsage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [217993 217997])
                            ("usageType" variable nil (reparse-symbol function_parameters) [217999 218008])
                            ("usageID" variable nil (reparse-symbol function_parameters) [218010 218017]))                          
                        :documentation "Try to lookup a secret on the given hypervisor based on its usage
        The usageID is unique within the set of secrets sharing the
        same usageType value.
        
        virSecretFree should be used to free the resources after the
        secret object is no longer needed. ")
                        (reparse-symbol indented_block_body) [217969 218548])
                    ("setKeepAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [218635 218639])
                            ("interval" variable nil (reparse-symbol function_parameters) [218641 218649])
                            ("count" variable nil (reparse-symbol function_parameters) [218651 218656]))                          
                        :documentation "Start sending keepalive messages after @interval seconds of inactivity and
        consider the connection to be broken when no response is received after
        @count keepalive messages sent in a row.  In other words, sending count + 1
        keepalive message results in closing the connection.  When @interval is
        <= 0, no keepalive messages will be sent.  When @count is 0, the connection
        will be automatically closed after @interval seconds of inactivity without
        sending any keepalive messages.
        
        Note: The client has to implement and run an event loop with
        virEventRegisterImpl() or virEventRegisterDefaultImpl() to be able to
        use keepalive messages.  Failure to do so may result in connections
        being closed unexpectedly.
        
        Note: This API function controls only keepalive messages sent by the client.
        If the server is configured to use keepalive you still need to run the event
        loop to respond to them, even if you disable keepalives by this function. ")
                        (reparse-symbol indented_block_body) [218618 219909])
                    ("setMemoryParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [219997 220001])
                            ("params" variable nil (reparse-symbol function_parameters) [220003 220009])
                            ("flags" variable nil (reparse-symbol function_parameters) [220011 220016]))                          
                        :documentation "Change the node memory tunables ")
                        (reparse-symbol indented_block_body) [219973 220255])
                    ("storagePoolCreateXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [220353 220357])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [220359 220366])
                            ("flags" variable nil (reparse-symbol function_parameters) [220368 220373]))                          
                        :documentation "Create a new storage based on its XML description. The
        pool is not persistent, so its definition will disappear
        when it is destroyed, or if the host is restarted
        
        virStoragePoolFree should be used to free the resources after the
        storage pool object is no longer needed. ")
                        (reparse-symbol indented_block_body) [220328 220934])
                    ("storagePoolDefineXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [220964 220968])
                            ("xml" variable nil (reparse-symbol function_parameters) [220970 220973])
                            ("flags" variable nil (reparse-symbol function_parameters) [220975 220980]))                          
                        :documentation "Define an inactive persistent storage pool or modify an existing persistent
        one from the XML description.
        
        virStoragePoolFree should be used to free the resources after the
        storage pool object is no longer needed. ")
                        (reparse-symbol indented_block_body) [220939 221473])
                    ("storagePoolLookupByName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [221506 221510])
                            ("name" variable nil (reparse-symbol function_parameters) [221512 221516]))                          
                        :documentation "Fetch a storage pool based on its unique name
        
        virStoragePoolFree should be used to free the resources after the
        storage pool object is no longer needed. ")
                        (reparse-symbol indented_block_body) [221478 221939])
                    ("storagePoolLookupByTargetPath" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [221978 221982])
                            ("path" variable nil (reparse-symbol function_parameters) [221984 221988]))                          
                        :documentation "Fetch a storage pool which maps to a particular target directory.
        If more than one pool maps to the path, it is undefined which
        will be returned first.
        
        virStoragePoolFree should be used to free the resources after the
        storage pool object is no longer needed. ")
                        (reparse-symbol indented_block_body) [221944 222545])
                    ("storagePoolLookupByUUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [222578 222582])
                            ("uuid" variable nil (reparse-symbol function_parameters) [222584 222588]))                          
                        :documentation "Fetch a storage pool based on its globally unique id
        
        virStoragePoolFree should be used to free the resources after the
        storage pool object is no longer needed. ")
                        (reparse-symbol indented_block_body) [222550 223018])
                    ("storagePoolLookupByUUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [223057 223061])
                            ("uuidstr" variable nil (reparse-symbol function_parameters) [223063 223070]))                          
                        :documentation "Fetch a storage pool based on its globally unique id
        
        virStoragePoolFree should be used to free the resources after the
        storage pool object is no longer needed. ")
                        (reparse-symbol indented_block_body) [223023 223515])
                    ("storageVolLookupByKey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [223546 223550])
                            ("key" variable nil (reparse-symbol function_parameters) [223552 223555]))                          
                        :documentation "Fetch a pointer to a storage volume based on its
        globally unique key
        
        virStorageVolFree should be used to free the resources after the
        storage volume object is no longer needed. ")
                        (reparse-symbol indented_block_body) [223520 224004])
                    ("storageVolLookupByPath" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [224036 224040])
                            ("path" variable nil (reparse-symbol function_parameters) [224042 224046]))                          
                        :documentation "Fetch a pointer to a storage volume based on its
        locally (host) unique path
        
        virStorageVolFree should be used to free the resources after the
        storage volume object is no longer needed. ")
                        (reparse-symbol indented_block_body) [224009 224505])
                    ("suspendForDuration" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [224598 224602])
                            ("target" variable nil (reparse-symbol function_parameters) [224604 224610])
                            ("duration" variable nil (reparse-symbol function_parameters) [224612 224620])
                            ("flags" variable nil (reparse-symbol function_parameters) [224622 224627]))                          
                        :documentation "Attempt to suspend the node (host machine) for the given duration of
        time in the specified state (Suspend-to-RAM, Suspend-to-Disk or
        Hybrid-Suspend). Schedule the node's Real-Time-Clock interrupt to
        resume the node after the duration is complete. ")
                        (reparse-symbol indented_block_body) [224575 225113])
                    ("virConnGetLastError" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [225204 225208]))                          
                        :documentation "Provide a pointer to the last error caught on that connection
        
        This method is not protected against access from multiple
        threads. In a multi-threaded application, always use the
        global virGetLastError() API which is backed by thread
        local storage.
        
        If the connection object was discovered to be invalid by
        an API call, then the error will be reported against the
        global error object.
        
        Since 0.6.0, all errors reported in the per-connection object
        are also duplicated in the global error object. As such an
        application can always use virGetLastError(). This method
        remains for backwards compatibility. ")
                        (reparse-symbol indented_block_body) [225180 226012])
                    ("virConnResetLastError" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [226043 226047]))                          
                        :documentation "The error object is kept in thread local storage, so separate
        threads can safely access this concurrently.
        
        Reset the last error caught on that connection ")
                        (reparse-symbol indented_block_body) [226017 226294])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [226380 226384]))                          )
                        (reparse-symbol indented_block_body) [226368 226773])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [226792 226796]))                          )
                        (reparse-symbol indented_block_body) [226778 226819])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [226837 226841])
                            ("exc_type_" variable nil (reparse-symbol function_parameters) [226843 226852])
                            ("exc_value_" variable nil (reparse-symbol function_parameters) [226854 226864])
                            ("traceback_" variable nil (reparse-symbol function_parameters) [226866 226876]))                          )
                        (reparse-symbol indented_block_body) [226824 226900])
                    ("domainEventDeregister" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [226931 226935])
                            ("cb" variable nil (reparse-symbol function_parameters) [226937 226939]))                          
                        :documentation "Removes a Domain Event Callback. De-registering for a
           domain callback will disable delivery of this event type ")
                        (reparse-symbol indented_block_body) [226905 227469])
                    ("domainEventRegister" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [227498 227502])
                            ("cb" variable nil (reparse-symbol function_parameters) [227504 227506])
                            ("opaque" variable nil (reparse-symbol function_parameters) [227508 227514]))                          
                        :documentation "Adds a Domain Event Callback. Registering for a domain
           callback will enable delivery of the events ")
                        (reparse-symbol indented_block_body) [227474 227962])
                    ("_dispatchDomainEventCallbacks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [228001 228005])
                            ("dom" variable nil (reparse-symbol function_parameters) [228007 228010])
                            ("event" variable nil (reparse-symbol function_parameters) [228012 228017])
                            ("detail" variable nil (reparse-symbol function_parameters) [228019 228025]))                          
                        :documentation "Dispatches events to python user domain event callbacks
        ")
                        (reparse-symbol indented_block_body) [227967 228328])
                    ("_dispatchDomainEventLifecycleCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [228375 228379])
                            ("dom" variable nil (reparse-symbol function_parameters) [228381 228384])
                            ("event" variable nil (reparse-symbol function_parameters) [228386 228391])
                            ("detail" variable nil (reparse-symbol function_parameters) [228393 228399])
                            ("cbData" variable nil (reparse-symbol function_parameters) [228401 228407]))                          
                        :documentation "Dispatches events to python user domain lifecycle event callbacks
        ")
                        (reparse-symbol indented_block_body) [228333 228644])
                    ("_dispatchDomainEventGenericCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [228689 228693])
                            ("dom" variable nil (reparse-symbol function_parameters) [228695 228698])
                            ("cbData" variable nil (reparse-symbol function_parameters) [228700 228706]))                          
                        :documentation "Dispatches events to python user domain generic event callbacks
        ")
                        (reparse-symbol indented_block_body) [228649 228926])
                    ("_dispatchDomainEventRTCChangeCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [228973 228977])
                            ("dom" variable nil (reparse-symbol function_parameters) [228979 228982])
                            ("offset" variable nil (reparse-symbol function_parameters) [228984 228990])
                            ("cbData" variable nil (reparse-symbol function_parameters) [228992 228998]))                          
                        :documentation "Dispatches events to python user domain RTC change event callbacks
        ")
                        (reparse-symbol indented_block_body) [228931 229229])
                    ("_dispatchDomainEventWatchdogCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [229275 229279])
                            ("dom" variable nil (reparse-symbol function_parameters) [229281 229284])
                            ("action" variable nil (reparse-symbol function_parameters) [229286 229292])
                            ("cbData" variable nil (reparse-symbol function_parameters) [229294 229300]))                          
                        :documentation "Dispatches events to python user domain watchdog event callbacks
        ")
                        (reparse-symbol indented_block_body) [229234 229529])
                    ("_dispatchDomainEventIOErrorCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [229574 229578])
                            ("dom" variable nil (reparse-symbol function_parameters) [229580 229583])
                            ("srcPath" variable nil (reparse-symbol function_parameters) [229585 229592])
                            ("devAlias" variable nil (reparse-symbol function_parameters) [229594 229602])
                            ("action" variable nil (reparse-symbol function_parameters) [229648 229654])
                            ("cbData" variable nil (reparse-symbol function_parameters) [229656 229662]))                          
                        :documentation "Dispatches events to python user domain IO error event callbacks
        ")
                        (reparse-symbol indented_block_body) [229534 229910])
                    ("_dispatchDomainEventIOErrorReasonCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [229961 229965])
                            ("dom" variable nil (reparse-symbol function_parameters) [229967 229970])
                            ("srcPath" variable nil (reparse-symbol function_parameters) [229972 229979])
                            ("devAlias" variable nil (reparse-symbol function_parameters) [230031 230039])
                            ("action" variable nil (reparse-symbol function_parameters) [230041 230047])
                            ("reason" variable nil (reparse-symbol function_parameters) [230049 230055])
                            ("cbData" variable nil (reparse-symbol function_parameters) [230107 230113]))                          
                        :documentation "Dispatches events to python user domain IO error event callbacks
        ")
                        (reparse-symbol indented_block_body) [229915 230380])
                    ("_dispatchDomainEventGraphicsCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [230426 230430])
                            ("dom" variable nil (reparse-symbol function_parameters) [230432 230435])
                            ("phase" variable nil (reparse-symbol function_parameters) [230437 230442])
                            ("localAddr" variable nil (reparse-symbol function_parameters) [230444 230453])
                            ("remoteAddr" variable nil (reparse-symbol function_parameters) [230499 230509])
                            ("authScheme" variable nil (reparse-symbol function_parameters) [230511 230521])
                            ("subject" variable nil (reparse-symbol function_parameters) [230523 230530])
                            ("cbData" variable nil (reparse-symbol function_parameters) [230576 230582]))                          
                        :documentation "Dispatches events to python user domain graphics event callbacks
        ")
                        (reparse-symbol indented_block_body) [230385 230865])
                    ("_dispatchDomainEventBlockJobCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [230911 230915])
                            ("dom" variable nil (reparse-symbol function_parameters) [230917 230920])
                            ("disk" variable nil (reparse-symbol function_parameters) [230922 230926])
                            ("type" variable nil (reparse-symbol function_parameters) [230928 230932])
                            ("status" variable nil (reparse-symbol function_parameters) [230934 230940])
                            ("cbData" variable nil (reparse-symbol function_parameters) [230942 230948]))                          
                        :documentation "Dispatches events to python user domain blockJob/blockJob2 event callbacks
        ")
                        (reparse-symbol indented_block_body) [230870 231276])
                    ("_dispatchDomainEventDiskChangeCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [231324 231328])
                            ("dom" variable nil (reparse-symbol function_parameters) [231330 231333])
                            ("oldSrcPath" variable nil (reparse-symbol function_parameters) [231335 231345])
                            ("newSrcPath" variable nil (reparse-symbol function_parameters) [231347 231357])
                            ("devAlias" variable nil (reparse-symbol function_parameters) [231359 231367])
                            ("reason" variable nil (reparse-symbol function_parameters) [231369 231375])
                            ("cbData" variable nil (reparse-symbol function_parameters) [231377 231383]))                          
                        :documentation "Dispatches event to python user domain diskChange event callbacks
        ")
                        (reparse-symbol indented_block_body) [231281 231647])
                    ("_dispatchDomainEventTrayChangeCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [231695 231699])
                            ("dom" variable nil (reparse-symbol function_parameters) [231701 231704])
                            ("devAlias" variable nil (reparse-symbol function_parameters) [231706 231714])
                            ("reason" variable nil (reparse-symbol function_parameters) [231716 231722])
                            ("cbData" variable nil (reparse-symbol function_parameters) [231724 231730]))                          
                        :documentation "Dispatches event to python user domain trayChange event callbacks
        ")
                        (reparse-symbol indented_block_body) [231652 231970])
                    ("_dispatchDomainEventPMWakeupCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [232016 232020])
                            ("dom" variable nil (reparse-symbol function_parameters) [232022 232025])
                            ("reason" variable nil (reparse-symbol function_parameters) [232027 232033])
                            ("cbData" variable nil (reparse-symbol function_parameters) [232035 232041]))                          
                        :documentation "Dispatches event to python user domain pmwakeup event callbacks
        ")
                        (reparse-symbol indented_block_body) [231975 232269])
                    ("_dispatchDomainEventPMSuspendCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [232316 232320])
                            ("dom" variable nil (reparse-symbol function_parameters) [232322 232325])
                            ("reason" variable nil (reparse-symbol function_parameters) [232327 232333])
                            ("cbData" variable nil (reparse-symbol function_parameters) [232335 232341]))                          
                        :documentation "Dispatches event to python user domain pmsuspend event callbacks
        ")
                        (reparse-symbol indented_block_body) [232274 232570])
                    ("_dispatchDomainEventBalloonChangeCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [232621 232625])
                            ("dom" variable nil (reparse-symbol function_parameters) [232627 232630])
                            ("actual" variable nil (reparse-symbol function_parameters) [232632 232638])
                            ("cbData" variable nil (reparse-symbol function_parameters) [232640 232646]))                          
                        :documentation "Dispatches events to python user domain balloon change event callbacks
        ")
                        (reparse-symbol indented_block_body) [232575 232881])
                    ("_dispatchDomainEventPMSuspendDiskCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [232932 232936])
                            ("dom" variable nil (reparse-symbol function_parameters) [232938 232941])
                            ("reason" variable nil (reparse-symbol function_parameters) [232943 232949])
                            ("cbData" variable nil (reparse-symbol function_parameters) [232951 232957]))                          
                        :documentation "Dispatches event to python user domain pmsuspend-disk event callbacks
        ")
                        (reparse-symbol indented_block_body) [232886 233191])
                    ("_dispatchDomainEventDeviceRemovedCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [233242 233246])
                            ("dom" variable nil (reparse-symbol function_parameters) [233248 233251])
                            ("devAlias" variable nil (reparse-symbol function_parameters) [233253 233261])
                            ("cbData" variable nil (reparse-symbol function_parameters) [233263 233269]))                          
                        :documentation "Dispatches event to python user domain device removed event callbacks
        ")
                        (reparse-symbol indented_block_body) [233196 233505])
                    ("_dispatchDomainEventTunableCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [233550 233554])
                            ("dom" variable nil (reparse-symbol function_parameters) [233556 233559])
                            ("params" variable nil (reparse-symbol function_parameters) [233561 233567])
                            ("cbData" variable nil (reparse-symbol function_parameters) [233569 233575]))                          
                        :documentation "Dispatches event to python user domain tunable event callbacks
        ")
                        (reparse-symbol indented_block_body) [233510 233802])
                    ("_dispatchDomainEventAgentLifecycleCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [233854 233858])
                            ("dom" variable nil (reparse-symbol function_parameters) [233860 233863])
                            ("state" variable nil (reparse-symbol function_parameters) [233865 233870])
                            ("reason" variable nil (reparse-symbol function_parameters) [233872 233878])
                            ("cbData" variable nil (reparse-symbol function_parameters) [233880 233886]))                          
                        :documentation "Dispatches event to python user domain agent lifecycle event callback
        ")
                        (reparse-symbol indented_block_body) [233807 234128])
                    ("_dispatchDomainEventDeviceAddedCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [234177 234181])
                            ("dom" variable nil (reparse-symbol function_parameters) [234183 234186])
                            ("devAlias" variable nil (reparse-symbol function_parameters) [234188 234196])
                            ("cbData" variable nil (reparse-symbol function_parameters) [234198 234204]))                          
                        :documentation "Dispatches event to python user domain device added event callbacks
        ")
                        (reparse-symbol indented_block_body) [234133 234438])
                    ("_dispatchDomainEventMigrationIterationCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [234494 234498])
                            ("dom" variable nil (reparse-symbol function_parameters) [234500 234503])
                            ("iteration" variable nil (reparse-symbol function_parameters) [234505 234514])
                            ("cbData" variable nil (reparse-symbol function_parameters) [234516 234522]))                          
                        :documentation "Dispatches event to python user domain migration iteration event callbacks
        ")
                        (reparse-symbol indented_block_body) [234443 234764])
                    ("_dispatchDomainEventJobCompletedCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [234814 234818])
                            ("dom" variable nil (reparse-symbol function_parameters) [234820 234823])
                            ("params" variable nil (reparse-symbol function_parameters) [234825 234831])
                            ("cbData" variable nil (reparse-symbol function_parameters) [234833 234839]))                          
                        :documentation "Dispatches event to python user domain job completed callbacks
        ")
                        (reparse-symbol indented_block_body) [234769 235066])
                    ("_dispatchDomainEventDeviceRemovalFailedCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [235123 235127])
                            ("dom" variable nil (reparse-symbol function_parameters) [235129 235132])
                            ("devAlias" variable nil (reparse-symbol function_parameters) [235134 235142])
                            ("cbData" variable nil (reparse-symbol function_parameters) [235144 235150]))                          
                        :documentation "Dispatches event to python user domain device removal failed event callbacks
        ")
                        (reparse-symbol indented_block_body) [235071 235393])
                    ("_dispatchDomainEventMetadataChangeCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [235445 235449])
                            ("dom" variable nil (reparse-symbol function_parameters) [235451 235454])
                            ("mtype" variable nil (reparse-symbol function_parameters) [235456 235461])
                            ("nsuri" variable nil (reparse-symbol function_parameters) [235463 235468])
                            ("cbData" variable nil (reparse-symbol function_parameters) [235470 235476]))                          
                        :documentation "Dispatches event to python user domain metadata change event callbacks
        ")
                        (reparse-symbol indented_block_body) [235398 235717])
                    ("_dispatchDomainEventBlockThresholdCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [235769 235773])
                            ("dom" variable nil (reparse-symbol function_parameters) [235775 235778])
                            ("dev" variable nil (reparse-symbol function_parameters) [235780 235783])
                            ("path" variable nil (reparse-symbol function_parameters) [235785 235789])
                            ("threshold" variable nil (reparse-symbol function_parameters) [235791 235800])
                            ("excess" variable nil (reparse-symbol function_parameters) [235802 235808])
                            ("cbData" variable nil (reparse-symbol function_parameters) [235810 235816]))                          
                        :documentation "Dispatches event to python user domain block device threshold event callbacks
        ")
                        (reparse-symbol indented_block_body) [235722 236080])
                    ("domainEventDeregisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [236114 236118])
                            ("callbackID" variable nil (reparse-symbol function_parameters) [236120 236130]))                          
                        :documentation "Removes a Domain Event Callback. De-registering for a
           domain callback will disable delivery of this event type ")
                        (reparse-symbol indented_block_body) [236085 236575])
                    ("_dispatchNetworkEventLifecycleCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [236623 236627])
                            ("net" variable nil (reparse-symbol function_parameters) [236629 236632])
                            ("event" variable nil (reparse-symbol function_parameters) [236634 236639])
                            ("detail" variable nil (reparse-symbol function_parameters) [236641 236647])
                            ("cbData" variable nil (reparse-symbol function_parameters) [236649 236655]))                          
                        :documentation "Dispatches events to python user network lifecycle event callbacks
        ")
                        (reparse-symbol indented_block_body) [236580 236894])
                    ("networkEventDeregisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [236929 236933])
                            ("callbackID" variable nil (reparse-symbol function_parameters) [236935 236945]))                          
                        :documentation "Removes a Network Event Callback. De-registering for a
           network callback will disable delivery of this event type")
                        (reparse-symbol indented_block_body) [236899 237394])
                    ("networkEventRegisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [237427 237431])
                            ("net" variable nil (reparse-symbol function_parameters) [237433 237436])
                            ("eventID" variable nil (reparse-symbol function_parameters) [237438 237445])
                            ("cb" variable nil (reparse-symbol function_parameters) [237447 237449])
                            ("opaque" variable nil (reparse-symbol function_parameters) [237451 237457]))                          
                        :documentation "Adds a Network Event Callback. Registering for a network
           callback will enable delivery of the events")
                        (reparse-symbol indented_block_body) [237399 238159])
                    ("domainEventRegisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [238191 238195])
                            ("dom" variable nil (reparse-symbol function_parameters) [238197 238200])
                            ("eventID" variable nil (reparse-symbol function_parameters) [238202 238209])
                            ("cb" variable nil (reparse-symbol function_parameters) [238211 238213])
                            ("opaque" variable nil (reparse-symbol function_parameters) [238215 238221]))                          
                        :documentation "Adds a Domain Event Callback. Registering for a domain
           callback will enable delivery of the events ")
                        (reparse-symbol indented_block_body) [238164 238916])
                    ("_dispatchStoragePoolEventLifecycleCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [238968 238972])
                            ("pool" variable nil (reparse-symbol function_parameters) [238974 238978])
                            ("event" variable nil (reparse-symbol function_parameters) [238980 238985])
                            ("detail" variable nil (reparse-symbol function_parameters) [238987 238993])
                            ("cbData" variable nil (reparse-symbol function_parameters) [238995 239001]))                          
                        :documentation "Dispatches events to python user storage pool
           lifecycle event callbacks
        ")
                        (reparse-symbol indented_block_body) [238921 239261])
                    ("_dispatchStoragePoolEventGenericCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [239311 239315])
                            ("pool" variable nil (reparse-symbol function_parameters) [239317 239321])
                            ("cbData" variable nil (reparse-symbol function_parameters) [239323 239329]))                          
                        :documentation "Dispatches events to python user storage pool
           generic event callbacks
        ")
                        (reparse-symbol indented_block_body) [239266 239572])
                    ("storagePoolEventDeregisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [239611 239615])
                            ("callbackID" variable nil (reparse-symbol function_parameters) [239617 239627]))                          
                        :documentation "Removes a Storage Pool Event Callback. De-registering for a
           storage pool callback will disable delivery of this event type")
                        (reparse-symbol indented_block_body) [239577 240098])
                    ("storagePoolEventRegisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [240135 240139])
                            ("pool" variable nil (reparse-symbol function_parameters) [240141 240145])
                            ("eventID" variable nil (reparse-symbol function_parameters) [240147 240154])
                            ("cb" variable nil (reparse-symbol function_parameters) [240156 240158])
                            ("opaque" variable nil (reparse-symbol function_parameters) [240160 240166]))                          
                        :documentation "Adds a Storage Pool Event Callback. Registering for a storage pool
           callback will enable delivery of the events")
                        (reparse-symbol indented_block_body) [240103 240904])
                    ("_dispatchNodeDeviceEventLifecycleCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [240955 240959])
                            ("dev" variable nil (reparse-symbol function_parameters) [240961 240964])
                            ("event" variable nil (reparse-symbol function_parameters) [240966 240971])
                            ("detail" variable nil (reparse-symbol function_parameters) [240973 240979])
                            ("cbData" variable nil (reparse-symbol function_parameters) [240981 240987]))                          
                        :documentation "Dispatches events to python user node device
           lifecycle event callbacks
        ")
                        (reparse-symbol indented_block_body) [240909 241244])
                    ("_dispatchNodeDeviceEventGenericCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [241293 241297])
                            ("dev" variable nil (reparse-symbol function_parameters) [241299 241302])
                            ("cbData" variable nil (reparse-symbol function_parameters) [241304 241310]))                          
                        :documentation "Dispatches events to python user node device
           generic event callbacks
        ")
                        (reparse-symbol indented_block_body) [241249 241550])
                    ("nodeDeviceEventDeregisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [241588 241592])
                            ("callbackID" variable nil (reparse-symbol function_parameters) [241594 241604]))                          
                        :documentation "Removes a Node Device Event Callback. De-registering for a
           node device callback will disable delivery of this event type")
                        (reparse-symbol indented_block_body) [241555 242070])
                    ("nodeDeviceEventRegisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [242106 242110])
                            ("dev" variable nil (reparse-symbol function_parameters) [242112 242115])
                            ("eventID" variable nil (reparse-symbol function_parameters) [242117 242124])
                            ("cb" variable nil (reparse-symbol function_parameters) [242126 242128])
                            ("opaque" variable nil (reparse-symbol function_parameters) [242130 242136]))                          
                        :documentation "Adds a Node Device Event Callback. Registering for a node device
           callback will enable delivery of the events")
                        (reparse-symbol indented_block_body) [242075 242864])
                    ("_dispatchSecretEventLifecycleCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [242911 242915])
                            ("secret" variable nil (reparse-symbol function_parameters) [242917 242923])
                            ("event" variable nil (reparse-symbol function_parameters) [242925 242930])
                            ("detail" variable nil (reparse-symbol function_parameters) [242932 242938])
                            ("cbData" variable nil (reparse-symbol function_parameters) [242940 242946]))                          
                        :documentation "Dispatches events to python user secret lifecycle event callbacks
        ")
                        (reparse-symbol indented_block_body) [242869 243186])
                    ("_dispatchSecretEventGenericCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [243231 243235])
                            ("secret" variable nil (reparse-symbol function_parameters) [243237 243243])
                            ("cbData" variable nil (reparse-symbol function_parameters) [243245 243251]))                          
                        :documentation "Dispatches events to python user secret generic event callbacks
        ")
                        (reparse-symbol indented_block_body) [243191 243474])
                    ("secretEventDeregisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [243508 243512])
                            ("callbackID" variable nil (reparse-symbol function_parameters) [243514 243524]))                          
                        :documentation "Removes a Secret Event Callback. De-registering for a
           secret callback will disable delivery of this event type")
                        (reparse-symbol indented_block_body) [243479 243968])
                    ("secretEventRegisterAny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [244000 244004])
                            ("secret" variable nil (reparse-symbol function_parameters) [244006 244012])
                            ("eventID" variable nil (reparse-symbol function_parameters) [244014 244021])
                            ("cb" variable nil (reparse-symbol function_parameters) [244023 244025])
                            ("opaque" variable nil (reparse-symbol function_parameters) [244027 244033]))                          
                        :documentation "Adds a Secret Event Callback. Registering for a secret
           callback will enable delivery of the events")
                        (reparse-symbol indented_block_body) [243973 244733])
                    ("listAllDomains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [244757 244761])
                            ("flags" variable nil (reparse-symbol function_parameters) [244763 244768]))                          
                        :documentation "List all domains and returns a list of domain objects")
                        (reparse-symbol indented_block_body) [244738 245144])
                    ("listAllStoragePools" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [245173 245177])
                            ("flags" variable nil (reparse-symbol function_parameters) [245179 245184]))                          
                        :documentation "Returns a list of storage pool objects")
                        (reparse-symbol indented_block_body) [245149 245562])
                    ("listAllNetworks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [245587 245591])
                            ("flags" variable nil (reparse-symbol function_parameters) [245593 245598]))                          
                        :documentation "Returns a list of network objects")
                        (reparse-symbol indented_block_body) [245567 245957])
                    ("listAllInterfaces" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [245984 245988])
                            ("flags" variable nil (reparse-symbol function_parameters) [245990 245995]))                          
                        :documentation "Returns a list of interface objects")
                        (reparse-symbol indented_block_body) [245962 246366])
                    ("listAllDevices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [246390 246394])
                            ("flags" variable nil (reparse-symbol function_parameters) [246396 246401]))                          
                        :documentation "Returns a list of host node device objects")
                        (reparse-symbol indented_block_body) [246371 246778])
                    ("listAllNWFilters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [246804 246808])
                            ("flags" variable nil (reparse-symbol function_parameters) [246810 246815]))                          
                        :documentation "Returns a list of network filter objects")
                        (reparse-symbol indented_block_body) [246783 247192])
                    ("listAllNWFilterBindings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [247225 247229])
                            ("flags" variable nil (reparse-symbol function_parameters) [247231 247236]))                          
                        :documentation "Returns a list of network filter binding objects")
                        (reparse-symbol indented_block_body) [247197 247642])
                    ("listAllSecrets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [247666 247670])
                            ("flags" variable nil (reparse-symbol function_parameters) [247672 247677]))                          
                        :documentation "Returns a list of secret objects")
                        (reparse-symbol indented_block_body) [247647 248040])
                    ("_dispatchCloseCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [248072 248076])
                            ("reason" variable nil (reparse-symbol function_parameters) [248078 248084])
                            ("cbData" variable nil (reparse-symbol function_parameters) [248086 248092]))                          
                        :documentation "Dispatches events to python user close callback")
                        (reparse-symbol indented_block_body) [248045 248268])
                    ("unregisterCloseCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [248302 248306]))                          
                        :documentation "Removes a close event callback")
                        (reparse-symbol indented_block_body) [248274 248521])
                    ("registerCloseCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [248552 248556])
                            ("cb" variable nil (reparse-symbol function_parameters) [248558 248560])
                            ("opaque" variable nil (reparse-symbol function_parameters) [248562 248568]))                          
                        :documentation "Adds a close event callback, providing a notification
         when a connection fails / closes")
                        (reparse-symbol indented_block_body) [248526 248945])
                    ("createXMLWithFiles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [248973 248977])
                            ("xmlDesc" variable nil (reparse-symbol function_parameters) [248979 248986])
                            ("files" variable nil (reparse-symbol function_parameters) [248988 248993])
                            ("flags" variable nil (reparse-symbol function_parameters) [248995 249000]))                          
                        :documentation "Launch a new guest domain, based on an XML description similar
        to the one returned by virDomainGetXMLDesc()
        This function may require privileged access to the hypervisor.
        The domain is not persistent, so its definition will disappear when it
        is destroyed, or if the host is restarted (see virDomainDefineXML() to
        define persistent domains).

        @files provides an array of file descriptors which will be
        made available to the 'init' process of the guest. The file
        handles exposed to the guest will be renumbered to start
        from 3 (ie immediately following stderr). This is only
        supported for guests which use container based virtualization
        technology.

        If the VIR_DOMAIN_START_PAUSED flag is set, the guest domain
        will be started, but its CPUs will remain paused. The CPUs
        can later be manually started using virDomainResume.

        If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
        domain will be automatically destroyed when the virConnectPtr
        object is finally released. This will also happen if the
        client application crashes / loses its connection to the
        libvirtd daemon. Any domains marked for auto destroy will
        block attempts at migration, save-to-file, or snapshots. ")
                        (reparse-symbol indented_block_body) [248950 250592])
                    ("getAllDomainStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [250619 250623])
                            ("stats" variable nil (reparse-symbol function_parameters) [250625 250630])
                            ("flags" variable nil (reparse-symbol function_parameters) [250636 250641]))                          
                        :documentation "Query statistics for all domains on a given connection.

        Report statistics of various parameters for a running VM according to @stats
        field. The statistics are returned as an array of structures for each queried
        domain. The structure contains an array of typed parameters containing the
        individual statistics. The typed parameter name for each statistic field
        consists of a dot-separated string containing name of the requested group
        followed by a group specific description of the statistic value.

        The statistic groups are enabled using the @stats parameter which is a
        binary-OR of enum virDomainStatsTypes. The following groups are available
        (although not necessarily implemented for each hypervisor):

        VIR_DOMAIN_STATS_STATE: Return domain state and reason for entering that
        state. The typed parameter keys are in this format:
        \"state.state\" - state of the VM, returned as int from virDomainState enum
        \"state.reason\" - reason for entering given state, returned as int from
                         virDomain*Reason enum corresponding to given state.

        Using 0 for @stats returns all stats groups supported by the given
        hypervisor.

        Specifying VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS as @flags makes
        the function return error in case some of the stat types in @stats were
        not recognized by the daemon.

        Similarly to virConnectListAllDomains, @flags can contain various flags to
        filter the list of domains to provide stats for.

        VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE selects online domains while
        VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE selects offline ones.

        VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT and
        VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT allow to filter the list
        according to their persistence.

        To filter the list of VMs by domain state @flags can contain
        VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING,
        VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED,
        VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF and/or
        VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER for all other states. ")
                        (reparse-symbol indented_block_body) [250597 253237])
                    ("domainListGetStats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [253265 253269])
                            ("doms" variable nil (reparse-symbol function_parameters) [253271 253275])
                            ("stats" variable nil (reparse-symbol function_parameters) [253277 253282])
                            ("flags" variable nil (reparse-symbol function_parameters) [253286 253291]))                          
                        :documentation " Query statistics for given domains.

        Report statistics of various parameters for a running VM according to @stats
        field. The statistics are returned as an array of structures for each queried
        domain. The structure contains an array of typed parameters containing the
        individual statistics. The typed parameter name for each statistic field
        consists of a dot-separated string containing name of the requested group
        followed by a group specific description of the statistic value.

        The statistic groups are enabled using the @stats parameter which is a
        binary-OR of enum virDomainStatsTypes. The following groups are available
        (although not necessarily implemented for each hypervisor):

        VIR_DOMAIN_STATS_STATE: Return domain state and reason for entering that
        state. The typed parameter keys are in this format:
        \"state.state\" - state of the VM, returned as int from virDomainState enum
        \"state.reason\" - reason for entering given state, returned as int from
                         virDomain*Reason enum corresponding to given state.

        Using 0 for @stats returns all stats groups supported by the given
        hypervisor.

        Specifying VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS as @flags makes
        the function return error in case some of the stat types in @stats were
        not recognized by the daemon.

        Get statistics about domains provided as a list in @doms. @stats is
        a bit field selecting requested statistics types.")
                        (reparse-symbol indented_block_body) [253242 255457]))                  
                :type "class")
                nil [172906 255457])
            ("virNodeDevice" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [255536 255553])
                            ("if" code nil (reparse-symbol indented_block_body) [255562 255703])
                            ("self" variable nil (reparse-symbol indented_block_body) [255711 255725]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [255504 255508])
                            ("conn" variable nil (reparse-symbol function_parameters) [255510 255514])
                            ("_obj" variable nil (reparse-symbol function_parameters) [255516 255520]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [255491 255726])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [255743 255747]))                          )
                        (reparse-symbol indented_block_body) [255731 255855])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [255872 255876]))                          )
                        (reparse-symbol indented_block_body) [255860 255905])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [255924 255928]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [255910 256037])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [256125 256129])
                            ("flags" variable nil (reparse-symbol function_parameters) [256131 256136]))                          
                        :documentation "Fetch an XML document describing all aspects of
        the device. ")
                        (reparse-symbol indented_block_body) [256113 256388])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [256405 256409]))                          
                        :documentation "Destroy the device object. The virtual device (only works for vHBA
        currently) is removed from the host operating system.  This function
        may require privileged access. ")
                        (reparse-symbol indented_block_body) [256393 256759])
                    ("detachFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [256780 256784])
                            ("driverName" variable nil (reparse-symbol function_parameters) [256786 256796])
                            ("flags" variable nil (reparse-symbol function_parameters) [256798 256803]))                          
                        :documentation "Detach the node device from the node itself so that it may be
        assigned to a guest domain.
        
        Depending on the hypervisor, this may involve operations such as
        unbinding any device drivers from the device, binding the device to
        a dummy device driver and resetting the device. Different backend
        drivers expect the device to be bound to different dummy
        devices. For example, QEMU's \"kvm\" backend driver (the default)
        expects the device to be bound to \"pci-stub\", but its \"vfio\"
        backend driver expects the device to be bound to \"vfio-pci\".
        
        If the device is currently in use by the node, this method may
        fail.
        
        Once the device is not assigned to any guest, it may be re-attached
        to the node using the virNodeDeviceReAttach() method. ")
                        (reparse-symbol indented_block_body) [256764 257845])
                    ("dettach" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [257862 257866]))                          
                        :documentation "Dettach the node device from the node itself so that it may be
        assigned to a guest domain.
        
        Depending on the hypervisor, this may involve operations such
        as unbinding any device drivers from the device, binding the
        device to a dummy device driver and resetting the device.
        
        If the device is currently in use by the node, this method may
        fail.
        
        Once the device is not assigned to any guest, it may be re-attached
        to the node using the virNodeDeviceReattach() method.
        
        If the caller needs control over which backend driver will be used
        during PCI device assignment (to use something other than the
        default, for example VFIO), the newer virNodeDeviceDetachFlags()
        API should be used instead. ")
                        (reparse-symbol indented_block_body) [257850 258850])
                    ("listCaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [258930 258934]))                          
                        :documentation "list the node device's capabilities ")
                        (reparse-symbol indented_block_body) [258917 259141])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [259226 259230]))                          
                        :documentation "Just return the device name ")
                        (reparse-symbol indented_block_body) [259217 259350])
                    ("numOfCaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [259369 259373]))                          
                        :documentation "Accessor for the number of capabilities supported by the device. ")
                        (reparse-symbol indented_block_body) [259355 259609])
                    ("parent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [259625 259629]))                          
                        :documentation "Accessor for the parent of the device ")
                        (reparse-symbol indented_block_body) [259614 259761])
                    ("reAttach" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [259779 259783]))                          
                        :documentation "Re-attach a previously detached node device to the node so that it
        may be used by the node again.
        
        Depending on the hypervisor, this may involve operations such
        as resetting the device, unbinding it from a dummy device driver
        and binding it to its appropriate driver.
        
        If the device is currently in use by a guest, this method may fail. ")
                        (reparse-symbol indented_block_body) [259766 260345])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [260360 260364]))                          
                        :documentation "Reset a previously detached node device to the node before or
        after assigning it to a guest.
        
        The exact reset semantics depends on the hypervisor and device
        type but, for example, KVM will attempt to reset PCI devices with
        a Function Level Reset, Secondary Bus Reset or a Power Management
        D-State reset.
        
        If the reset will affect other devices which are currently in use,
        this function may fail. ")
                        (reparse-symbol indented_block_body) [260350 260995]))                  
                :type "class")
                nil [255458 260995])
            ("virSecret" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [261070 261087])
                            ("if" code nil (reparse-symbol indented_block_body) [261096 261237])
                            ("self" variable nil (reparse-symbol indented_block_body) [261245 261259]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261038 261042])
                            ("conn" variable nil (reparse-symbol function_parameters) [261044 261048])
                            ("_obj" variable nil (reparse-symbol function_parameters) [261050 261054]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [261025 261260])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261277 261281]))                          )
                        (reparse-symbol indented_block_body) [261265 261385])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261402 261406]))                          )
                        (reparse-symbol indented_block_body) [261390 261435])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261454 261458]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [261440 261563])
                    ("UUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261635 261639]))                          
                        :documentation "Extract the UUID unique Identifier of a secret. ")
                        (reparse-symbol indented_block_body) [261626 261848])
                    ("UUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261868 261872]))                          
                        :documentation "Fetch globally unique ID of the secret as a string. ")
                        (reparse-symbol indented_block_body) [261853 262097])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [262180 262184])
                            ("flags" variable nil (reparse-symbol function_parameters) [262186 262191]))                          
                        :documentation "Fetches an XML document describing attributes of the secret. ")
                        (reparse-symbol indented_block_body) [262168 262428])
                    ("setValue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [262505 262509])
                            ("value" variable nil (reparse-symbol function_parameters) [262511 262516])
                            ("flags" variable nil (reparse-symbol function_parameters) [262518 262523]))                          
                        :documentation "Associates a value with a secret. ")
                        (reparse-symbol indented_block_body) [262492 262734])
                    ("undefine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [262818 262822]))                          
                        :documentation "Deletes the specified secret.  This does not free the associated
        virSecretPtr object. ")
                        (reparse-symbol indented_block_body) [262805 263077])
                    ("usageID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [263094 263098]))                          
                        :documentation "Get the unique identifier of the object with which this
        secret is to be used. The format of the identifier is
        dependent on the usage type of the secret. For a secret
        with a usage type of VIR_SECRET_USAGE_TYPE_VOLUME the
        identifier will be a fully qualified path name. The
        identifiers are intended to be unique within the set of
        all secrets sharing the same usage type. ie, there shall
        only ever be one secret for each volume path. ")
                        (reparse-symbol indented_block_body) [263082 263676])
                    ("usageType" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [263695 263699]))                          
                        :documentation "Get the type of object which uses this secret. The returned
        value is one of the constants defined in the virSecretUsageType
        enumeration. More values may be added to this enumeration in
        the future, so callers should expect to see usage types they
        do not explicitly know about. ")
                        (reparse-symbol indented_block_body) [263681 264100])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [264174 264178])
                            ("flags" variable nil (reparse-symbol function_parameters) [264180 264185]))                          
                        :documentation "Fetches the value associated with a secret. ")
                        (reparse-symbol indented_block_body) [264164 264401]))                  
                :type "class")
                nil [260996 264401])
            ("virNWFilter" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [264478 264495])
                            ("if" code nil (reparse-symbol indented_block_body) [264504 264645])
                            ("self" variable nil (reparse-symbol indented_block_body) [264653 264667]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [264446 264450])
                            ("conn" variable nil (reparse-symbol function_parameters) [264452 264456])
                            ("_obj" variable nil (reparse-symbol function_parameters) [264458 264462]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [264433 264668])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [264685 264689]))                          )
                        (reparse-symbol indented_block_body) [264673 264795])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [264812 264816]))                          )
                        (reparse-symbol indented_block_body) [264800 264845])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [264864 264868]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [264850 264975])
                    ("UUID" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [265049 265053]))                          
                        :documentation "Extract the UUID unique Identifier of a network filter. ")
                        (reparse-symbol indented_block_body) [265040 265274])
                    ("UUIDString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [265294 265298]))                          
                        :documentation "Fetch globally unique ID of the network filter as a string. ")
                        (reparse-symbol indented_block_body) [265279 265535])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [265622 265626])
                            ("flags" variable nil (reparse-symbol function_parameters) [265628 265633]))                          
                        :documentation "Provide an XML description of the network filter. The description may be
        reused later to redefine the network filter with virNWFilterCreateXML(). ")
                        (reparse-symbol indented_block_body) [265610 265967])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [265981 265985]))                          
                        :documentation "Get the public name for the network filter ")
                        (reparse-symbol indented_block_body) [265972 266118])
                    ("undefine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266136 266140]))                          
                        :documentation "Undefine the nwfilter object. This call will not succeed if
        a running VM is referencing the filter. This does not free the
        associated virNWFilterPtr object. ")
                        (reparse-symbol indented_block_body) [266123 266478]))                  
                :type "class")
                nil [264402 266478])
            ("virNWFilterBinding" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [266562 266579])
                            ("if" code nil (reparse-symbol indented_block_body) [266588 266729])
                            ("self" variable nil (reparse-symbol indented_block_body) [266737 266751]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266530 266534])
                            ("conn" variable nil (reparse-symbol function_parameters) [266536 266540])
                            ("_obj" variable nil (reparse-symbol function_parameters) [266542 266546]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [266517 266752])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266769 266773]))                          )
                        (reparse-symbol indented_block_body) [266757 266886])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266903 266907]))                          )
                        (reparse-symbol indented_block_body) [266891 266936])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266955 266959]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [266941 267073])
                    ("XMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [267167 267171])
                            ("flags" variable nil (reparse-symbol function_parameters) [267173 267178]))                          
                        :documentation "Provide an XML description of the network filter. The description may be
        reused later to redefine the network filter with virNWFilterCreateXML(). ")
                        (reparse-symbol indented_block_body) [267155 267526])
                    ("delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [267542 267546]))                          
                        :documentation "Delete the binding object. This does not free the
        associated virNWFilterBindingPtr object. ")
                        (reparse-symbol indented_block_body) [267531 267820])
                    ("filterName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [267840 267844]))                          
                        :documentation "Get the filter name for the network filter binding ")
                        (reparse-symbol indented_block_body) [267825 267998])
                    ("portDev" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [268015 268019]))                          
                        :documentation "Get the port dev name for the network filter binding ")
                        (reparse-symbol indented_block_body) [268003 268172]))                  
                :type "class")
                nil [266479 268172])
            ("virStream" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [268247 268264])
                            ("if" code nil (reparse-symbol indented_block_body) [268273 268414])
                            ("self" variable nil (reparse-symbol indented_block_body) [268422 268436]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [268215 268219])
                            ("conn" variable nil (reparse-symbol function_parameters) [268221 268225])
                            ("_obj" variable nil (reparse-symbol function_parameters) [268227 268231]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [268202 268437])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [268454 268458]))                          )
                        (reparse-symbol indented_block_body) [268442 268487])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [268506 268510]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [268492 268615])
                    ("abort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [268696 268700]))                          
                        :documentation "Request that the in progress data transfer be cancelled
        abnormally before the end of the stream has been reached.
        For output streams this can be used to inform the driver
        that the stream is being terminated early. For input
        streams this can be used to inform the driver that it
        should stop sending data.
        
        If the stream is non-blocking, any callback must be removed
        beforehand. ")
                        (reparse-symbol indented_block_body) [268686 269296])
                    ("eventRemoveCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [269325 269329]))                          
                        :documentation "Remove an event callback from the stream ")
                        (reparse-symbol indented_block_body) [269301 269553])
                    ("eventUpdateCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [269582 269586])
                            ("events" variable nil (reparse-symbol function_parameters) [269588 269594]))                          
                        :documentation "Changes the set of events to monitor for a stream. This allows
        for event notification to be changed without having to
        unregister & register the callback completely. This method
        is guaranteed to succeed if a callback is already registered ")
                        (reparse-symbol indented_block_body) [269558 270047])
                    ("finish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [270063 270067]))                          
                        :documentation "Indicate that there is no further data to be transmitted
        on the stream. For output streams this should be called once
        all data has been written. For input streams this should be
        called once virStreamRecv returns end-of-file.
        
        This method is a synchronization point for all asynchronous
        errors, so if this returns a success code the application can
        be sure that all data has been successfully processed.
        
        If the stream is non-blocking, any callback must be removed
        beforehand. ")
                        (reparse-symbol indented_block_body) [270052 270780])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [270864 270868]))                          )
                        (reparse-symbol indented_block_body) [270852 271122])
                    ("_dispatchStreamEventCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [271160 271164])
                            ("events" variable nil (reparse-symbol function_parameters) [271166 271172])
                            ("cbData" variable nil (reparse-symbol function_parameters) [271174 271180]))                          
                        :documentation "
        Dispatches events to python user's stream event callbacks
        ")
                        (reparse-symbol indented_block_body) [271127 271384])
                    ("eventAddCallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [271410 271414])
                            ("events" variable nil (reparse-symbol function_parameters) [271416 271422])
                            ("cb" variable nil (reparse-symbol function_parameters) [271424 271426])
                            ("opaque" variable nil (reparse-symbol function_parameters) [271428 271434]))                          )
                        (reparse-symbol indented_block_body) [271389 271678])
                    ("recvAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [271695 271699])
                            ("handler" variable nil (reparse-symbol function_parameters) [271701 271708])
                            ("opaque" variable nil (reparse-symbol function_parameters) [271710 271716]))                          
                        :documentation "Receive the entire data stream, sending the data to the
        requested data sink. This is simply a convenient alternative
        to virStreamRecv, for apps that do blocking-I/O.

        A hypothetical handler function looks like:

            def handler(stream, # virStream instance
                        buf,    # string containing received data
                        opaque): # extra data passed to recvAll as opaque
                fd = opaque
                return os.write(fd, buf)
        ")
                        (reparse-symbol indented_block_body) [271683 272881])
                    ("sendAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [272898 272902])
                            ("handler" variable nil (reparse-symbol function_parameters) [272904 272911])
                            ("opaque" variable nil (reparse-symbol function_parameters) [272913 272919]))                          
                        :documentation "
        Send the entire data stream, reading the data from the
        requested data source. This is simply a convenient alternative
        to virStreamSend, for apps that do blocking-I/O.

        A hypothetical handler function looks like:

            def handler(stream, # virStream instance
                        nbytes, # int amt of data to read
                        opaque): # extra data passed to recvAll as opaque
                fd = opaque
                return os.read(fd, nbytes)
        ")
                        (reparse-symbol indented_block_body) [272886 273948])
                    ("recv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [273962 273966])
                            ("nbytes" variable nil (reparse-symbol function_parameters) [273968 273974]))                          
                        :documentation "Reads a series of bytes from the stream. This method may
        block the calling application for an arbitrary amount
        of time.

        Errors are not guaranteed to be reported synchronously
        with the call, but may instead be delayed until a
        subsequent call.

        On success, the received data is returned. On failure, an
        exception is raised. If the stream is a NONBLOCK stream and
        the request would block, integer -2 is returned.
        ")
                        (reparse-symbol indented_block_body) [273953 274620])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [274634 274638])
                            ("data" variable nil (reparse-symbol function_parameters) [274640 274644]))                          
                        :documentation "Write a series of bytes to the stream. This method may
        block the calling application for an arbitrary amount
        of time. Once an application has finished sending data
        it should call virStreamFinish to wait for successful
        confirmation from the driver, or detect any error

        This method may not be used if a stream source has been
        registered

        Errors are not guaranteed to be reported synchronously
        with the call, but may instead be delayed until a
        subsequent call.
        ")
                        (reparse-symbol indented_block_body) [274625 275342])
                    ("recvHole" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [275360 275364])
                            ("flags" variable nil (reparse-symbol function_parameters) [275366 275371]))                          
                        :documentation "This method is used to determine the length in bytes
        of the empty space to be created in a stream's target
        file when uploading or downloading sparsely populated
        files. This is the counterpart to sendHole.
        ")
                        (reparse-symbol indented_block_body) [275347 275782])
                    ("sendHole" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [275800 275804])
                            ("length" variable nil (reparse-symbol function_parameters) [275806 275812])
                            ("flags" variable nil (reparse-symbol function_parameters) [275814 275819]))                          
                        :documentation "Rather than transmitting empty file space, this method
        directs the stream target to create length bytes of empty
        space.  This method would be used when uploading or
        downloading sparsely populated files to avoid the
        needless copy of empty file space.
        ")
                        (reparse-symbol indented_block_body) [275787 276288])
                    ("recvFlags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [276307 276311])
                            ("nbytes" variable nil (reparse-symbol function_parameters) [276313 276319])
                            ("flags" variable nil (reparse-symbol function_parameters) [276321 276326]))                          
                        :documentation "Reads a series of bytes from the stream. This method may
        block the calling application for an arbitrary amount
        of time. This is just like recv except it has flags
        argument.

        Errors are not guaranteed to be reported synchronously
        with the call, but may instead be delayed until a
        subsequent call.

        On success, the received data is returned. On failure, an
        exception is raised. If the stream is a NONBLOCK stream and
        the request would block, integer -2 is returned.
        ")
                        (reparse-symbol indented_block_body) [276293 277054])
                    ("sparseRecvAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [277077 277081])
                            ("handler" variable nil (reparse-symbol function_parameters) [277083 277090])
                            ("holeHandler" variable nil (reparse-symbol function_parameters) [277092 277103])
                            ("opaque" variable nil (reparse-symbol function_parameters) [277105 277111]))                          
                        :documentation "Receive the entire data stream, sending the data to
        the requested data sink handler and calling the skip
        holeHandler to generate holes for sparse stream targets.
        This is simply a convenient alternative to recvFlags, for
        apps that do blocking-I/O and want to preserve sparseness.

        Hypothetical callbacks can look like this:

            def handler(stream, # virStream instance
                        buf,    # string containing received data
                        opaque): # extra data passed to sparseRecvAll as opaque
                fd = opaque
                return os.write(fd, buf)

            def holeHandler(stream, # virStream instance
                            length, # number of bytes to skip
                            opaque): # extra data passed to sparseRecvAll as opaque
                fd = opaque
                cur = os.lseek(fd, length, os.SEEK_CUR)
                return os.ftruncate(fd, cur) # take this extra step to
                                             # actually allocate the hole
        ")
                        (reparse-symbol indented_block_body) [277059 279166])
                    ("sparseSendAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [279189 279193])
                            ("handler" variable nil (reparse-symbol function_parameters) [279195 279202])
                            ("holeHandler" variable nil (reparse-symbol function_parameters) [279204 279215])
                            ("skipHandler" variable nil (reparse-symbol function_parameters) [279217 279228])
                            ("opaque" variable nil (reparse-symbol function_parameters) [279230 279236]))                          
                        :documentation "Send the entire data stream, reading the data from the
        requested data source. This is simply a convenient
        alternative to virStreamSend, for apps that do
        blocking-I/O and want to preserve sparseness.

        Hypothetical callbacks can look like this:

            def handler(stream, # virStream instance
                        nbytes, # int amt of data to read
                        opaque): # extra data passed to sparseSendAll as opaque
                fd = opaque
                return os.read(fd, nbytes)

            def holeHandler(stream, # virStream instance
                            opaque): # extra data passed to sparseSendAll as opaque
                fd = opaque
                cur = os.lseek(fd, 0, os.SEEK_CUR)
                # ... find out current section and its boundaries
                # and set inData = True/False and sectionLen correspondingly
                os.lseek(fd, cur, os.SEEK_SET)
                return [inData, sectionLen]

            def skipHandler(stream, # virStream instance
                            length, # number of bytes to skip
                            opaque): # extra data passed to sparseSendAll as opaque
                fd = opaque
                return os.lseek(fd, length, os.SEEK_CUR)

        ")
                        (reparse-symbol indented_block_body) [279171 281389]))                  
                :type "class")
                nil [268173 281389])
            ("virDomainCheckpoint" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [281473 281488])
                            ("self" variable nil (reparse-symbol indented_block_body) [281497 281523])
                            ("if" code nil (reparse-symbol indented_block_body) [281532 281673])
                            ("self" variable nil (reparse-symbol indented_block_body) [281681 281695]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [281442 281446])
                            ("dom" variable nil (reparse-symbol function_parameters) [281448 281451])
                            ("_obj" variable nil (reparse-symbol function_parameters) [281453 281457]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [281429 281696])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [281713 281717]))                          )
                        (reparse-symbol indented_block_body) [281701 281831])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [281848 281852]))                          )
                        (reparse-symbol indented_block_body) [281836 281881])
                    ("domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [281897 281901]))                          )
                        (reparse-symbol indented_block_body) [281886 281929])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [281948 281952]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [281934 282067])
                    ("getConnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282174 282178]))                          
                        :documentation "Get the connection that owns the domain that a checkpoint was created for")
                        (reparse-symbol indented_block_body) [282159 282299])
                    ("getDomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282318 282322]))                          
                        :documentation "Get the domain that a checkpoint was created for")
                        (reparse-symbol indented_block_body) [282304 282417]))                  
                :type "class")
                nil [281390 282417])
            ("virDomainSnapshot" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [282500 282515])
                            ("self" variable nil (reparse-symbol indented_block_body) [282524 282550])
                            ("if" code nil (reparse-symbol indented_block_body) [282559 282700])
                            ("self" variable nil (reparse-symbol indented_block_body) [282708 282722]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282469 282473])
                            ("dom" variable nil (reparse-symbol function_parameters) [282475 282478])
                            ("_obj" variable nil (reparse-symbol function_parameters) [282480 282484]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [282456 282723])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282740 282744]))                          )
                        (reparse-symbol indented_block_body) [282728 282856])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282873 282877]))                          )
                        (reparse-symbol indented_block_body) [282861 282906])
                    ("domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282922 282926]))                          )
                        (reparse-symbol indented_block_body) [282911 282954])
                    ("c_pointer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282973 282977]))                          
                        :documentation "Get C pointer to underlying object")
                        (reparse-symbol indented_block_body) [282959 283090])
                    ("delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283189 283193])
                            ("flags" variable nil (reparse-symbol function_parameters) [283195 283200]))                          
                        :documentation "Delete the snapshot.
        
        If @flags is 0, then just this snapshot is deleted, and changes
        from this snapshot are automatically merged into children
        snapshots.  If @flags includes VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN,
        then this snapshot and any descendant snapshots are deleted.  If
        @flags includes VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY, then any
        descendant snapshots are deleted, but this snapshot remains.  These
        two flags are mutually exclusive.
        
        If @flags includes VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY, then
        any snapshot metadata tracked by libvirt is removed while keeping
        the snapshot contents intact; if a hypervisor does not require any
        libvirt metadata to track snapshots, then this flag is silently
        ignored. ")
                        (reparse-symbol indented_block_body) [283178 284213])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [284230 284234]))                          
                        :documentation "Get the public name for that snapshot ")
                        (reparse-symbol indented_block_body) [284218 284449])
                    ("getParent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [284468 284472])
                            ("flags" variable nil (reparse-symbol function_parameters) [284474 284479]))                          
                        :documentation "Get the parent snapshot for @snapshot, if any.
        
        virDomainSnapshotFree should be used to free the resources after the
        snapshot object is no longer needed. ")
                        (reparse-symbol indented_block_body) [284454 284911])
                    ("getXMLDesc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [284931 284935])
                            ("flags" variable nil (reparse-symbol function_parameters) [284937 284942]))                          
                        :documentation "Provide an XML description of the domain snapshot.
        
        No security-sensitive data will be included unless @flags contains
        VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
        connections.  For this API, @flags should not contain either
        VIR_DOMAIN_XML_INACTIVE or VIR_DOMAIN_XML_UPDATE_CPU. ")
                        (reparse-symbol indented_block_body) [284916 285466])
                    ("hasMetadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [285487 285491])
                            ("flags" variable nil (reparse-symbol function_parameters) [285493 285498]))                          
                        :documentation "Determine if the given snapshot is associated with libvirt metadata
        that would prevent the deletion of the domain. ")
                        (reparse-symbol indented_block_body) [285471 285813])
                    ("isCurrent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [285832 285836])
                            ("flags" variable nil (reparse-symbol function_parameters) [285838 285843]))                          
                        :documentation "Determine if the given snapshot is the domain's current snapshot.  See
        also virDomainHasCurrentSnapshot(). ")
                        (reparse-symbol indented_block_body) [285818 286146])
                    ("listChildrenNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [286239 286243])
                            ("flags" variable nil (reparse-symbol function_parameters) [286245 286250]))                          
                        :documentation "collect the list of child snapshot names for the given snapshot ")
                        (reparse-symbol indented_block_body) [286217 286520])
                    ("numChildren" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [286624 286628])
                            ("flags" variable nil (reparse-symbol function_parameters) [286630 286635]))                          
                        :documentation "Provides the number of child snapshots for this domain snapshot.
        
        By default, this command covers only direct children; it is also possible
        to expand things to cover all descendants, when @flags includes
        VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS.  Also, some filters are provided in
        groups, where each group contains bits that describe mutually exclusive
        attributes of a snapshot, and where all bits within a group describe
        all possible snapshots.  Some hypervisors might reject explicit bits
        from a group where the hypervisor cannot make a distinction.  For a
        group supported by a given hypervisor, the behavior when no bits of a
        group are set is identical to the behavior when all bits in that group
        are set.  When setting bits from more than one group, it is possible to
        select an impossible combination, in that case a hypervisor may return
        either 0 or an error.
        
        The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
        VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
        have no further children (a leaf snapshot).
        
        The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
        VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
        whether they have metadata that would prevent the removal of the last
        reference to a domain.
        
        The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
        VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
        for filtering snapshots based on what domain state is tracked by the
        snapshot.
        
        The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
        VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
        whether the snapshot is stored inside the disk images or as
        additional files. ")
                        (reparse-symbol indented_block_body) [286608 288785])
                    ("getConnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [288888 288892]))                          
                        :documentation "Get the connection that owns the domain that a snapshot was created for")
                        (reparse-symbol indented_block_body) [288873 289011])
                    ("getDomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [289030 289034]))                          
                        :documentation "Get the domain that a snapshot was created for")
                        (reparse-symbol indented_block_body) [289016 289127])
                    ("listAllChildren" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [289152 289156])
                            ("flags" variable nil (reparse-symbol function_parameters) [289158 289163]))                          
                        :documentation "List all child snapshots and returns a list of snapshot objects")
                        (reparse-symbol indented_block_body) [289132 289575]))                  
                :type "class")
                nil [282419 289575])
            ("VIR_DOMAIN_BLKIO_PARAM_INT" variable nil nil [289600 289630])
            ("VIR_DOMAIN_BLKIO_PARAM_UINT" variable nil nil [289631 289662])
            ("VIR_DOMAIN_BLKIO_PARAM_LLONG" variable nil nil [289663 289695])
            ("VIR_DOMAIN_BLKIO_PARAM_ULLONG" variable nil nil [289696 289729])
            ("VIR_DOMAIN_BLKIO_PARAM_DOUBLE" variable nil nil [289730 289763])
            ("VIR_DOMAIN_BLKIO_PARAM_BOOLEAN" variable nil nil [289764 289798])
            ("VIR_CPU_COMPARE_ERROR" code nil nil [289822 289848])
            ("VIR_CPU_COMPARE_INCOMPATIBLE" variable nil nil [289849 289881])
            ("VIR_CPU_COMPARE_IDENTICAL" variable nil nil [289882 289911])
            ("VIR_CPU_COMPARE_SUPERSET" variable nil nil [289912 289940])
            ("VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES" variable nil nil [289971 290015])
            ("VIR_CONNECT_BASELINE_CPU_MIGRATABLE" variable nil nil [290016 290055])
            ("VIR_CONNECT_CLOSE_REASON_ERROR" variable nil nil [290081 290115])
            ("VIR_CONNECT_CLOSE_REASON_EOF" variable nil nil [290116 290148])
            ("VIR_CONNECT_CLOSE_REASON_KEEPALIVE" variable nil nil [290149 290187])
            ("VIR_CONNECT_CLOSE_REASON_CLIENT" variable nil nil [290188 290223])
            ("VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE" variable nil nil [290253 290298])
            ("VIR_CRED_USERNAME" variable nil nil [290327 290348])
            ("VIR_CRED_AUTHNAME" variable nil nil [290349 290370])
            ("VIR_CRED_LANGUAGE" variable nil nil [290371 290392])
            ("VIR_CRED_CNONCE" variable nil nil [290393 290412])
            ("VIR_CRED_PASSPHRASE" variable nil nil [290413 290436])
            ("VIR_CRED_ECHOPROMPT" variable nil nil [290437 290460])
            ("VIR_CRED_NOECHOPROMPT" variable nil nil [290461 290486])
            ("VIR_CRED_REALM" variable nil nil [290487 290505])
            ("VIR_CRED_EXTERNAL" variable nil nil [290506 290527])
            ("VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_UNKNOWN" variable nil nil [290573 290632])
            ("VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_DOMAIN_STARTED" variable nil nil [290633 290699])
            ("VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_CHANNEL" variable nil nil [290700 290759])
            ("VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_CONNECTED" variable nil nil [290804 290864])
            ("VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_DISCONNECTED" variable nil nil [290865 290928])
            ("VIR_DOMAIN_BLOCK_JOB_COMPLETED" variable nil nil [290968 291002])
            ("VIR_DOMAIN_BLOCK_JOB_FAILED" variable nil nil [291003 291034])
            ("VIR_DOMAIN_BLOCK_JOB_CANCELED" variable nil nil [291035 291068])
            ("VIR_DOMAIN_BLOCK_JOB_READY" variable nil nil [291069 291099])
            ("VIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START" variable nil nil [291141 291190])
            ("VIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START" variable nil nil [291191 291238])
            ("VIR_CONNECT_RO" variable nil nil [291258 291276])
            ("VIR_CONNECT_NO_ALIASES" variable nil nil [291277 291303])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE" variable nil nil [291340 291384])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE" variable nil nil [291385 291431])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT" variable nil nil [291432 291480])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT" variable nil nil [291481 291528])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING" variable nil nil [291529 291575])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED" variable nil nil [291576 291621])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF" variable nil nil [291622 291668])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER" variable nil nil [291669 291714])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT" variable nil nil [291715 291767])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING" variable nil nil [291768 291822])
            ("VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS" variable nil nil [291823 291883])
            ("VIR_CONNECT_LIST_DOMAINS_ACTIVE" variable nil nil [291917 291952])
            ("VIR_CONNECT_LIST_DOMAINS_INACTIVE" variable nil nil [291953 291990])
            ("VIR_CONNECT_LIST_DOMAINS_PERSISTENT" variable nil nil [291991 292030])
            ("VIR_CONNECT_LIST_DOMAINS_TRANSIENT" variable nil nil [292031 292069])
            ("VIR_CONNECT_LIST_DOMAINS_RUNNING" variable nil nil [292070 292107])
            ("VIR_CONNECT_LIST_DOMAINS_PAUSED" variable nil nil [292108 292144])
            ("VIR_CONNECT_LIST_DOMAINS_SHUTOFF" variable nil nil [292145 292182])
            ("VIR_CONNECT_LIST_DOMAINS_OTHER" variable nil nil [292183 292219])
            ("VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE" variable nil nil [292220 292262])
            ("VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE" variable nil nil [292263 292308])
            ("VIR_CONNECT_LIST_DOMAINS_AUTOSTART" variable nil nil [292309 292350])
            ("VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART" variable nil nil [292351 292395])
            ("VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT" variable nil nil [292396 292440])
            ("VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT" variable nil nil [292441 292484])
            ("VIR_CONNECT_LIST_INTERFACES_INACTIVE" variable nil nil [292521 292561])
            ("VIR_CONNECT_LIST_INTERFACES_ACTIVE" variable nil nil [292562 292600])
            ("VIR_CONNECT_LIST_NETWORKS_INACTIVE" variable nil nil [292635 292673])
            ("VIR_CONNECT_LIST_NETWORKS_ACTIVE" variable nil nil [292674 292710])
            ("VIR_CONNECT_LIST_NETWORKS_PERSISTENT" variable nil nil [292711 292751])
            ("VIR_CONNECT_LIST_NETWORKS_TRANSIENT" variable nil nil [292752 292791])
            ("VIR_CONNECT_LIST_NETWORKS_AUTOSTART" variable nil nil [292792 292832])
            ("VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART" variable nil nil [292833 292876])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM" variable nil nil [292913 292957])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV" variable nil nil [292958 293003])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV" variable nil nil [293004 293049])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE" variable nil nil [293050 293101])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET" variable nil nil [293102 293144])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST" variable nil nil [293145 293193])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET" variable nil nil [293194 293244])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI" variable nil nil [293245 293289])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE" variable nil nil [293290 293337])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST" variable nil nil [293338 293385])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS" variable nil nil [293386 293433])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC" variable nil nil [293434 293487])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_DRM" variable nil nil [293488 293532])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV_TYPES" variable nil nil [293533 293584])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV" variable nil nil [293585 293631])
            ("VIR_CONNECT_LIST_NODE_DEVICES_CAP_CCW_DEV" variable nil nil [293632 293681])
            ("VIR_CONNECT_LIST_SECRETS_EPHEMERAL" variable nil nil [293715 293753])
            ("VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL" variable nil nil [293754 293795])
            ("VIR_CONNECT_LIST_SECRETS_PRIVATE" variable nil nil [293796 293832])
            ("VIR_CONNECT_LIST_SECRETS_NO_PRIVATE" variable nil nil [293833 293872])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE" variable nil nil [293911 293954])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE" variable nil nil [293955 293996])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_PERSISTENT" variable nil nil [293997 294042])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT" variable nil nil [294043 294087])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART" variable nil nil [294088 294133])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART" variable nil nil [294134 294182])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_DIR" variable nil nil [294183 294222])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_FS" variable nil nil [294223 294262])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_NETFS" variable nil nil [294263 294305])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL" variable nil nil [294306 294350])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_DISK" variable nil nil [294351 294393])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI" variable nil nil [294394 294437])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_SCSI" variable nil nil [294438 294480])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_MPATH" variable nil nil [294481 294524])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_RBD" variable nil nil [294525 294567])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG" variable nil nil [294568 294615])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_GLUSTER" variable nil nil [294616 294662])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_ZFS" variable nil nil [294663 294706])
            ("VIR_CONNECT_LIST_STORAGE_POOLS_VSTORAGE" variable nil nil [294707 294755])
            ("VIR_DOMAIN_BLOCK_COMMIT_SHALLOW" variable nil nil [294785 294820])
            ("VIR_DOMAIN_BLOCK_COMMIT_DELETE" variable nil nil [294821 294855])
            ("VIR_DOMAIN_BLOCK_COMMIT_ACTIVE" variable nil nil [294856 294890])
            ("VIR_DOMAIN_BLOCK_COMMIT_RELATIVE" variable nil nil [294891 294927])
            ("VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES" variable nil nil [294928 294972])
            ("VIR_DOMAIN_BLOCK_COPY_SHALLOW" variable nil nil [295000 295033])
            ("VIR_DOMAIN_BLOCK_COPY_REUSE_EXT" variable nil nil [295034 295069])
            ("VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB" variable nil nil [295070 295109])
            ("VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC" variable nil nil [295141 295177])
            ("VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT" variable nil nil [295178 295214])
            ("VIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES" variable nil nil [295245 295290])
            ("VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES" variable nil nil [295325 295371])
            ("VIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN" variable nil nil [295397 295434])
            ("VIR_DOMAIN_BLOCK_JOB_TYPE_PULL" variable nil nil [295435 295469])
            ("VIR_DOMAIN_BLOCK_JOB_TYPE_COPY" variable nil nil [295470 295504])
            ("VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT" variable nil nil [295505 295541])
            ("VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT" variable nil nil [295542 295585])
            ("VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES" variable nil nil [295613 295655])
            ("VIR_DOMAIN_BLOCK_REBASE_SHALLOW" variable nil nil [295685 295720])
            ("VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT" variable nil nil [295721 295758])
            ("VIR_DOMAIN_BLOCK_REBASE_COPY_RAW" variable nil nil [295759 295795])
            ("VIR_DOMAIN_BLOCK_REBASE_COPY" variable nil nil [295796 295828])
            ("VIR_DOMAIN_BLOCK_REBASE_RELATIVE" variable nil nil [295829 295866])
            ("VIR_DOMAIN_BLOCK_REBASE_COPY_DEV" variable nil nil [295867 295904])
            ("VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES" variable nil nil [295905 295949])
            ("VIR_DOMAIN_BLOCK_RESIZE_BYTES" variable nil nil [295979 296012])
            ("VIR_DOMAIN_BLOCKED_UNKNOWN" variable nil nil [296039 296069])
            ("VIR_DOMAIN_CHANNEL_FORCE" variable nil nil [296095 296123])
            ("VIR_DOMAIN_CONSOLE_FORCE" variable nil nil [296149 296177])
            ("VIR_DOMAIN_CONSOLE_SAFE" variable nil nil [296178 296205])
            ("VIR_DOMAIN_CONTROL_ERROR_REASON_NONE" variable nil nil [296237 296277])
            ("VIR_DOMAIN_CONTROL_ERROR_REASON_UNKNOWN" variable nil nil [296278 296321])
            ("VIR_DOMAIN_CONTROL_ERROR_REASON_MONITOR" variable nil nil [296322 296365])
            ("VIR_DOMAIN_CONTROL_ERROR_REASON_INTERNAL" variable nil nil [296366 296410])
            ("VIR_DOMAIN_CONTROL_OK" variable nil nil [296436 296461])
            ("VIR_DOMAIN_CONTROL_JOB" variable nil nil [296462 296488])
            ("VIR_DOMAIN_CONTROL_OCCUPIED" variable nil nil [296489 296520])
            ("VIR_DOMAIN_CONTROL_ERROR" variable nil nil [296521 296549])
            ("VIR_DUMP_CRASH" variable nil nil [296576 296594])
            ("VIR_DUMP_LIVE" variable nil nil [296595 296612])
            ("VIR_DUMP_BYPASS_CACHE" variable nil nil [296613 296638])
            ("VIR_DUMP_RESET" variable nil nil [296639 296657])
            ("VIR_DUMP_MEMORY_ONLY" variable nil nil [296658 296683])
            ("VIR_DOMAIN_CORE_DUMP_FORMAT_RAW" variable nil nil [296711 296746])
            ("VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB" variable nil nil [296747 296789])
            ("VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO" variable nil nil [296790 296831])
            ("VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY" variable nil nil [296832 296876])
            ("VIR_DOMAIN_CRASHED_UNKNOWN" variable nil nil [296903 296933])
            ("VIR_DOMAIN_CRASHED_PANICKED" variable nil nil [296934 296965])
            ("VIR_DOMAIN_NONE" variable nil nil [296990 297009])
            ("VIR_DOMAIN_START_PAUSED" variable nil nil [297010 297037])
            ("VIR_DOMAIN_START_AUTODESTROY" variable nil nil [297038 297070])
            ("VIR_DOMAIN_START_BYPASS_CACHE" variable nil nil [297071 297104])
            ("VIR_DOMAIN_START_FORCE_BOOT" variable nil nil [297105 297136])
            ("VIR_DOMAIN_START_VALIDATE" variable nil nil [297137 297167])
            ("VIR_DOMAIN_DEFINE_VALIDATE" variable nil nil [297192 297222])
            ("VIR_DOMAIN_DESTROY_DEFAULT" variable nil nil [297254 297284])
            ("VIR_DOMAIN_DESTROY_GRACEFUL" variable nil nil [297285 297316])
            ("VIR_DOMAIN_DEVICE_MODIFY_CURRENT" variable nil nil [297347 297383])
            ("VIR_DOMAIN_DEVICE_MODIFY_LIVE" variable nil nil [297384 297417])
            ("VIR_DOMAIN_DEVICE_MODIFY_CONFIG" variable nil nil [297418 297453])
            ("VIR_DOMAIN_DEVICE_MODIFY_FORCE" variable nil nil [297454 297488])
            ("VIR_DOMAIN_DISK_ERROR_NONE" variable nil nil [297515 297545])
            ("VIR_DOMAIN_DISK_ERROR_UNSPEC" variable nil nil [297546 297578])
            ("VIR_DOMAIN_DISK_ERROR_NO_SPACE" variable nil nil [297579 297613])
            ("VIR_DOMAIN_EVENT_CRASHED_PANICKED" variable nil nil [297649 297686])
            ("VIR_DOMAIN_EVENT_DEFINED_ADDED" variable nil nil [297722 297756])
            ("VIR_DOMAIN_EVENT_DEFINED_UPDATED" variable nil nil [297757 297793])
            ("VIR_DOMAIN_EVENT_DEFINED_RENAMED" variable nil nil [297794 297830])
            ("VIR_DOMAIN_EVENT_DEFINED_FROM_SNAPSHOT" variable nil nil [297831 297873])
            ("VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4" variable nil nil [297911 297953])
            ("VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6" variable nil nil [297954 297996])
            ("VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX" variable nil nil [297997 298039])
            ("VIR_DOMAIN_EVENT_GRAPHICS_CONNECT" variable nil nil [298071 298108])
            ("VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE" variable nil nil [298109 298149])
            ("VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT" variable nil nil [298150 298190])
            ("VIR_DOMAIN_EVENT_ID_LIFECYCLE" variable nil nil [298211 298244])
            ("VIR_DOMAIN_EVENT_ID_REBOOT" variable nil nil [298245 298275])
            ("VIR_DOMAIN_EVENT_ID_RTC_CHANGE" variable nil nil [298276 298310])
            ("VIR_DOMAIN_EVENT_ID_WATCHDOG" variable nil nil [298311 298343])
            ("VIR_DOMAIN_EVENT_ID_IO_ERROR" variable nil nil [298344 298376])
            ("VIR_DOMAIN_EVENT_ID_GRAPHICS" variable nil nil [298377 298409])
            ("VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON" variable nil nil [298410 298449])
            ("VIR_DOMAIN_EVENT_ID_CONTROL_ERROR" variable nil nil [298450 298487])
            ("VIR_DOMAIN_EVENT_ID_BLOCK_JOB" variable nil nil [298488 298521])
            ("VIR_DOMAIN_EVENT_ID_DISK_CHANGE" variable nil nil [298522 298557])
            ("VIR_DOMAIN_EVENT_ID_TRAY_CHANGE" variable nil nil [298558 298594])
            ("VIR_DOMAIN_EVENT_ID_PMWAKEUP" variable nil nil [298595 298628])
            ("VIR_DOMAIN_EVENT_ID_PMSUSPEND" variable nil nil [298629 298663])
            ("VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE" variable nil nil [298664 298703])
            ("VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK" variable nil nil [298704 298743])
            ("VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED" variable nil nil [298744 298783])
            ("VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2" variable nil nil [298784 298820])
            ("VIR_DOMAIN_EVENT_ID_TUNABLE" variable nil nil [298821 298853])
            ("VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE" variable nil nil [298854 298894])
            ("VIR_DOMAIN_EVENT_ID_DEVICE_ADDED" variable nil nil [298895 298932])
            ("VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION" variable nil nil [298933 298977])
            ("VIR_DOMAIN_EVENT_ID_JOB_COMPLETED" variable nil nil [298978 299016])
            ("VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED" variable nil nil [299017 299063])
            ("VIR_DOMAIN_EVENT_ID_METADATA_CHANGE" variable nil nil [299064 299104])
            ("VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD" variable nil nil [299105 299145])
            ("VIR_DOMAIN_EVENT_IO_ERROR_NONE" variable nil nil [299177 299211])
            ("VIR_DOMAIN_EVENT_IO_ERROR_PAUSE" variable nil nil [299212 299247])
            ("VIR_DOMAIN_EVENT_IO_ERROR_REPORT" variable nil nil [299248 299284])
            ("VIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY" variable nil nil [299324 299363])
            ("VIR_DOMAIN_EVENT_PMSUSPENDED_DISK" variable nil nil [299364 299401])
            ("VIR_DOMAIN_EVENT_RESUMED_UNPAUSED" variable nil nil [299437 299474])
            ("VIR_DOMAIN_EVENT_RESUMED_MIGRATED" variable nil nil [299475 299512])
            ("VIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT" variable nil nil [299513 299555])
            ("VIR_DOMAIN_EVENT_RESUMED_POSTCOPY" variable nil nil [299556 299593])
            ("VIR_DOMAIN_EVENT_SHUTDOWN_FINISHED" variable nil nil [299630 299668])
            ("VIR_DOMAIN_EVENT_SHUTDOWN_GUEST" variable nil nil [299669 299704])
            ("VIR_DOMAIN_EVENT_SHUTDOWN_HOST" variable nil nil [299705 299739])
            ("VIR_DOMAIN_EVENT_STARTED_BOOTED" variable nil nil [299775 299810])
            ("VIR_DOMAIN_EVENT_STARTED_MIGRATED" variable nil nil [299811 299848])
            ("VIR_DOMAIN_EVENT_STARTED_RESTORED" variable nil nil [299849 299886])
            ("VIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT" variable nil nil [299887 299929])
            ("VIR_DOMAIN_EVENT_STARTED_WAKEUP" variable nil nil [299930 299965])
            ("VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN" variable nil nil [300001 300038])
            ("VIR_DOMAIN_EVENT_STOPPED_DESTROYED" variable nil nil [300039 300077])
            ("VIR_DOMAIN_EVENT_STOPPED_CRASHED" variable nil nil [300078 300114])
            ("VIR_DOMAIN_EVENT_STOPPED_MIGRATED" variable nil nil [300115 300152])
            ("VIR_DOMAIN_EVENT_STOPPED_SAVED" variable nil nil [300153 300187])
            ("VIR_DOMAIN_EVENT_STOPPED_FAILED" variable nil nil [300188 300223])
            ("VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT" variable nil nil [300224 300266])
            ("VIR_DOMAIN_EVENT_SUSPENDED_PAUSED" variable nil nil [300304 300341])
            ("VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED" variable nil nil [300342 300381])
            ("VIR_DOMAIN_EVENT_SUSPENDED_IOERROR" variable nil nil [300382 300420])
            ("VIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG" variable nil nil [300421 300460])
            ("VIR_DOMAIN_EVENT_SUSPENDED_RESTORED" variable nil nil [300461 300500])
            ("VIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT" variable nil nil [300501 300545])
            ("VIR_DOMAIN_EVENT_SUSPENDED_API_ERROR" variable nil nil [300546 300586])
            ("VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY" variable nil nil [300587 300626])
            ("VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED" variable nil nil [300627 300673])
            ("VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN" variable nil nil [300708 300745])
            ("VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE" variable nil nil [300746 300784])
            ("VIR_DOMAIN_EVENT_DEFINED" variable nil nil [300807 300835])
            ("VIR_DOMAIN_EVENT_UNDEFINED" variable nil nil [300836 300866])
            ("VIR_DOMAIN_EVENT_STARTED" variable nil nil [300867 300895])
            ("VIR_DOMAIN_EVENT_SUSPENDED" variable nil nil [300896 300926])
            ("VIR_DOMAIN_EVENT_RESUMED" variable nil nil [300927 300955])
            ("VIR_DOMAIN_EVENT_STOPPED" variable nil nil [300956 300984])
            ("VIR_DOMAIN_EVENT_SHUTDOWN" variable nil nil [300985 301014])
            ("VIR_DOMAIN_EVENT_PMSUSPENDED" variable nil nil [301015 301047])
            ("VIR_DOMAIN_EVENT_CRASHED" variable nil nil [301048 301076])
            ("VIR_DOMAIN_EVENT_UNDEFINED_REMOVED" variable nil nil [301114 301152])
            ("VIR_DOMAIN_EVENT_UNDEFINED_RENAMED" variable nil nil [301153 301191])
            ("VIR_DOMAIN_EVENT_WATCHDOG_NONE" variable nil nil [301224 301258])
            ("VIR_DOMAIN_EVENT_WATCHDOG_PAUSE" variable nil nil [301259 301294])
            ("VIR_DOMAIN_EVENT_WATCHDOG_RESET" variable nil nil [301295 301330])
            ("VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF" variable nil nil [301331 301369])
            ("VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN" variable nil nil [301370 301408])
            ("VIR_DOMAIN_EVENT_WATCHDOG_DEBUG" variable nil nil [301409 301444])
            ("VIR_DOMAIN_EVENT_WATCHDOG_INJECTNMI" variable nil nil [301445 301484])
            ("VIR_DOMAIN_JOB_STATS_COMPLETED" variable nil nil [301514 301548])
            ("VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE" variable nil nil [301586 301630])
            ("VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT" variable nil nil [301631 301675])
            ("VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP" variable nil nil [301676 301718])
            ("VIR_DOMAIN_JOB_OPERATION_UNKNOWN" variable nil nil [301744 301780])
            ("VIR_DOMAIN_JOB_OPERATION_START" variable nil nil [301781 301815])
            ("VIR_DOMAIN_JOB_OPERATION_SAVE" variable nil nil [301816 301849])
            ("VIR_DOMAIN_JOB_OPERATION_RESTORE" variable nil nil [301850 301886])
            ("VIR_DOMAIN_JOB_OPERATION_MIGRATION_IN" variable nil nil [301887 301928])
            ("VIR_DOMAIN_JOB_OPERATION_MIGRATION_OUT" variable nil nil [301929 301971])
            ("VIR_DOMAIN_JOB_OPERATION_SNAPSHOT" variable nil nil [301972 302009])
            ("VIR_DOMAIN_JOB_OPERATION_SNAPSHOT_REVERT" variable nil nil [302010 302054])
            ("VIR_DOMAIN_JOB_OPERATION_DUMP" variable nil nil [302055 302088])
            ("VIR_DOMAIN_JOB_NONE" variable nil nil [302109 302132])
            ("VIR_DOMAIN_JOB_BOUNDED" variable nil nil [302133 302159])
            ("VIR_DOMAIN_JOB_UNBOUNDED" variable nil nil [302160 302188])
            ("VIR_DOMAIN_JOB_COMPLETED" variable nil nil [302189 302217])
            ("VIR_DOMAIN_JOB_FAILED" variable nil nil [302218 302243])
            ("VIR_DOMAIN_JOB_CANCELLED" variable nil nil [302244 302272])
            ("VIR_DOMAIN_LIFECYCLE_POWEROFF" variable nil nil [302295 302328])
            ("VIR_DOMAIN_LIFECYCLE_REBOOT" variable nil nil [302329 302360])
            ("VIR_DOMAIN_LIFECYCLE_CRASH" variable nil nil [302361 302391])
            ("VIR_DOMAIN_LIFECYCLE_ACTION_DESTROY" variable nil nil [302420 302459])
            ("VIR_DOMAIN_LIFECYCLE_ACTION_RESTART" variable nil nil [302460 302499])
            ("VIR_DOMAIN_LIFECYCLE_ACTION_RESTART_RENAME" variable nil nil [302500 302546])
            ("VIR_DOMAIN_LIFECYCLE_ACTION_PRESERVE" variable nil nil [302547 302587])
            ("VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_DESTROY" variable nil nil [302588 302636])
            ("VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_RESTART" variable nil nil [302637 302685])
            ("VIR_MEMORY_VIRTUAL" variable nil nil [302710 302732])
            ("VIR_MEMORY_PHYSICAL" variable nil nil [302733 302756])
            ("VIR_DOMAIN_MEM_CURRENT" variable nil nil [302784 302810])
            ("VIR_DOMAIN_MEM_LIVE" variable nil nil [302811 302834])
            ("VIR_DOMAIN_MEM_CONFIG" variable nil nil [302835 302860])
            ("VIR_DOMAIN_MEM_MAXIMUM" variable nil nil [302861 302887])
            ("VIR_DOMAIN_MEMORY_STAT_SWAP_IN" variable nil nil [302915 302949])
            ("VIR_DOMAIN_MEMORY_STAT_SWAP_OUT" variable nil nil [302950 302985])
            ("VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT" variable nil nil [302986 303024])
            ("VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT" variable nil nil [303025 303063])
            ("VIR_DOMAIN_MEMORY_STAT_UNUSED" variable nil nil [303064 303097])
            ("VIR_DOMAIN_MEMORY_STAT_AVAILABLE" variable nil nil [303098 303134])
            ("VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON" variable nil nil [303135 303176])
            ("VIR_DOMAIN_MEMORY_STAT_RSS" variable nil nil [303177 303207])
            ("VIR_DOMAIN_MEMORY_STAT_USABLE" variable nil nil [303208 303241])
            ("VIR_DOMAIN_MEMORY_STAT_LAST_UPDATE" variable nil nil [303242 303280])
            ("VIR_DOMAIN_MEMORY_STAT_LAST" variable nil nil [303281 303313])
            ("VIR_DOMAIN_MEMORY_STAT_NR" variable nil nil [303314 303344])
            ("VIR_DOMAIN_METADATA_DESCRIPTION" variable nil nil [303370 303405])
            ("VIR_DOMAIN_METADATA_TITLE" variable nil nil [303406 303435])
            ("VIR_DOMAIN_METADATA_ELEMENT" variable nil nil [303436 303467])
            ("VIR_MIGRATE_LIVE" variable nil nil [303493 303513])
            ("VIR_MIGRATE_PEER2PEER" variable nil nil [303514 303539])
            ("VIR_MIGRATE_TUNNELLED" variable nil nil [303540 303565])
            ("VIR_MIGRATE_PERSIST_DEST" variable nil nil [303566 303594])
            ("VIR_MIGRATE_UNDEFINE_SOURCE" variable nil nil [303595 303627])
            ("VIR_MIGRATE_PAUSED" variable nil nil [303628 303651])
            ("VIR_MIGRATE_NON_SHARED_DISK" variable nil nil [303652 303684])
            ("VIR_MIGRATE_NON_SHARED_INC" variable nil nil [303685 303717])
            ("VIR_MIGRATE_CHANGE_PROTECTION" variable nil nil [303718 303753])
            ("VIR_MIGRATE_UNSAFE" variable nil nil [303754 303778])
            ("VIR_MIGRATE_OFFLINE" variable nil nil [303779 303805])
            ("VIR_MIGRATE_COMPRESSED" variable nil nil [303806 303835])
            ("VIR_MIGRATE_ABORT_ON_ERROR" variable nil nil [303836 303869])
            ("VIR_MIGRATE_AUTO_CONVERGE" variable nil nil [303870 303902])
            ("VIR_MIGRATE_RDMA_PIN_ALL" variable nil nil [303903 303935])
            ("VIR_MIGRATE_POSTCOPY" variable nil nil [303936 303964])
            ("VIR_MIGRATE_TLS" variable nil nil [303965 303988])
            ("VIR_DOMAIN_AFFECT_CURRENT" variable nil nil [304020 304049])
            ("VIR_DOMAIN_AFFECT_LIVE" variable nil nil [304050 304076])
            ("VIR_DOMAIN_AFFECT_CONFIG" variable nil nil [304077 304105])
            ("VIR_DOMAIN_NOSTATE_UNKNOWN" variable nil nil [304132 304162])
            ("VIR_DOMAIN_NUMATUNE_MEM_STRICT" variable nil nil [304191 304225])
            ("VIR_DOMAIN_NUMATUNE_MEM_PREFERRED" variable nil nil [304226 304263])
            ("VIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE" variable nil nil [304264 304302])
            ("VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH" variable nil nil [304333 304370])
            ("VIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN" variable nil nil [304405 304444])
            ("VIR_DOMAIN_PMSUSPENDED_UNKNOWN" variable nil nil [304475 304509])
            ("VIR_DOMAIN_PAUSED_UNKNOWN" variable nil nil [304535 304564])
            ("VIR_DOMAIN_PAUSED_USER" variable nil nil [304565 304591])
            ("VIR_DOMAIN_PAUSED_MIGRATION" variable nil nil [304592 304623])
            ("VIR_DOMAIN_PAUSED_SAVE" variable nil nil [304624 304650])
            ("VIR_DOMAIN_PAUSED_DUMP" variable nil nil [304651 304677])
            ("VIR_DOMAIN_PAUSED_IOERROR" variable nil nil [304678 304707])
            ("VIR_DOMAIN_PAUSED_WATCHDOG" variable nil nil [304708 304738])
            ("VIR_DOMAIN_PAUSED_FROM_SNAPSHOT" variable nil nil [304739 304774])
            ("VIR_DOMAIN_PAUSED_SHUTTING_DOWN" variable nil nil [304775 304810])
            ("VIR_DOMAIN_PAUSED_SNAPSHOT" variable nil nil [304811 304841])
            ("VIR_DOMAIN_PAUSED_CRASHED" variable nil nil [304842 304872])
            ("VIR_DOMAIN_PAUSED_STARTING_UP" variable nil nil [304873 304907])
            ("VIR_DOMAIN_PAUSED_POSTCOPY" variable nil nil [304908 304939])
            ("VIR_DOMAIN_PAUSED_POSTCOPY_FAILED" variable nil nil [304940 304978])
            ("VIR_DOMAIN_PROCESS_SIGNAL_NOP" variable nil nil [305005 305038])
            ("VIR_DOMAIN_PROCESS_SIGNAL_HUP" variable nil nil [305039 305072])
            ("VIR_DOMAIN_PROCESS_SIGNAL_INT" variable nil nil [305073 305106])
            ("VIR_DOMAIN_PROCESS_SIGNAL_QUIT" variable nil nil [305107 305141])
            ("VIR_DOMAIN_PROCESS_SIGNAL_ILL" variable nil nil [305142 305175])
            ("VIR_DOMAIN_PROCESS_SIGNAL_TRAP" variable nil nil [305176 305210])
            ("VIR_DOMAIN_PROCESS_SIGNAL_ABRT" variable nil nil [305211 305245])
            ("VIR_DOMAIN_PROCESS_SIGNAL_BUS" variable nil nil [305246 305279])
            ("VIR_DOMAIN_PROCESS_SIGNAL_FPE" variable nil nil [305280 305313])
            ("VIR_DOMAIN_PROCESS_SIGNAL_KILL" variable nil nil [305314 305348])
            ("VIR_DOMAIN_PROCESS_SIGNAL_USR1" variable nil nil [305349 305384])
            ("VIR_DOMAIN_PROCESS_SIGNAL_SEGV" variable nil nil [305385 305420])
            ("VIR_DOMAIN_PROCESS_SIGNAL_USR2" variable nil nil [305421 305456])
            ("VIR_DOMAIN_PROCESS_SIGNAL_PIPE" variable nil nil [305457 305492])
            ("VIR_DOMAIN_PROCESS_SIGNAL_ALRM" variable nil nil [305493 305528])
            ("VIR_DOMAIN_PROCESS_SIGNAL_TERM" variable nil nil [305529 305564])
            ("VIR_DOMAIN_PROCESS_SIGNAL_STKFLT" variable nil nil [305565 305602])
            ("VIR_DOMAIN_PROCESS_SIGNAL_CHLD" variable nil nil [305603 305638])
            ("VIR_DOMAIN_PROCESS_SIGNAL_CONT" variable nil nil [305639 305674])
            ("VIR_DOMAIN_PROCESS_SIGNAL_STOP" variable nil nil [305675 305710])
            ("VIR_DOMAIN_PROCESS_SIGNAL_TSTP" variable nil nil [305711 305746])
            ("VIR_DOMAIN_PROCESS_SIGNAL_TTIN" variable nil nil [305747 305782])
            ("VIR_DOMAIN_PROCESS_SIGNAL_TTOU" variable nil nil [305783 305818])
            ("VIR_DOMAIN_PROCESS_SIGNAL_URG" variable nil nil [305819 305853])
            ("VIR_DOMAIN_PROCESS_SIGNAL_XCPU" variable nil nil [305854 305889])
            ("VIR_DOMAIN_PROCESS_SIGNAL_XFSZ" variable nil nil [305890 305925])
            ("VIR_DOMAIN_PROCESS_SIGNAL_VTALRM" variable nil nil [305926 305963])
            ("VIR_DOMAIN_PROCESS_SIGNAL_PROF" variable nil nil [305964 305999])
            ("VIR_DOMAIN_PROCESS_SIGNAL_WINCH" variable nil nil [306000 306036])
            ("VIR_DOMAIN_PROCESS_SIGNAL_POLL" variable nil nil [306037 306072])
            ("VIR_DOMAIN_PROCESS_SIGNAL_PWR" variable nil nil [306073 306107])
            ("VIR_DOMAIN_PROCESS_SIGNAL_SYS" variable nil nil [306108 306142])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT0" variable nil nil [306143 306177])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT1" variable nil nil [306178 306212])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT2" variable nil nil [306213 306247])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT3" variable nil nil [306248 306282])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT4" variable nil nil [306283 306317])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT5" variable nil nil [306318 306352])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT6" variable nil nil [306353 306387])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT7" variable nil nil [306388 306422])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT8" variable nil nil [306423 306457])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT9" variable nil nil [306458 306492])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT10" variable nil nil [306493 306528])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT11" variable nil nil [306529 306564])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT12" variable nil nil [306565 306600])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT13" variable nil nil [306601 306636])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT14" variable nil nil [306637 306672])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT15" variable nil nil [306673 306708])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT16" variable nil nil [306709 306744])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT17" variable nil nil [306745 306780])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT18" variable nil nil [306781 306816])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT19" variable nil nil [306817 306852])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT20" variable nil nil [306853 306888])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT21" variable nil nil [306889 306924])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT22" variable nil nil [306925 306960])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT23" variable nil nil [306961 306996])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT24" variable nil nil [306997 307032])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT25" variable nil nil [307033 307068])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT26" variable nil nil [307069 307104])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT27" variable nil nil [307105 307140])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT28" variable nil nil [307141 307176])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT29" variable nil nil [307177 307212])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT30" variable nil nil [307213 307248])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT31" variable nil nil [307249 307284])
            ("VIR_DOMAIN_PROCESS_SIGNAL_RT32" variable nil nil [307285 307320])
            ("VIR_DOMAIN_REBOOT_DEFAULT" variable nil nil [307350 307379])
            ("VIR_DOMAIN_REBOOT_ACPI_POWER_BTN" variable nil nil [307380 307416])
            ("VIR_DOMAIN_REBOOT_GUEST_AGENT" variable nil nil [307417 307450])
            ("VIR_DOMAIN_REBOOT_INITCTL" variable nil nil [307451 307480])
            ("VIR_DOMAIN_REBOOT_SIGNAL" variable nil nil [307481 307509])
            ("VIR_DOMAIN_REBOOT_PARAVIRT" variable nil nil [307510 307541])
            ("VIR_DOMAIN_RUNNING_UNKNOWN" variable nil nil [307568 307598])
            ("VIR_DOMAIN_RUNNING_BOOTED" variable nil nil [307599 307628])
            ("VIR_DOMAIN_RUNNING_MIGRATED" variable nil nil [307629 307660])
            ("VIR_DOMAIN_RUNNING_RESTORED" variable nil nil [307661 307692])
            ("VIR_DOMAIN_RUNNING_FROM_SNAPSHOT" variable nil nil [307693 307729])
            ("VIR_DOMAIN_RUNNING_UNPAUSED" variable nil nil [307730 307761])
            ("VIR_DOMAIN_RUNNING_MIGRATION_CANCELED" variable nil nil [307762 307803])
            ("VIR_DOMAIN_RUNNING_SAVE_CANCELED" variable nil nil [307804 307840])
            ("VIR_DOMAIN_RUNNING_WAKEUP" variable nil nil [307841 307870])
            ("VIR_DOMAIN_RUNNING_CRASHED" variable nil nil [307871 307901])
            ("VIR_DOMAIN_RUNNING_POSTCOPY" variable nil nil [307902 307934])
            ("VIR_DOMAIN_SAVE_BYPASS_CACHE" variable nil nil [307964 307996])
            ("VIR_DOMAIN_SAVE_RUNNING" variable nil nil [307997 308024])
            ("VIR_DOMAIN_SAVE_PAUSED" variable nil nil [308025 308051])
            ("VIR_DOMAIN_TIME_SYNC" variable nil nil [308077 308101])
            ("VIR_DOMAIN_PASSWORD_ENCRYPTED" variable nil nil [308135 308168])
            ("VIR_DOMAIN_SHUTDOWN_DEFAULT" variable nil nil [308200 308231])
            ("VIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN" variable nil nil [308232 308270])
            ("VIR_DOMAIN_SHUTDOWN_GUEST_AGENT" variable nil nil [308271 308306])
            ("VIR_DOMAIN_SHUTDOWN_INITCTL" variable nil nil [308307 308338])
            ("VIR_DOMAIN_SHUTDOWN_SIGNAL" variable nil nil [308339 308369])
            ("VIR_DOMAIN_SHUTDOWN_PARAVIRT" variable nil nil [308370 308403])
            ("VIR_DOMAIN_SHUTDOWN_UNKNOWN" variable nil nil [308431 308462])
            ("VIR_DOMAIN_SHUTDOWN_USER" variable nil nil [308463 308491])
            ("VIR_DOMAIN_SHUTOFF_UNKNOWN" variable nil nil [308518 308548])
            ("VIR_DOMAIN_SHUTOFF_SHUTDOWN" variable nil nil [308549 308580])
            ("VIR_DOMAIN_SHUTOFF_DESTROYED" variable nil nil [308581 308613])
            ("VIR_DOMAIN_SHUTOFF_CRASHED" variable nil nil [308614 308644])
            ("VIR_DOMAIN_SHUTOFF_MIGRATED" variable nil nil [308645 308676])
            ("VIR_DOMAIN_SHUTOFF_SAVED" variable nil nil [308677 308705])
            ("VIR_DOMAIN_SHUTOFF_FAILED" variable nil nil [308706 308735])
            ("VIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT" variable nil nil [308736 308772])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE" variable nil nil [308805 308844])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT" variable nil nil [308845 308883])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA" variable nil nil [308884 308926])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_HALT" variable nil nil [308927 308962])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY" variable nil nil [308963 309004])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT" variable nil nil [309005 309046])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE" variable nil nil [309047 309086])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC" variable nil nil [309087 309126])
            ("VIR_DOMAIN_SNAPSHOT_CREATE_LIVE" variable nil nil [309127 309164])
            ("VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN" variable nil nil [309197 309236])
            ("VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY" variable nil nil [309237 309281])
            ("VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY" variable nil nil [309282 309326])
            ("VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS" variable nil nil [309357 309397])
            ("VIR_DOMAIN_SNAPSHOT_LIST_ROOTS" variable nil nil [309398 309432])
            ("VIR_DOMAIN_SNAPSHOT_LIST_METADATA" variable nil nil [309433 309470])
            ("VIR_DOMAIN_SNAPSHOT_LIST_LEAVES" variable nil nil [309471 309506])
            ("VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES" variable nil nil [309507 309545])
            ("VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA" variable nil nil [309546 309587])
            ("VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE" variable nil nil [309588 309626])
            ("VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE" variable nil nil [309627 309663])
            ("VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY" variable nil nil [309664 309704])
            ("VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL" variable nil nil [309705 309744])
            ("VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL" variable nil nil [309745 309784])
            ("VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING" variable nil nil [309817 309855])
            ("VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED" variable nil nil [309856 309893])
            ("VIR_DOMAIN_SNAPSHOT_REVERT_FORCE" variable nil nil [309894 309930])
            ("VIR_DOMAIN_NOSTATE" variable nil nil [309949 309971])
            ("VIR_DOMAIN_RUNNING" variable nil nil [309972 309994])
            ("VIR_DOMAIN_BLOCKED" variable nil nil [309995 310017])
            ("VIR_DOMAIN_PAUSED" variable nil nil [310018 310039])
            ("VIR_DOMAIN_SHUTDOWN" variable nil nil [310040 310063])
            ("VIR_DOMAIN_SHUTOFF" variable nil nil [310064 310086])
            ("VIR_DOMAIN_CRASHED" variable nil nil [310087 310109])
            ("VIR_DOMAIN_PMSUSPENDED" variable nil nil [310110 310136])
            ("VIR_DOMAIN_STATS_STATE" variable nil nil [310160 310186])
            ("VIR_DOMAIN_STATS_CPU_TOTAL" variable nil nil [310187 310217])
            ("VIR_DOMAIN_STATS_BALLOON" variable nil nil [310218 310246])
            ("VIR_DOMAIN_STATS_VCPU" variable nil nil [310247 310272])
            ("VIR_DOMAIN_STATS_INTERFACE" variable nil nil [310273 310304])
            ("VIR_DOMAIN_STATS_BLOCK" variable nil nil [310305 310332])
            ("VIR_DOMAIN_STATS_PERF" variable nil nil [310333 310359])
            ("VIR_DOMAIN_UNDEFINE_MANAGED_SAVE" variable nil nil [310392 310428])
            ("VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA" variable nil nil [310429 310471])
            ("VIR_DOMAIN_UNDEFINE_NVRAM" variable nil nil [310472 310501])
            ("VIR_DOMAIN_UNDEFINE_KEEP_NVRAM" variable nil nil [310502 310536])
            ("VIR_DOMAIN_VCPU_CURRENT" variable nil nil [310559 310586])
            ("VIR_DOMAIN_VCPU_LIVE" variable nil nil [310587 310611])
            ("VIR_DOMAIN_VCPU_CONFIG" variable nil nil [310612 310638])
            ("VIR_DOMAIN_VCPU_MAXIMUM" variable nil nil [310639 310666])
            ("VIR_DOMAIN_VCPU_GUEST" variable nil nil [310667 310692])
            ("VIR_DOMAIN_VCPU_HOTPLUGGABLE" variable nil nil [310693 310726])
            ("VIR_DOMAIN_XML_SECURE" variable nil nil [310748 310773])
            ("VIR_DOMAIN_XML_INACTIVE" variable nil nil [310774 310801])
            ("VIR_DOMAIN_XML_UPDATE_CPU" variable nil nil [310802 310831])
            ("VIR_DOMAIN_XML_MIGRATABLE" variable nil nil [310832 310861])
            ("VIR_FROM_NONE" variable nil nil [310880 310897])
            ("VIR_FROM_XEN" variable nil nil [310898 310914])
            ("VIR_FROM_XEND" variable nil nil [310915 310932])
            ("VIR_FROM_XENSTORE" variable nil nil [310933 310954])
            ("VIR_FROM_SEXPR" variable nil nil [310955 310973])
            ("VIR_FROM_XML" variable nil nil [310974 310990])
            ("VIR_FROM_DOM" variable nil nil [310991 311007])
            ("VIR_FROM_RPC" variable nil nil [311008 311024])
            ("VIR_FROM_PROXY" variable nil nil [311025 311043])
            ("VIR_FROM_CONF" variable nil nil [311044 311061])
            ("VIR_FROM_QEMU" variable nil nil [311062 311080])
            ("VIR_FROM_NET" variable nil nil [311081 311098])
            ("VIR_FROM_TEST" variable nil nil [311099 311117])
            ("VIR_FROM_REMOTE" variable nil nil [311118 311138])
            ("VIR_FROM_OPENVZ" variable nil nil [311139 311159])
            ("VIR_FROM_XENXM" variable nil nil [311160 311179])
            ("VIR_FROM_STATS_LINUX" variable nil nil [311180 311205])
            ("VIR_FROM_LXC" variable nil nil [311206 311223])
            ("VIR_FROM_STORAGE" variable nil nil [311224 311245])
            ("VIR_FROM_NETWORK" variable nil nil [311246 311267])
            ("VIR_FROM_DOMAIN" variable nil nil [311268 311288])
            ("VIR_FROM_UML" variable nil nil [311289 311306])
            ("VIR_FROM_NODEDEV" variable nil nil [311307 311328])
            ("VIR_FROM_XEN_INOTIFY" variable nil nil [311329 311354])
            ("VIR_FROM_SECURITY" variable nil nil [311355 311377])
            ("VIR_FROM_VBOX" variable nil nil [311378 311396])
            ("VIR_FROM_INTERFACE" variable nil nil [311397 311420])
            ("VIR_FROM_ONE" variable nil nil [311421 311438])
            ("VIR_FROM_ESX" variable nil nil [311439 311456])
            ("VIR_FROM_PHYP" variable nil nil [311457 311475])
            ("VIR_FROM_SECRET" variable nil nil [311476 311496])
            ("VIR_FROM_CPU" variable nil nil [311497 311514])
            ("VIR_FROM_XENAPI" variable nil nil [311515 311535])
            ("VIR_FROM_NWFILTER" variable nil nil [311536 311558])
            ("VIR_FROM_HOOK" variable nil nil [311559 311577])
            ("VIR_FROM_DOMAIN_SNAPSHOT" variable nil nil [311578 311607])
            ("VIR_FROM_AUDIT" variable nil nil [311608 311627])
            ("VIR_FROM_SYSINFO" variable nil nil [311628 311649])
            ("VIR_FROM_STREAMS" variable nil nil [311650 311671])
            ("VIR_FROM_VMWARE" variable nil nil [311672 311692])
            ("VIR_FROM_EVENT" variable nil nil [311693 311712])
            ("VIR_FROM_LIBXL" variable nil nil [311713 311732])
            ("VIR_FROM_LOCKING" variable nil nil [311733 311754])
            ("VIR_FROM_HYPERV" variable nil nil [311755 311775])
            ("VIR_FROM_CAPABILITIES" variable nil nil [311776 311802])
            ("VIR_FROM_URI" variable nil nil [311803 311820])
            ("VIR_FROM_AUTH" variable nil nil [311821 311839])
            ("VIR_FROM_DBUS" variable nil nil [311840 311858])
            ("VIR_FROM_PARALLELS" variable nil nil [311859 311882])
            ("VIR_FROM_DEVICE" variable nil nil [311883 311903])
            ("VIR_FROM_SSH" variable nil nil [311904 311921])
            ("VIR_FROM_LOCKSPACE" variable nil nil [311922 311945])
            ("VIR_FROM_INITCTL" variable nil nil [311946 311967])
            ("VIR_FROM_IDENTITY" variable nil nil [311968 311990])
            ("VIR_FROM_CGROUP" variable nil nil [311991 312011])
            ("VIR_FROM_ACCESS" variable nil nil [312012 312032])
            ("VIR_FROM_SYSTEMD" variable nil nil [312033 312054])
            ("VIR_FROM_BHYVE" variable nil nil [312055 312074])
            ("VIR_FROM_CRYPTO" variable nil nil [312075 312095])
            ("VIR_FROM_FIREWALL" variable nil nil [312096 312118])
            ("VIR_FROM_POLKIT" variable nil nil [312119 312139])
            ("VIR_FROM_THREAD" variable nil nil [312140 312160])
            ("VIR_FROM_ADMIN" variable nil nil [312161 312180])
            ("VIR_FROM_LOGGING" variable nil nil [312181 312202])
            ("VIR_FROM_XENXL" variable nil nil [312203 312222])
            ("VIR_FROM_PERF" variable nil nil [312223 312241])
            ("VIR_FROM_LIBSSH" variable nil nil [312242 312262])
            ("VIR_FROM_RESCTRL" variable nil nil [312263 312284])
            ("VIR_ERR_NONE" variable nil nil [312302 312318])
            ("VIR_ERR_WARNING" variable nil nil [312319 312338])
            ("VIR_ERR_ERROR" variable nil nil [312339 312356])
            ("VIR_ERR_OK" variable nil nil [312375 312389])
            ("VIR_ERR_INTERNAL_ERROR" variable nil nil [312390 312416])
            ("VIR_ERR_NO_MEMORY" variable nil nil [312417 312438])
            ("VIR_ERR_NO_SUPPORT" variable nil nil [312439 312461])
            ("VIR_ERR_UNKNOWN_HOST" variable nil nil [312462 312486])
            ("VIR_ERR_NO_CONNECT" variable nil nil [312487 312509])
            ("VIR_ERR_INVALID_CONN" variable nil nil [312510 312534])
            ("VIR_ERR_INVALID_DOMAIN" variable nil nil [312535 312561])
            ("VIR_ERR_INVALID_ARG" variable nil nil [312562 312585])
            ("VIR_ERR_OPERATION_FAILED" variable nil nil [312586 312614])
            ("VIR_ERR_GET_FAILED" variable nil nil [312615 312638])
            ("VIR_ERR_POST_FAILED" variable nil nil [312639 312663])
            ("VIR_ERR_HTTP_ERROR" variable nil nil [312664 312687])
            ("VIR_ERR_SEXPR_SERIAL" variable nil nil [312688 312713])
            ("VIR_ERR_NO_XEN" variable nil nil [312714 312733])
            ("VIR_ERR_XEN_CALL" variable nil nil [312734 312755])
            ("VIR_ERR_OS_TYPE" variable nil nil [312756 312776])
            ("VIR_ERR_NO_KERNEL" variable nil nil [312777 312799])
            ("VIR_ERR_NO_ROOT" variable nil nil [312800 312820])
            ("VIR_ERR_NO_SOURCE" variable nil nil [312821 312843])
            ("VIR_ERR_NO_TARGET" variable nil nil [312844 312866])
            ("VIR_ERR_NO_NAME" variable nil nil [312867 312887])
            ("VIR_ERR_NO_OS" variable nil nil [312888 312906])
            ("VIR_ERR_NO_DEVICE" variable nil nil [312907 312929])
            ("VIR_ERR_NO_XENSTORE" variable nil nil [312930 312954])
            ("VIR_ERR_DRIVER_FULL" variable nil nil [312955 312979])
            ("VIR_ERR_CALL_FAILED" variable nil nil [312980 313004])
            ("VIR_ERR_XML_ERROR" variable nil nil [313005 313027])
            ("VIR_ERR_DOM_EXIST" variable nil nil [313028 313050])
            ("VIR_ERR_OPERATION_DENIED" variable nil nil [313051 313080])
            ("VIR_ERR_OPEN_FAILED" variable nil nil [313081 313105])
            ("VIR_ERR_READ_FAILED" variable nil nil [313106 313130])
            ("VIR_ERR_PARSE_FAILED" variable nil nil [313131 313156])
            ("VIR_ERR_CONF_SYNTAX" variable nil nil [313157 313181])
            ("VIR_ERR_WRITE_FAILED" variable nil nil [313182 313207])
            ("VIR_ERR_XML_DETAIL" variable nil nil [313208 313231])
            ("VIR_ERR_INVALID_NETWORK" variable nil nil [313232 313260])
            ("VIR_ERR_NETWORK_EXIST" variable nil nil [313261 313287])
            ("VIR_ERR_SYSTEM_ERROR" variable nil nil [313288 313313])
            ("VIR_ERR_RPC" variable nil nil [313314 313330])
            ("VIR_ERR_GNUTLS_ERROR" variable nil nil [313331 313356])
            ("VIR_WAR_NO_NETWORK" variable nil nil [313357 313380])
            ("VIR_ERR_NO_DOMAIN" variable nil nil [313381 313403])
            ("VIR_ERR_NO_NETWORK" variable nil nil [313404 313427])
            ("VIR_ERR_INVALID_MAC" variable nil nil [313428 313452])
            ("VIR_ERR_AUTH_FAILED" variable nil nil [313453 313477])
            ("VIR_ERR_INVALID_STORAGE_POOL" variable nil nil [313478 313511])
            ("VIR_ERR_INVALID_STORAGE_VOL" variable nil nil [313512 313544])
            ("VIR_WAR_NO_STORAGE" variable nil nil [313545 313568])
            ("VIR_ERR_NO_STORAGE_POOL" variable nil nil [313569 313597])
            ("VIR_ERR_NO_STORAGE_VOL" variable nil nil [313598 313625])
            ("VIR_WAR_NO_NODE" variable nil nil [313626 313646])
            ("VIR_ERR_INVALID_NODE_DEVICE" variable nil nil [313647 313679])
            ("VIR_ERR_NO_NODE_DEVICE" variable nil nil [313680 313707])
            ("VIR_ERR_NO_SECURITY_MODEL" variable nil nil [313708 313738])
            ("VIR_ERR_OPERATION_INVALID" variable nil nil [313739 313769])
            ("VIR_WAR_NO_INTERFACE" variable nil nil [313770 313795])
            ("VIR_ERR_NO_INTERFACE" variable nil nil [313796 313821])
            ("VIR_ERR_INVALID_INTERFACE" variable nil nil [313822 313852])
            ("VIR_ERR_MULTIPLE_INTERFACES" variable nil nil [313853 313885])
            ("VIR_WAR_NO_NWFILTER" variable nil nil [313886 313910])
            ("VIR_ERR_INVALID_NWFILTER" variable nil nil [313911 313940])
            ("VIR_ERR_NO_NWFILTER" variable nil nil [313941 313965])
            ("VIR_ERR_BUILD_FIREWALL" variable nil nil [313966 313993])
            ("VIR_WAR_NO_SECRET" variable nil nil [313994 314016])
            ("VIR_ERR_INVALID_SECRET" variable nil nil [314017 314044])
            ("VIR_ERR_NO_SECRET" variable nil nil [314045 314067])
            ("VIR_ERR_CONFIG_UNSUPPORTED" variable nil nil [314068 314099])
            ("VIR_ERR_OPERATION_TIMEOUT" variable nil nil [314100 314130])
            ("VIR_ERR_MIGRATE_PERSIST_FAILED" variable nil nil [314131 314166])
            ("VIR_ERR_HOOK_SCRIPT_FAILED" variable nil nil [314167 314198])
            ("VIR_ERR_INVALID_DOMAIN_SNAPSHOT" variable nil nil [314199 314235])
            ("VIR_ERR_NO_DOMAIN_SNAPSHOT" variable nil nil [314236 314267])
            ("VIR_ERR_INVALID_STREAM" variable nil nil [314268 314295])
            ("VIR_ERR_ARGUMENT_UNSUPPORTED" variable nil nil [314296 314329])
            ("VIR_ERR_STORAGE_PROBE_FAILED" variable nil nil [314330 314363])
            ("VIR_ERR_STORAGE_POOL_BUILT" variable nil nil [314364 314395])
            ("VIR_ERR_SNAPSHOT_REVERT_RISKY" variable nil nil [314396 314430])
            ("VIR_ERR_OPERATION_ABORTED" variable nil nil [314431 314461])
            ("VIR_ERR_AUTH_CANCELLED" variable nil nil [314462 314489])
            ("VIR_ERR_NO_DOMAIN_METADATA" variable nil nil [314490 314521])
            ("VIR_ERR_MIGRATE_UNSAFE" variable nil nil [314522 314549])
            ("VIR_ERR_OVERFLOW" variable nil nil [314550 314571])
            ("VIR_ERR_BLOCK_COPY_ACTIVE" variable nil nil [314572 314602])
            ("VIR_ERR_OPERATION_UNSUPPORTED" variable nil nil [314603 314637])
            ("VIR_ERR_SSH" variable nil nil [314638 314654])
            ("VIR_ERR_AGENT_UNRESPONSIVE" variable nil nil [314655 314686])
            ("VIR_ERR_RESOURCE_BUSY" variable nil nil [314687 314713])
            ("VIR_ERR_ACCESS_DENIED" variable nil nil [314714 314740])
            ("VIR_ERR_DBUS_SERVICE" variable nil nil [314741 314766])
            ("VIR_ERR_STORAGE_VOL_EXIST" variable nil nil [314767 314797])
            ("VIR_ERR_CPU_INCOMPATIBLE" variable nil nil [314798 314827])
            ("VIR_ERR_XML_INVALID_SCHEMA" variable nil nil [314828 314859])
            ("VIR_ERR_MIGRATE_FINISH_OK" variable nil nil [314860 314890])
            ("VIR_ERR_AUTH_UNAVAILABLE" variable nil nil [314891 314920])
            ("VIR_ERR_NO_SERVER" variable nil nil [314921 314943])
            ("VIR_ERR_NO_CLIENT" variable nil nil [314944 314966])
            ("VIR_ERR_AGENT_UNSYNCED" variable nil nil [314967 314994])
            ("VIR_ERR_LIBSSH" variable nil nil [314995 315014])
            ("VIR_ERR_DEVICE_MISSING" variable nil nil [315015 315042])
            ("VIR_ERR_INVALID_NWFILTER_BINDING" variable nil nil [315043 315081])
            ("VIR_ERR_NO_NWFILTER_BINDING" variable nil nil [315082 315115])
            ("VIR_EVENT_HANDLE_READABLE" variable nil nil [315138 315167])
            ("VIR_EVENT_HANDLE_WRITABLE" variable nil nil [315168 315197])
            ("VIR_EVENT_HANDLE_ERROR" variable nil nil [315198 315224])
            ("VIR_EVENT_HANDLE_HANGUP" variable nil nil [315225 315252])
            ("VIR_IP_ADDR_TYPE_IPV4" variable nil nil [315270 315295])
            ("VIR_IP_ADDR_TYPE_IPV6" variable nil nil [315296 315321])
            ("VIR_INTERFACE_XML_INACTIVE" variable nil nil [315346 315376])
            ("VIR_KEYCODE_SET_LINUX" variable nil nil [315394 315419])
            ("VIR_KEYCODE_SET_XT" variable nil nil [315420 315442])
            ("VIR_KEYCODE_SET_ATSET1" variable nil nil [315443 315469])
            ("VIR_KEYCODE_SET_ATSET2" variable nil nil [315470 315496])
            ("VIR_KEYCODE_SET_ATSET3" variable nil nil [315497 315523])
            ("VIR_KEYCODE_SET_OSX" variable nil nil [315524 315547])
            ("VIR_KEYCODE_SET_XT_KBD" variable nil nil [315548 315574])
            ("VIR_KEYCODE_SET_USB" variable nil nil [315575 315598])
            ("VIR_KEYCODE_SET_WIN32" variable nil nil [315599 315624])
            ("VIR_KEYCODE_SET_QNUM" variable nil nil [315625 315649])
            ("VIR_DOMAIN_MEMORY_PARAM_INT" variable nil nil [315676 315707])
            ("VIR_DOMAIN_MEMORY_PARAM_UINT" variable nil nil [315708 315740])
            ("VIR_DOMAIN_MEMORY_PARAM_LLONG" variable nil nil [315741 315774])
            ("VIR_DOMAIN_MEMORY_PARAM_ULLONG" variable nil nil [315775 315809])
            ("VIR_DOMAIN_MEMORY_PARAM_DOUBLE" variable nil nil [315810 315844])
            ("VIR_DOMAIN_MEMORY_PARAM_BOOLEAN" variable nil nil [315845 315880])
            ("VIR_NETWORK_EVENT_ID_LIFECYCLE" variable nil nil [315902 315936])
            ("VIR_NETWORK_EVENT_DEFINED" variable nil nil [315969 315998])
            ("VIR_NETWORK_EVENT_UNDEFINED" variable nil nil [315999 316030])
            ("VIR_NETWORK_EVENT_STARTED" variable nil nil [316031 316060])
            ("VIR_NETWORK_EVENT_STOPPED" variable nil nil [316061 316090])
            ("VIR_NETWORK_UPDATE_COMMAND_NONE" variable nil nil [316118 316153])
            ("VIR_NETWORK_UPDATE_COMMAND_MODIFY" variable nil nil [316154 316191])
            ("VIR_NETWORK_UPDATE_COMMAND_DELETE" variable nil nil [316192 316229])
            ("VIR_NETWORK_UPDATE_COMMAND_ADD_LAST" variable nil nil [316230 316269])
            ("VIR_NETWORK_UPDATE_COMMAND_ADD_FIRST" variable nil nil [316270 316310])
            ("VIR_NETWORK_UPDATE_AFFECT_CURRENT" variable nil nil [316336 316373])
            ("VIR_NETWORK_UPDATE_AFFECT_LIVE" variable nil nil [316374 316408])
            ("VIR_NETWORK_UPDATE_AFFECT_CONFIG" variable nil nil [316409 316445])
            ("VIR_NETWORK_SECTION_NONE" variable nil nil [316473 316501])
            ("VIR_NETWORK_SECTION_BRIDGE" variable nil nil [316502 316532])
            ("VIR_NETWORK_SECTION_DOMAIN" variable nil nil [316533 316563])
            ("VIR_NETWORK_SECTION_IP" variable nil nil [316564 316590])
            ("VIR_NETWORK_SECTION_IP_DHCP_HOST" variable nil nil [316591 316627])
            ("VIR_NETWORK_SECTION_IP_DHCP_RANGE" variable nil nil [316628 316665])
            ("VIR_NETWORK_SECTION_FORWARD" variable nil nil [316666 316697])
            ("VIR_NETWORK_SECTION_FORWARD_INTERFACE" variable nil nil [316698 316739])
            ("VIR_NETWORK_SECTION_FORWARD_PF" variable nil nil [316740 316774])
            ("VIR_NETWORK_SECTION_PORTGROUP" variable nil nil [316775 316808])
            ("VIR_NETWORK_SECTION_DNS_HOST" variable nil nil [316809 316842])
            ("VIR_NETWORK_SECTION_DNS_TXT" variable nil nil [316843 316875])
            ("VIR_NETWORK_SECTION_DNS_SRV" variable nil nil [316876 316908])
            ("VIR_NETWORK_XML_INACTIVE" variable nil nil [316931 316959])
            ("VIR_NODE_ALLOC_PAGES_ADD" variable nil nil [316986 317014])
            ("VIR_NODE_ALLOC_PAGES_SET" variable nil nil [317015 317043])
            ("VIR_NODE_DEVICE_EVENT_ID_LIFECYCLE" variable nil nil [317068 317106])
            ("VIR_NODE_DEVICE_EVENT_ID_UPDATE" variable nil nil [317107 317142])
            ("VIR_NODE_DEVICE_EVENT_CREATED" variable nil nil [317178 317211])
            ("VIR_NODE_DEVICE_EVENT_DELETED" variable nil nil [317212 317245])
            ("VIR_NODE_CPU_STATS_ALL_CPUS" code nil nil [317275 317307])
            ("VIR_NODE_MEMORY_STATS_ALL_CELLS" code nil nil [317341 317377])
            ("VIR_NODE_SUSPEND_TARGET_MEM" variable nil nil [317402 317433])
            ("VIR_NODE_SUSPEND_TARGET_DISK" variable nil nil [317434 317466])
            ("VIR_NODE_SUSPEND_TARGET_HYBRID" variable nil nil [317467 317501])
            ("VIR_DOMAIN_SCHED_FIELD_INT" variable nil nil [317527 317557])
            ("VIR_DOMAIN_SCHED_FIELD_UINT" variable nil nil [317558 317589])
            ("VIR_DOMAIN_SCHED_FIELD_LLONG" variable nil nil [317590 317622])
            ("VIR_DOMAIN_SCHED_FIELD_ULLONG" variable nil nil [317623 317656])
            ("VIR_DOMAIN_SCHED_FIELD_DOUBLE" variable nil nil [317657 317690])
            ("VIR_DOMAIN_SCHED_FIELD_BOOLEAN" variable nil nil [317691 317725])
            ("VIR_SECRET_EVENT_ID_LIFECYCLE" variable nil nil [317746 317779])
            ("VIR_SECRET_EVENT_ID_VALUE_CHANGED" variable nil nil [317780 317817])
            ("VIR_SECRET_EVENT_DEFINED" variable nil nil [317849 317877])
            ("VIR_SECRET_EVENT_UNDEFINED" variable nil nil [317878 317908])
            ("VIR_SECRET_USAGE_TYPE_NONE" variable nil nil [317931 317961])
            ("VIR_SECRET_USAGE_TYPE_VOLUME" variable nil nil [317962 317994])
            ("VIR_SECRET_USAGE_TYPE_CEPH" variable nil nil [317995 318025])
            ("VIR_SECRET_USAGE_TYPE_ISCSI" variable nil nil [318026 318057])
            ("VIR_SECRET_USAGE_TYPE_TLS" variable nil nil [318058 318087])
            ("VIR_STORAGE_POOL_BUILD_NEW" variable nil nil [318116 318146])
            ("VIR_STORAGE_POOL_BUILD_REPAIR" variable nil nil [318147 318180])
            ("VIR_STORAGE_POOL_BUILD_RESIZE" variable nil nil [318181 318214])
            ("VIR_STORAGE_POOL_BUILD_NO_OVERWRITE" variable nil nil [318215 318254])
            ("VIR_STORAGE_POOL_BUILD_OVERWRITE" variable nil nil [318255 318291])
            ("VIR_STORAGE_POOL_CREATE_NORMAL" variable nil nil [318321 318355])
            ("VIR_STORAGE_POOL_CREATE_WITH_BUILD" variable nil nil [318356 318394])
            ("VIR_STORAGE_POOL_CREATE_WITH_BUILD_OVERWRITE" variable nil nil [318395 318443])
            ("VIR_STORAGE_POOL_CREATE_WITH_BUILD_NO_OVERWRITE" variable nil nil [318444 318495])
            ("VIR_STORAGE_POOL_DELETE_NORMAL" variable nil nil [318525 318559])
            ("VIR_STORAGE_POOL_DELETE_ZEROED" variable nil nil [318560 318594])
            ("VIR_STORAGE_POOL_EVENT_ID_LIFECYCLE" variable nil nil [318620 318659])
            ("VIR_STORAGE_POOL_EVENT_ID_REFRESH" variable nil nil [318660 318697])
            ("VIR_STORAGE_POOL_EVENT_DEFINED" variable nil nil [318734 318768])
            ("VIR_STORAGE_POOL_EVENT_UNDEFINED" variable nil nil [318769 318805])
            ("VIR_STORAGE_POOL_EVENT_STARTED" variable nil nil [318806 318840])
            ("VIR_STORAGE_POOL_EVENT_STOPPED" variable nil nil [318841 318875])
            ("VIR_STORAGE_POOL_EVENT_CREATED" variable nil nil [318876 318910])
            ("VIR_STORAGE_POOL_EVENT_DELETED" variable nil nil [318911 318945])
            ("VIR_STORAGE_POOL_INACTIVE" variable nil nil [318969 318998])
            ("VIR_STORAGE_POOL_BUILDING" variable nil nil [318999 319028])
            ("VIR_STORAGE_POOL_RUNNING" variable nil nil [319029 319057])
            ("VIR_STORAGE_POOL_DEGRADED" variable nil nil [319058 319087])
            ("VIR_STORAGE_POOL_INACCESSIBLE" variable nil nil [319088 319121])
            ("VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA" variable nil nil [319150 319194])
            ("VIR_STORAGE_VOL_CREATE_REFLINK" variable nil nil [319195 319229])
            ("VIR_STORAGE_VOL_DELETE_NORMAL" variable nil nil [319258 319291])
            ("VIR_STORAGE_VOL_DELETE_ZEROED" variable nil nil [319292 319325])
            ("VIR_STORAGE_VOL_DELETE_WITH_SNAPSHOTS" variable nil nil [319326 319367])
            ("VIR_STORAGE_VOL_DOWNLOAD_SPARSE_STREAM" variable nil nil [319398 319440])
            ("VIR_STORAGE_VOL_USE_ALLOCATION" variable nil nil [319467 319501])
            ("VIR_STORAGE_VOL_GET_PHYSICAL" variable nil nil [319502 319534])
            ("VIR_STORAGE_VOL_RESIZE_ALLOCATE" variable nil nil [319563 319598])
            ("VIR_STORAGE_VOL_RESIZE_DELTA" variable nil nil [319599 319631])
            ("VIR_STORAGE_VOL_RESIZE_SHRINK" variable nil nil [319632 319665])
            ("VIR_STORAGE_VOL_FILE" variable nil nil [319687 319711])
            ("VIR_STORAGE_VOL_BLOCK" variable nil nil [319712 319737])
            ("VIR_STORAGE_VOL_DIR" variable nil nil [319738 319761])
            ("VIR_STORAGE_VOL_NETWORK" variable nil nil [319762 319789])
            ("VIR_STORAGE_VOL_NETDIR" variable nil nil [319790 319816])
            ("VIR_STORAGE_VOL_PLOOP" variable nil nil [319817 319842])
            ("VIR_STORAGE_VOL_UPLOAD_SPARSE_STREAM" variable nil nil [319871 319911])
            ("VIR_STORAGE_VOL_WIPE_ALG_ZERO" variable nil nil [319942 319975])
            ("VIR_STORAGE_VOL_WIPE_ALG_NNSA" variable nil nil [319976 320009])
            ("VIR_STORAGE_VOL_WIPE_ALG_DOD" variable nil nil [320010 320042])
            ("VIR_STORAGE_VOL_WIPE_ALG_BSI" variable nil nil [320043 320075])
            ("VIR_STORAGE_VOL_WIPE_ALG_GUTMANN" variable nil nil [320076 320112])
            ("VIR_STORAGE_VOL_WIPE_ALG_SCHNEIER" variable nil nil [320113 320150])
            ("VIR_STORAGE_VOL_WIPE_ALG_PFITZNER7" variable nil nil [320151 320189])
            ("VIR_STORAGE_VOL_WIPE_ALG_PFITZNER33" variable nil nil [320190 320229])
            ("VIR_STORAGE_VOL_WIPE_ALG_RANDOM" variable nil nil [320230 320265])
            ("VIR_STORAGE_VOL_WIPE_ALG_TRIM" variable nil nil [320266 320299])
            ("VIR_STORAGE_XML_INACTIVE" variable nil nil [320322 320350])
            ("VIR_STREAM_EVENT_READABLE" variable nil nil [320373 320402])
            ("VIR_STREAM_EVENT_WRITABLE" variable nil nil [320403 320432])
            ("VIR_STREAM_EVENT_ERROR" variable nil nil [320433 320459])
            ("VIR_STREAM_EVENT_HANGUP" variable nil nil [320460 320487])
            ("VIR_STREAM_NONBLOCK" variable nil nil [320506 320529])
            ("VIR_STREAM_RECV_STOP_AT_HOLE" variable nil nil [320558 320590])
            ("VIR_TYPED_PARAM_STRING_OKAY" variable nil nil [320617 320648])
            ("VIR_TYPED_PARAM_INT" variable nil nil [320674 320697])
            ("VIR_TYPED_PARAM_UINT" variable nil nil [320698 320722])
            ("VIR_TYPED_PARAM_LLONG" variable nil nil [320723 320748])
            ("VIR_TYPED_PARAM_ULLONG" variable nil nil [320749 320775])
            ("VIR_TYPED_PARAM_DOUBLE" variable nil nil [320776 320802])
            ("VIR_TYPED_PARAM_BOOLEAN" variable nil nil [320803 320830])
            ("VIR_TYPED_PARAM_STRING" variable nil nil [320831 320857])
            ("VIR_VCPU_OFFLINE" variable nil nil [320874 320894])
            ("VIR_VCPU_RUNNING" variable nil nil [320895 320915])
            ("VIR_VCPU_BLOCKED" variable nil nil [320916 320936])
            ("VIR_DOMAIN_BANDWIDTH_IN_AVERAGE" variable nil nil [320962 321013])
            ("VIR_DOMAIN_BANDWIDTH_IN_BURST" variable nil nil [321014 321061])
            ("VIR_DOMAIN_BANDWIDTH_IN_FLOOR" variable nil nil [321062 321109])
            ("VIR_DOMAIN_BANDWIDTH_IN_PEAK" variable nil nil [321110 321155])
            ("VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE" variable nil nil [321156 321209])
            ("VIR_DOMAIN_BANDWIDTH_OUT_BURST" variable nil nil [321210 321259])
            ("VIR_DOMAIN_BANDWIDTH_OUT_PEAK" variable nil nil [321260 321307])
            ("VIR_DOMAIN_BLKIO_DEVICE_READ_BPS" variable nil nil [321308 321366])
            ("VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS" variable nil nil [321367 321425])
            ("VIR_DOMAIN_BLKIO_DEVICE_WEIGHT" variable nil nil [321426 321474])
            ("VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS" variable nil nil [321475 321535])
            ("VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS" variable nil nil [321536 321596])
            ("VIR_DOMAIN_BLKIO_WEIGHT" variable nil nil [321597 321631])
            ("VIR_DOMAIN_BLOCK_COPY_BANDWIDTH" variable nil nil [321632 321677])
            ("VIR_DOMAIN_BLOCK_COPY_BUF_SIZE" variable nil nil [321678 321721])
            ("VIR_DOMAIN_BLOCK_COPY_GRANULARITY" variable nil nil [321722 321771])
            ("VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME" variable nil nil [321772 321821])
            ("VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC" variable nil nil [321822 321879])
            ("VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX" variable nil nil [321880 321945])
            ("VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH" variable nil nil [321946 322025])
            ("VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC" variable nil nil [322026 322081])
            ("VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX" variable nil nil [322082 322145])
            ("VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH" variable nil nil [322146 322223])
            ("VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC" variable nil nil [322224 322279])
            ("VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC" variable nil nil [322280 322339])
            ("VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX" variable nil nil [322340 322407])
            ("VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH" variable nil nil [322408 322489])
            ("VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC" variable nil nil [322490 322547])
            ("VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX" variable nil nil [322548 322613])
            ("VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH" variable nil nil [322614 322693])
            ("VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC" variable nil nil [322694 322753])
            ("VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX" variable nil nil [322754 322821])
            ("VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH" variable nil nil [322822 322903])
            ("VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC" variable nil nil [322904 322961])
            ("VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX" variable nil nil [322962 323027])
            ("VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH" variable nil nil [323028 323107])
            ("VIR_DOMAIN_BLOCK_STATS_ERRS" variable nil nil [323108 323144])
            ("VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ" variable nil nil [323145 323198])
            ("VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES" variable nil nil [323199 323261])
            ("VIR_DOMAIN_BLOCK_STATS_READ_BYTES" variable nil nil [323262 323308])
            ("VIR_DOMAIN_BLOCK_STATS_READ_REQ" variable nil nil [323309 323358])
            ("VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES" variable nil nil [323359 323417])
            ("VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES" variable nil nil [323418 323465])
            ("VIR_DOMAIN_BLOCK_STATS_WRITE_REQ" variable nil nil [323466 323516])
            ("VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES" variable nil nil [323517 323576])
            ("VIR_DOMAIN_CPU_STATS_CPUTIME" variable nil nil [323577 323618])
            ("VIR_DOMAIN_CPU_STATS_SYSTEMTIME" variable nil nil [323619 323666])
            ("VIR_DOMAIN_CPU_STATS_USERTIME" variable nil nil [323667 323710])
            ("VIR_DOMAIN_CPU_STATS_VCPUTIME" variable nil nil [323711 323754])
            ("VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE" variable nil nil [323755 323819])
            ("VIR_DOMAIN_JOB_COMPRESSION_BYTES" variable nil nil [323820 323874])
            ("VIR_DOMAIN_JOB_COMPRESSION_CACHE" variable nil nil [323875 323929])
            ("VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES" variable nil nil [323930 323998])
            ("VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW" variable nil nil [323999 324059])
            ("VIR_DOMAIN_JOB_COMPRESSION_PAGES" variable nil nil [324060 324114])
            ("VIR_DOMAIN_JOB_DATA_PROCESSED" variable nil nil [324115 324163])
            ("VIR_DOMAIN_JOB_DATA_REMAINING" variable nil nil [324164 324212])
            ("VIR_DOMAIN_JOB_DATA_TOTAL" variable nil nil [324213 324253])
            ("VIR_DOMAIN_JOB_DISK_BPS" variable nil nil [324254 324290])
            ("VIR_DOMAIN_JOB_DISK_PROCESSED" variable nil nil [324291 324339])
            ("VIR_DOMAIN_JOB_DISK_REMAINING" variable nil nil [324340 324388])
            ("VIR_DOMAIN_JOB_DISK_TOTAL" variable nil nil [324389 324429])
            ("VIR_DOMAIN_JOB_DOWNTIME" variable nil nil [324430 324466])
            ("VIR_DOMAIN_JOB_DOWNTIME_NET" variable nil nil [324467 324511])
            ("VIR_DOMAIN_JOB_MEMORY_BPS" variable nil nil [324512 324552])
            ("VIR_DOMAIN_JOB_MEMORY_CONSTANT" variable nil nil [324553 324603])
            ("VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE" variable nil nil [324604 324658])
            ("VIR_DOMAIN_JOB_MEMORY_ITERATION" variable nil nil [324659 324711])
            ("VIR_DOMAIN_JOB_MEMORY_NORMAL" variable nil nil [324712 324758])
            ("VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES" variable nil nil [324759 324817])
            ("VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE" variable nil nil [324818 324870])
            ("VIR_DOMAIN_JOB_MEMORY_PROCESSED" variable nil nil [324871 324923])
            ("VIR_DOMAIN_JOB_MEMORY_REMAINING" variable nil nil [324924 324976])
            ("VIR_DOMAIN_JOB_MEMORY_TOTAL" variable nil nil [324977 325021])
            ("VIR_DOMAIN_JOB_OPERATION" variable nil nil [325022 325060])
            ("VIR_DOMAIN_JOB_SETUP_TIME" variable nil nil [325061 325101])
            ("VIR_DOMAIN_JOB_TIME_ELAPSED" variable nil nil [325102 325146])
            ("VIR_DOMAIN_JOB_TIME_ELAPSED_NET" variable nil nil [325147 325199])
            ("VIR_DOMAIN_JOB_TIME_REMAINING" variable nil nil [325200 325248])
            ("VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT" variable nil nil [325249 325311])
            ("VIR_DOMAIN_MEMORY_HARD_LIMIT" variable nil nil [325312 325355])
            ("VIR_DOMAIN_MEMORY_MIN_GUARANTEE" variable nil nil [325356 325405])
            ("VIR_DOMAIN_MEMORY_SOFT_LIMIT" variable nil nil [325406 325449])
            ("VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT" variable nil nil [325450 325503])
            ("VIR_DOMAIN_NUMA_MODE" variable nil nil [325504 325538])
            ("VIR_DOMAIN_NUMA_NODESET" variable nil nil [325539 325579])
            ("VIR_DOMAIN_SCHEDULER_CAP" variable nil nil [325580 325612])
            ("VIR_DOMAIN_SCHEDULER_CPU_SHARES" variable nil nil [325613 325659])
            ("VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD" variable nil nil [325660 325716])
            ("VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA" variable nil nil [325717 325771])
            ("VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD" variable nil nil [325772 325824])
            ("VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA" variable nil nil [325825 325875])
            ("VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD" variable nil nil [325876 325932])
            ("VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA" variable nil nil [325933 325987])
            ("VIR_DOMAIN_SCHEDULER_LIMIT" variable nil nil [325988 326024])
            ("VIR_DOMAIN_SCHEDULER_RESERVATION" variable nil nil [326025 326073])
            ("VIR_DOMAIN_SCHEDULER_SHARES" variable nil nil [326074 326112])
            ("VIR_DOMAIN_SCHEDULER_VCPU_PERIOD" variable nil nil [326113 326161])
            ("VIR_DOMAIN_SCHEDULER_VCPU_QUOTA" variable nil nil [326162 326208])
            ("VIR_DOMAIN_SCHEDULER_WEIGHT" variable nil nil [326209 326247])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_DISK" variable nil nil [326248 326300])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME" variable nil nil [326301 326365])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC" variable nil nil [326366 326438])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX" variable nil nil [326439 326519])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH" variable nil nil [326520 326614])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC" variable nil nil [326615 326685])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX" variable nil nil [326686 326764])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH" variable nil nil [326765 326857])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC" variable nil nil [326858 326928])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC" variable nil nil [326929 327003])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX" variable nil nil [327004 327086])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH" variable nil nil [327087 327183])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC" variable nil nil [327184 327256])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX" variable nil nil [327257 327337])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH" variable nil nil [327338 327432])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC" variable nil nil [327433 327507])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX" variable nil nil [327508 327590])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH" variable nil nil [327591 327687])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC" variable nil nil [327688 327760])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX" variable nil nil [327761 327841])
            ("VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH" variable nil nil [327842 327936])
            ("VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES" variable nil nil [327937 327993])
            ("VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN" variable nil nil [327994 328052])
            ("VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD" variable nil nil [328053 328119])
            ("VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA" variable nil nil [328120 328184])
            ("VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD" variable nil nil [328185 328247])
            ("VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA" variable nil nil [328248 328308])
            ("VIR_DOMAIN_TUNABLE_CPU_IOTHREADSPIN" variable nil nil [328309 328370])
            ("VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD" variable nil nil [328371 328437])
            ("VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA" variable nil nil [328438 328502])
            ("VIR_DOMAIN_TUNABLE_CPU_VCPUPIN" variable nil nil [328503 328555])
            ("VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD" variable nil nil [328556 328614])
            ("VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA" variable nil nil [328615 328671])
            ("VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT" variable nil nil [328672 328741])
            ("VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL" variable nil nil [328742 328807])
            ("VIR_MIGRATE_PARAM_BANDWIDTH" variable nil nil [328808 328849])
            ("VIR_MIGRATE_PARAM_COMPRESSION" variable nil nil [328850 328895])
            ("VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS" variable nil nil [328896 328965])
            ("VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL" variable nil nil [328966 329029])
            ("VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS" variable nil nil [329030 329097])
            ("VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE" variable nil nil [329098 329169])
            ("VIR_MIGRATE_PARAM_DEST_NAME" variable nil nil [329170 329218])
            ("VIR_MIGRATE_PARAM_DEST_XML" variable nil nil [329219 329265])
            ("VIR_MIGRATE_PARAM_DISKS_PORT" variable nil nil [329266 329309])
            ("VIR_MIGRATE_PARAM_GRAPHICS_URI" variable nil nil [329310 329357])
            ("VIR_MIGRATE_PARAM_LISTEN_ADDRESS" variable nil nil [329358 329409])
            ("VIR_MIGRATE_PARAM_MIGRATE_DISKS" variable nil nil [329410 329459])
            ("VIR_MIGRATE_PARAM_PERSIST_XML" variable nil nil [329460 329508])
            ("VIR_MIGRATE_PARAM_URI" variable nil nil [329509 329546])
            ("VIR_NODE_CPU_STATS_IDLE" variable nil nil [329547 329579])
            ("VIR_NODE_CPU_STATS_INTR" variable nil nil [329580 329612])
            ("VIR_NODE_CPU_STATS_IOWAIT" variable nil nil [329613 329649])
            ("VIR_NODE_CPU_STATS_KERNEL" variable nil nil [329650 329686])
            ("VIR_NODE_CPU_STATS_USER" variable nil nil [329687 329719])
            ("VIR_NODE_CPU_STATS_UTILIZATION" variable nil nil [329720 329766])
            ("VIR_NODE_MEMORY_SHARED_FULL_SCANS" variable nil nil [329767 329819])
            ("VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES" variable nil nil [329820 329888])
            ("VIR_NODE_MEMORY_SHARED_PAGES_SHARED" variable nil nil [329889 329945])
            ("VIR_NODE_MEMORY_SHARED_PAGES_SHARING" variable nil nil [329946 330004])
            ("VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN" variable nil nil [330005 330063])
            ("VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED" variable nil nil [330064 330124])
            ("VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE" variable nil nil [330125 330185])
            ("VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS" variable nil nil [330186 330248])
            ("VIR_NODE_MEMORY_STATS_BUFFERS" variable nil nil [330249 330290])
            ("VIR_NODE_MEMORY_STATS_CACHED" variable nil nil [330291 330330])
            ("VIR_NODE_MEMORY_STATS_FREE" variable nil nil [330331 330366])
            ("VIR_NODE_MEMORY_STATS_TOTAL" variable nil nil [330367 330404])
            ("VIR_NODE_SEV_CBITPOS" variable nil nil [330405 330437])
            ("VIR_NODE_SEV_CERT_CHAIN" variable nil nil [330438 330476])
            ("VIR_NODE_SEV_PDH" variable nil nil [330477 330501])
            ("VIR_NODE_SEV_REDUCED_PHYS_BITS" variable nil nil [330502 330554])
            ("VIR_PERF_PARAM_ALIGNMENT_FAULTS" variable nil nil [330555 330607])
            ("VIR_PERF_PARAM_BRANCH_INSTRUCTIONS" variable nil nil [330608 330666])
            ("VIR_PERF_PARAM_BRANCH_MISSES" variable nil nil [330667 330713])
            ("VIR_PERF_PARAM_BUS_CYCLES" variable nil nil [330714 330754])
            ("VIR_PERF_PARAM_CACHE_MISSES" variable nil nil [330755 330799])
            ("VIR_PERF_PARAM_CACHE_REFERENCES" variable nil nil [330800 330852])
            ("VIR_PERF_PARAM_CMT" variable nil nil [330853 330879])
            ("VIR_PERF_PARAM_CONTEXT_SWITCHES" variable nil nil [330880 330932])
            ("VIR_PERF_PARAM_CPU_CLOCK" variable nil nil [330933 330971])
            ("VIR_PERF_PARAM_CPU_CYCLES" variable nil nil [330972 331012])
            ("VIR_PERF_PARAM_CPU_MIGRATIONS" variable nil nil [331013 331061])
            ("VIR_PERF_PARAM_EMULATION_FAULTS" variable nil nil [331062 331114])
            ("VIR_PERF_PARAM_INSTRUCTIONS" variable nil nil [331115 331159])
            ("VIR_PERF_PARAM_MBML" variable nil nil [331160 331188])
            ("VIR_PERF_PARAM_MBMT" variable nil nil [331189 331217])
            ("VIR_PERF_PARAM_PAGE_FAULTS" variable nil nil [331218 331260])
            ("VIR_PERF_PARAM_PAGE_FAULTS_MAJ" variable nil nil [331261 331311])
            ("VIR_PERF_PARAM_PAGE_FAULTS_MIN" variable nil nil [331312 331362])
            ("VIR_PERF_PARAM_REF_CPU_CYCLES" variable nil nil [331363 331411])
            ("VIR_PERF_PARAM_STALLED_CYCLES_BACKEND" variable nil nil [331412 331476])
            ("VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND" variable nil nil [331477 331543])
            ("VIR_PERF_PARAM_TASK_CLOCK" variable nil nil [331544 331584]))          
      :file "libvirt.py"
      :pointmax 331585
      :fsize 331584
      :lastmodtime '(23903 54665 306000 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("libvirt_virConnResetLastError" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [75 90])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [91 106]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [34 107])
            ("libvirt_virConnectClose" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [143 158])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [159 174]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [108 175])
            ("libvirt_virConnectCompareCPU" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [216 231])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [232 247]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [176 248])
            ("libvirt_virConnectCompareHypervisorCPU" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [299 314])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [315 330]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [249 331])
            ("libvirt_virConnectDomainXMLFromNative" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [381 396])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [397 412]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [332 413])
            ("libvirt_virConnectDomainXMLToNative" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [461 476])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [477 492]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [414 493])
            ("libvirt_virConnectFindStoragePoolSources" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [546 561])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [562 577]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [494 578])
            ("libvirt_virConnectGetCapabilities" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [624 639])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [640 655]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [579 656])
            ("libvirt_virConnectGetDomainCapabilities" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [708 723])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [724 739]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [657 740])
            ("libvirt_virConnectGetHostname" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [782 797])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [798 813]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [741 814])
            ("libvirt_virConnectGetMaxVcpus" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [856 871])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [872 887]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [815 888])
            ("libvirt_virConnectGetSysinfo" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [929 944])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [945 960]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [889 961])
            ("libvirt_virConnectGetType" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [999 1014])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1015 1030]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [962 1031])
            ("libvirt_virConnectGetURI" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1068 1083])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1084 1099]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1032 1100])
            ("libvirt_virConnectIsAlive" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1138 1153])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1154 1169]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1101 1170])
            ("libvirt_virConnectIsEncrypted" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1212 1227])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1228 1243]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1171 1244])
            ("libvirt_virConnectIsSecure" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1283 1298])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1299 1314]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1245 1315])
            ("libvirt_virConnectNumOfDefinedDomains" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1365 1380])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1381 1396]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1316 1397])
            ("libvirt_virConnectNumOfDefinedInterfaces" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1450 1465])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1466 1481]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1398 1482])
            ("libvirt_virConnectNumOfDefinedNetworks" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1533 1548])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1549 1564]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1483 1565])
            ("libvirt_virConnectNumOfDefinedStoragePools" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1620 1635])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1636 1651]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1566 1652])
            ("libvirt_virConnectNumOfDomains" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1695 1710])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1711 1726]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1653 1727])
            ("libvirt_virConnectNumOfInterfaces" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1773 1788])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1789 1804]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1728 1805])
            ("libvirt_virConnectNumOfNWFilters" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1850 1865])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1866 1881]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1806 1882])
            ("libvirt_virConnectNumOfNetworks" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1926 1941])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1942 1957]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1883 1958])
            ("libvirt_virConnectNumOfSecrets" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2001 2016])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2017 2032]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1959 2033])
            ("libvirt_virConnectNumOfStoragePools" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2081 2096])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2097 2112]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2034 2113])
            ("libvirt_virConnectOpen" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2148 2163])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2164 2179]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2114 2180])
            ("libvirt_virConnectOpenReadOnly" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2223 2238])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2239 2254]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2181 2255])
            ("libvirt_virConnectSetKeepAlive" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2298 2313])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2314 2329]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2256 2330])
            ("libvirt_virDomainAbortJob" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2368 2383])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2384 2399]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2331 2400])
            ("libvirt_virDomainAddIOThread" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2441 2456])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2457 2472]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2401 2473])
            ("libvirt_virDomainAttachDevice" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2515 2530])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2531 2546]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2474 2547])
            ("libvirt_virDomainAttachDeviceFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2594 2609])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2610 2625]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2548 2626])
            ("libvirt_virDomainBlockCommit" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2667 2682])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2683 2698]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2627 2699])
            ("libvirt_virDomainBlockJobAbort" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2742 2757])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2758 2773]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2700 2774])
            ("libvirt_virDomainBlockJobSetSpeed" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2820 2835])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2836 2851]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2775 2852])
            ("libvirt_virDomainBlockPull" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2891 2906])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2907 2922]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2853 2923])
            ("libvirt_virDomainBlockRebase" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2964 2979])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2980 2995]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2924 2996])
            ("libvirt_virDomainBlockResize" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3037 3052])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3053 3068]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2997 3069])
            ("libvirt_virDomainCoreDump" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3107 3122])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3123 3138]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3070 3139])
            ("libvirt_virDomainCoreDumpWithFormat" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3187 3202])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3203 3218]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3140 3219])
            ("libvirt_virDomainCreate" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3255 3270])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3271 3286]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3220 3287])
            ("libvirt_virDomainCreateLinux" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3328 3343])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3344 3359]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3288 3360])
            ("libvirt_virDomainCreateWithFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3405 3420])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3421 3436]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3361 3437])
            ("libvirt_virDomainCreateXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3476 3491])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3492 3507]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3438 3508])
            ("libvirt_virDomainDefineXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3547 3562])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3563 3578]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3509 3579])
            ("libvirt_virDomainDefineXMLFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3623 3638])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3639 3654]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3580 3655])
            ("libvirt_virDomainDelIOThread" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3696 3711])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3712 3727]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3656 3728])
            ("libvirt_virDomainDestroy" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3765 3780])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3781 3796]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3729 3797])
            ("libvirt_virDomainDestroyFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3839 3854])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3855 3870]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3798 3871])
            ("libvirt_virDomainDetachDevice" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3913 3928])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3929 3944]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3872 3945])
            ("libvirt_virDomainDetachDeviceAlias" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3992 4007])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4008 4023]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3946 4024])
            ("libvirt_virDomainDetachDeviceFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4071 4086])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4087 4102]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4025 4103])
            ("libvirt_virDomainFSTrim" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4139 4154])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4155 4170]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4104 4171])
            ("libvirt_virDomainFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4205 4220])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4221 4236]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4172 4237])
            ("libvirt_virDomainGetHostname" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4278 4293])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4294 4309]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4238 4310])
            ("libvirt_virDomainGetID" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4345 4360])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4361 4376]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4311 4377])
            ("libvirt_virDomainGetMaxMemory" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4419 4434])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4435 4450]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4378 4451])
            ("libvirt_virDomainGetMaxVcpus" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4492 4507])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4508 4523]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4452 4524])
            ("libvirt_virDomainGetMetadata" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4565 4580])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4581 4596]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4525 4597])
            ("libvirt_virDomainGetName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4634 4649])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4650 4665]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4598 4666])
            ("libvirt_virDomainGetOSType" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4705 4720])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4721 4736]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4667 4737])
            ("libvirt_virDomainGetVcpusFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4780 4795])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4796 4811]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4738 4812])
            ("libvirt_virDomainGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4852 4867])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4868 4883]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4813 4884])
            ("libvirt_virDomainHasCurrentSnapshot" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4932 4947])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4948 4963]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4885 4964])
            ("libvirt_virDomainHasManagedSaveImage" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5013 5028])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5029 5044]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4965 5045])
            ("libvirt_virDomainInjectNMI" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5084 5099])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5100 5115]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5046 5116])
            ("libvirt_virDomainIsActive" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5154 5169])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5170 5185]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5117 5186])
            ("libvirt_virDomainIsPersistent" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5228 5243])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5244 5259]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5187 5260])
            ("libvirt_virDomainIsUpdated" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5299 5314])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5315 5330]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5261 5331])
            ("libvirt_virDomainLookupByID" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5371 5386])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5387 5402]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5332 5403])
            ("libvirt_virDomainLookupByName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5445 5460])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5461 5476]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5404 5477])
            ("libvirt_virDomainLookupByUUIDString" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5525 5540])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5541 5556]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5478 5557])
            ("libvirt_virDomainManagedSave" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5598 5613])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5614 5629]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5558 5630])
            ("libvirt_virDomainManagedSaveDefineXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5680 5695])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5696 5711]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5631 5712])
            ("libvirt_virDomainManagedSaveGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5763 5778])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5779 5794]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5713 5795])
            ("libvirt_virDomainManagedSaveRemove" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5842 5857])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5858 5873]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5796 5874])
            ("libvirt_virDomainMigrate" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5911 5926])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5927 5942]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5875 5943])
            ("libvirt_virDomainMigrate2" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5981 5996])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5997 6012]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5944 6013])
            ("libvirt_virDomainMigrateSetCompressionCache" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6069 6084])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6085 6100]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6014 6101])
            ("libvirt_virDomainMigrateSetMaxDowntime" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6152 6167])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6168 6183]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6102 6184])
            ("libvirt_virDomainMigrateSetMaxSpeed" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6232 6247])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6248 6263]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6185 6264])
            ("libvirt_virDomainMigrateStartPostCopy" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6314 6329])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6330 6345]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6265 6346])
            ("libvirt_virDomainMigrateToURI" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6388 6403])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6404 6419]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6347 6420])
            ("libvirt_virDomainMigrateToURI2" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6463 6478])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6479 6494]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6421 6495])
            ("libvirt_virDomainOpenChannel" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6536 6551])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6552 6567]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6496 6568])
            ("libvirt_virDomainOpenConsole" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6609 6624])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6625 6640]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6569 6641])
            ("libvirt_virDomainOpenGraphics" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6683 6698])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6699 6714]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6642 6715])
            ("libvirt_virDomainOpenGraphicsFD" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6759 6774])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6775 6790]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6716 6791])
            ("libvirt_virDomainPMSuspendForDuration" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6841 6856])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6857 6872]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6792 6873])
            ("libvirt_virDomainPMWakeup" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6911 6926])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6927 6942]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6874 6943])
            ("libvirt_virDomainReboot" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6979 6994])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6995 7010]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6944 7011])
            ("libvirt_virDomainRename" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7047 7062])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7063 7078]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7012 7079])
            ("libvirt_virDomainReset" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7114 7129])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7130 7145]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7080 7146])
            ("libvirt_virDomainRestore" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7183 7198])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7199 7214]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7147 7215])
            ("libvirt_virDomainRestoreFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7257 7272])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7273 7288]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7216 7289])
            ("libvirt_virDomainResume" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7325 7340])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7341 7356]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7290 7357])
            ("libvirt_virDomainSave" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7391 7406])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7407 7422]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7358 7423])
            ("libvirt_virDomainSaveFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7462 7477])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7478 7493]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7424 7494])
            ("libvirt_virDomainSaveImageDefineXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7542 7557])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7558 7573]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7495 7574])
            ("libvirt_virDomainSaveImageGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7623 7638])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7639 7654]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7575 7655])
            ("libvirt_virDomainScreenshot" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7695 7710])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7711 7726]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7656 7727])
            ("libvirt_virDomainSendProcessSignal" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7774 7789])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7790 7805]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7728 7806])
            ("libvirt_virDomainSetAutostart" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7848 7863])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7864 7879]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7807 7880])
            ("libvirt_virDomainSetBlockThreshold" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7927 7942])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7943 7958]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7881 7959])
            ("libvirt_virDomainSetGuestVcpus" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8002 8017])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8018 8033]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7960 8034])
            ("libvirt_virDomainSetLifecycleAction" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8082 8097])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8098 8113]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8035 8114])
            ("libvirt_virDomainSetMaxMemory" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8156 8171])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8172 8187]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8115 8188])
            ("libvirt_virDomainSetMemory" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8227 8242])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8243 8258]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8189 8259])
            ("libvirt_virDomainSetMemoryFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8303 8318])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8319 8334]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8260 8335])
            ("libvirt_virDomainSetMemoryStatsPeriod" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8385 8400])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8401 8416]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8336 8417])
            ("libvirt_virDomainSetMetadata" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8458 8473])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8474 8489]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8418 8490])
            ("libvirt_virDomainSetUserPassword" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8535 8550])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8551 8566]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8491 8567])
            ("libvirt_virDomainSetVcpu" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8604 8619])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8620 8635]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8568 8636])
            ("libvirt_virDomainSetVcpus" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8674 8689])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8690 8705]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8637 8706])
            ("libvirt_virDomainSetVcpusFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8749 8764])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8765 8780]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8707 8781])
            ("libvirt_virDomainShutdown" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8819 8834])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8835 8850]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8782 8851])
            ("libvirt_virDomainShutdownFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8894 8909])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8910 8925]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8852 8926])
            ("libvirt_virDomainSnapshotCreateXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8973 8988])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8989 9004]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8927 9005])
            ("libvirt_virDomainSnapshotCurrent" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9050 9065])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9066 9081]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9006 9082])
            ("libvirt_virDomainSnapshotDelete" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9126 9141])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9142 9157]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9083 9158])
            ("libvirt_virDomainSnapshotFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9200 9215])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9216 9231]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9159 9232])
            ("libvirt_virDomainSnapshotGetName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9277 9292])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9293 9308]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9233 9309])
            ("libvirt_virDomainSnapshotGetParent" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9356 9371])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9372 9387]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9310 9388])
            ("libvirt_virDomainSnapshotGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9436 9451])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9452 9467]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9389 9468])
            ("libvirt_virDomainSnapshotHasMetadata" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9517 9532])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9533 9548]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9469 9549])
            ("libvirt_virDomainSnapshotIsCurrent" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9596 9611])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9612 9627]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9550 9628])
            ("libvirt_virDomainSnapshotLookupByName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9678 9693])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9694 9709]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9629 9710])
            ("libvirt_virDomainSnapshotNum" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9751 9766])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9767 9782]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9711 9783])
            ("libvirt_virDomainSnapshotNumChildren" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9832 9847])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9848 9863]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9784 9864])
            ("libvirt_virDomainSuspend" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9901 9916])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9917 9932]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9865 9933])
            ("libvirt_virDomainUndefine" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9971 9986])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9987 10002]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9934 10003])
            ("libvirt_virDomainUndefineFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10046 10061])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10062 10077]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10004 10078])
            ("libvirt_virDomainUpdateDeviceFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10125 10140])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10141 10156]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10079 10157])
            ("libvirt_virEventRegisterDefaultImpl" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10205 10220])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10221 10236]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10158 10237])
            ("libvirt_virEventRemoveHandle" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10278 10293])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10294 10309]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10238 10310])
            ("libvirt_virEventRemoveTimeout" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10352 10367])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10368 10383]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10311 10384])
            ("libvirt_virEventRunDefaultImpl" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10427 10442])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10443 10458]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10385 10459])
            ("libvirt_virEventUpdateHandle" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10500 10515])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10516 10531]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10460 10532])
            ("libvirt_virEventUpdateTimeout" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10574 10589])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10590 10605]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10533 10606])
            ("libvirt_virGetLastErrorCode" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10646 10661])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10662 10677]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10607 10678])
            ("libvirt_virGetLastErrorDomain" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10720 10735])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10736 10751]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10679 10752])
            ("libvirt_virGetLastErrorMessage" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10795 10810])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10811 10826]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10753 10827])
            ("libvirt_virInitialize" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10861 10876])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10877 10892]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10828 10893])
            ("libvirt_virInterfaceChangeBegin" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10937 10952])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10953 10968]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10894 10969])
            ("libvirt_virInterfaceChangeCommit" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11014 11029])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11030 11045]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10970 11046])
            ("libvirt_virInterfaceChangeRollback" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11093 11108])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11109 11124]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11047 11125])
            ("libvirt_virInterfaceCreate" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11164 11179])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11180 11195]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11126 11196])
            ("libvirt_virInterfaceDefineXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11238 11253])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11254 11269]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11197 11270])
            ("libvirt_virInterfaceDestroy" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11310 11325])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11326 11341]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11271 11342])
            ("libvirt_virInterfaceFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11379 11394])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11395 11410]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11343 11411])
            ("libvirt_virInterfaceGetMACString" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11456 11471])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11472 11487]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11412 11488])
            ("libvirt_virInterfaceGetName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11528 11543])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11544 11559]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11489 11560])
            ("libvirt_virInterfaceGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11603 11618])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11619 11634]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11561 11635])
            ("libvirt_virInterfaceIsActive" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11676 11691])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11692 11707]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11636 11708])
            ("libvirt_virInterfaceLookupByMACString" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11758 11773])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11774 11789]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11709 11790])
            ("libvirt_virInterfaceLookupByName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11835 11850])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11851 11866]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11791 11867])
            ("libvirt_virInterfaceUndefine" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11908 11923])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11924 11939]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11868 11940])
            ("libvirt_virNWFilterBindingCreateXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11988 12003])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12004 12019]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11941 12020])
            ("libvirt_virNWFilterBindingDelete" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12065 12080])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12081 12096]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12021 12097])
            ("libvirt_virNWFilterBindingFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12140 12155])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12156 12171]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12098 12172])
            ("libvirt_virNWFilterBindingGetFilterName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12224 12239])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12240 12255]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12173 12256])
            ("libvirt_virNWFilterBindingGetPortDev" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12305 12320])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12321 12336]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12257 12337])
            ("libvirt_virNWFilterBindingGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12386 12401])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12402 12417]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12338 12418])
            ("libvirt_virNWFilterBindingLookupByPortDev" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12472 12487])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12488 12503]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12419 12504])
            ("libvirt_virNWFilterDefineXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12545 12560])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12561 12576]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12505 12577])
            ("libvirt_virNWFilterFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12613 12628])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12629 12644]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12578 12645])
            ("libvirt_virNWFilterGetName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12684 12699])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12700 12715]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12646 12716])
            ("libvirt_virNWFilterGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12758 12773])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12774 12789]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12717 12790])
            ("libvirt_virNWFilterLookupByName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12834 12849])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12850 12865]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12791 12866])
            ("libvirt_virNWFilterLookupByUUIDString" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12916 12931])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12932 12947]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12867 12948])
            ("libvirt_virNWFilterUndefine" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12988 13003])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13004 13019]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12949 13020])
            ("libvirt_virNetworkCreate" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13057 13072])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13073 13088]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13021 13089])
            ("libvirt_virNetworkCreateXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13129 13144])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13145 13160]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13090 13161])
            ("libvirt_virNetworkDefineXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13201 13216])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13217 13232]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13162 13233])
            ("libvirt_virNetworkDestroy" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13271 13286])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13287 13302]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13234 13303])
            ("libvirt_virNetworkFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13338 13353])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13354 13369]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13304 13370])
            ("libvirt_virNetworkGetBridgeName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13414 13429])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13430 13445]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13371 13446])
            ("libvirt_virNetworkGetName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13484 13499])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13500 13515]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13447 13516])
            ("libvirt_virNetworkGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13557 13572])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13573 13588]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13517 13589])
            ("libvirt_virNetworkIsActive" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13628 13643])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13644 13659]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13590 13660])
            ("libvirt_virNetworkIsPersistent" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13703 13718])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13719 13734]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13661 13735])
            ("libvirt_virNetworkLookupByName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13778 13793])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13794 13809]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13736 13810])
            ("libvirt_virNetworkLookupByUUIDString" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13859 13874])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13875 13890]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13811 13891])
            ("libvirt_virNetworkSetAutostart" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13934 13949])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13950 13965]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13892 13966])
            ("libvirt_virNetworkUndefine" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14005 14020])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14021 14036]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13967 14037])
            ("libvirt_virNetworkUpdate" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14074 14089])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14090 14105]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14038 14106])
            ("libvirt_virNodeDeviceCreateXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14149 14164])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14165 14180]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14107 14181])
            ("libvirt_virNodeDeviceDestroy" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14222 14237])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14238 14253]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14182 14254])
            ("libvirt_virNodeDeviceDetachFlags" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14299 14314])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14315 14330]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14255 14331])
            ("libvirt_virNodeDeviceDettach" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14372 14387])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14388 14403]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14332 14404])
            ("libvirt_virNodeDeviceFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14442 14457])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14458 14473]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14405 14474])
            ("libvirt_virNodeDeviceGetName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14515 14530])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14531 14546]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14475 14547])
            ("libvirt_virNodeDeviceGetParent" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14590 14605])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14606 14621]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14548 14622])
            ("libvirt_virNodeDeviceGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14666 14681])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14682 14697]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14623 14698])
            ("libvirt_virNodeDeviceLookupByName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14744 14759])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14760 14775]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14699 14776])
            ("libvirt_virNodeDeviceLookupSCSIHostByWWN" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14829 14844])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14845 14860]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14777 14861])
            ("libvirt_virNodeDeviceNumOfCaps" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14904 14919])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14920 14935]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14862 14936])
            ("libvirt_virNodeDeviceReAttach" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14978 14993])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14994 15009]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14937 15010])
            ("libvirt_virNodeDeviceReset" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15049 15064])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15065 15080]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15011 15081])
            ("libvirt_virNodeGetFreeMemory" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15122 15137])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15138 15153]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15082 15154])
            ("libvirt_virNodeNumOfDevices" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15194 15209])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15210 15225]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15155 15226])
            ("libvirt_virNodeSuspendForDuration" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15272 15287])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15288 15303]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15227 15304])
            ("libvirt_virResetLastError" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15342 15357])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15358 15373]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15305 15374])
            ("libvirt_virSecretDefineXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15413 15428])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15429 15444]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15375 15445])
            ("libvirt_virSecretFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15479 15494])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15495 15510]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15446 15511])
            ("libvirt_virSecretGetUsageID" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15551 15566])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15567 15582]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15512 15583])
            ("libvirt_virSecretGetUsageType" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15625 15640])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15641 15656]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15584 15657])
            ("libvirt_virSecretGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15697 15712])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15713 15728]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15658 15729])
            ("libvirt_virSecretLookupByUUIDString" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15777 15792])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15793 15808]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15730 15809])
            ("libvirt_virSecretLookupByUsage" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15852 15867])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15868 15883]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15810 15884])
            ("libvirt_virSecretUndefine" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15922 15937])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15938 15953]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15885 15954])
            ("libvirt_virStoragePoolBuild" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15994 16009])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16010 16025]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15955 16026])
            ("libvirt_virStoragePoolCreate" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16067 16082])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16083 16098]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16027 16099])
            ("libvirt_virStoragePoolCreateXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16143 16158])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16159 16174]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16100 16175])
            ("libvirt_virStoragePoolDefineXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16219 16234])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16235 16250]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16176 16251])
            ("libvirt_virStoragePoolDelete" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16292 16307])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16308 16323]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16252 16324])
            ("libvirt_virStoragePoolDestroy" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16366 16381])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16382 16397]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16325 16398])
            ("libvirt_virStoragePoolFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16437 16452])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16453 16468]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16399 16469])
            ("libvirt_virStoragePoolGetName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16511 16526])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16527 16542]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16470 16543])
            ("libvirt_virStoragePoolGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16588 16603])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16604 16619]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16544 16620])
            ("libvirt_virStoragePoolIsActive" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16663 16678])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16679 16694]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16621 16695])
            ("libvirt_virStoragePoolIsPersistent" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16742 16757])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16758 16773]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16696 16774])
            ("libvirt_virStoragePoolLookupByName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16821 16836])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16837 16852]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16775 16853])
            ("libvirt_virStoragePoolLookupByTargetPath" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16906 16921])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16922 16937]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16854 16938])
            ("libvirt_virStoragePoolLookupByUUIDString" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16991 17006])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17007 17022]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16939 17023])
            ("libvirt_virStoragePoolLookupByVolume" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17072 17087])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17088 17103]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17024 17104])
            ("libvirt_virStoragePoolNumOfVolumes" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17151 17166])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17167 17182]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17105 17183])
            ("libvirt_virStoragePoolRefresh" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17225 17240])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17241 17256]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17184 17257])
            ("libvirt_virStoragePoolSetAutostart" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17304 17319])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17320 17335]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17258 17336])
            ("libvirt_virStoragePoolUndefine" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17379 17394])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17395 17410]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17337 17411])
            ("libvirt_virStorageVolCreateXML" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17454 17469])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17470 17485]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17412 17486])
            ("libvirt_virStorageVolCreateXMLFrom" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17533 17548])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17549 17564]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17487 17565])
            ("libvirt_virStorageVolDelete" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17605 17620])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17621 17636]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17566 17637])
            ("libvirt_virStorageVolDownload" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17679 17694])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17695 17710]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17638 17711])
            ("libvirt_virStorageVolFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17749 17764])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17765 17780]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17712 17781])
            ("libvirt_virStorageVolGetKey" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17821 17836])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17837 17852]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17782 17853])
            ("libvirt_virStorageVolGetName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17894 17909])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17910 17925]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17854 17926])
            ("libvirt_virStorageVolGetPath" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17967 17982])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17983 17998]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17927 17999])
            ("libvirt_virStorageVolGetXMLDesc" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18043 18058])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18059 18074]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18000 18075])
            ("libvirt_virStorageVolLookupByKey" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18120 18135])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18136 18151]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18076 18152])
            ("libvirt_virStorageVolLookupByName" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18198 18213])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18214 18229]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18153 18230])
            ("libvirt_virStorageVolLookupByPath" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18276 18291])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18292 18307]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18231 18308])
            ("libvirt_virStorageVolResize" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18348 18363])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18364 18379]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18309 18380])
            ("libvirt_virStorageVolUpload" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18420 18435])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18436 18451]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18381 18452])
            ("libvirt_virStorageVolWipe" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18490 18505])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18506 18521]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18453 18522])
            ("libvirt_virStorageVolWipePattern" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18567 18582])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18583 18598]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18523 18599])
            ("libvirt_virStreamAbort" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18634 18649])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18650 18665]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18600 18666])
            ("libvirt_virStreamEventRemoveCallback" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18715 18730])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18731 18746]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18667 18747])
            ("libvirt_virStreamEventUpdateCallback" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18796 18811])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18812 18827]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18748 18828])
            ("libvirt_virStreamFinish" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18864 18879])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18880 18895]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18829 18896])
            ("libvirt_virStreamFree" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18930 18945])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18946 18961]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18897 18962])
            ("libvirt_virStreamNew" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18995 19010])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19011 19026]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18963 19027])
            ("libvirt_virDomain_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19064 19079])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19080 19095]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19028 19096])
            ("libvirt_virNetwork_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19134 19149])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19150 19165]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19097 19166])
            ("libvirt_virNetworkPort_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19208 19223])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19224 19239]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19167 19240])
            ("libvirt_virInterface_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19280 19295])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19296 19311]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19241 19312])
            ("libvirt_virStoragePool_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19354 19369])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19370 19385]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19313 19386])
            ("libvirt_virStorageVol_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19427 19442])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19443 19458]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19387 19459])
            ("libvirt_virConnect_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19497 19512])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19513 19528]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19460 19529])
            ("libvirt_virNodeDevice_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19570 19585])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19586 19601]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19530 19602])
            ("libvirt_virSecret_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19639 19654])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19655 19670]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19603 19671])
            ("libvirt_virNWFilter_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19710 19725])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19726 19741]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19672 19742])
            ("libvirt_virNWFilterBinding_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19788 19803])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19804 19819]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19743 19820])
            ("libvirt_virStream_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19857 19872])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19873 19888]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19821 19889])
            ("libvirt_virDomainCheckpoint_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19936 19951])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19952 19967]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19890 19968])
            ("libvirt_virDomainSnapshot_pointer" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20013 20028])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20029 20044]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19969 20045])
            ("VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE" variable (:constant-flag t) nil [20054 20089])
            ("VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE" variable (:constant-flag t) nil [20134 20168])
            ("VIR_DOMAIN_EVENT_ID_BLOCK_JOB" variable (:constant-flag t) nil [20212 20241])
            ("VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2" variable (:constant-flag t) nil [20280 20311])
            ("VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD" variable (:constant-flag t) nil [20352 20387])
            ("VIR_DOMAIN_EVENT_ID_CONTROL_ERROR" variable (:constant-flag t) nil [20432 20465])
            ("VIR_DOMAIN_EVENT_ID_DEVICE_ADDED" variable (:constant-flag t) nil [20508 20540])
            ("VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED" variable (:constant-flag t) nil [20582 20623])
            ("VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED" variable (:constant-flag t) nil [20674 20708])
            ("VIR_DOMAIN_EVENT_ID_DISK_CHANGE" variable (:constant-flag t) nil [20752 20783])
            ("VIR_DOMAIN_EVENT_ID_GRAPHICS" variable (:constant-flag t) nil [20824 20852])
            ("VIR_DOMAIN_EVENT_ID_IO_ERROR" variable (:constant-flag t) nil [20890 20918])
            ("VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON" variable (:constant-flag t) nil [20956 20991])
            ("VIR_DOMAIN_EVENT_ID_JOB_COMPLETED" variable (:constant-flag t) nil [21036 21069])
            ("VIR_DOMAIN_EVENT_ID_LAST" variable (:constant-flag t) nil [21112 21136])
            ("VIR_DOMAIN_EVENT_ID_LIFECYCLE" variable (:constant-flag t) nil [21170 21199])
            ("VIR_DOMAIN_EVENT_ID_METADATA_CHANGE" variable (:constant-flag t) nil [21238 21273])
            ("VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION" variable (:constant-flag t) nil [21318 21357])
            ("VIR_DOMAIN_EVENT_ID_PMSUSPEND" variable (:constant-flag t) nil [21406 21435])
            ("VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK" variable (:constant-flag t) nil [21474 21508])
            ("VIR_DOMAIN_EVENT_ID_PMWAKEUP" variable (:constant-flag t) nil [21552 21580])
            ("VIR_DOMAIN_EVENT_ID_REBOOT" variable (:constant-flag t) nil [21618 21644])
            ("VIR_DOMAIN_EVENT_ID_RTC_CHANGE" variable (:constant-flag t) nil [21680 21710])
            ("VIR_DOMAIN_EVENT_ID_TRAY_CHANGE" variable (:constant-flag t) nil [21750 21781])
            ("VIR_DOMAIN_EVENT_ID_TUNABLE" variable (:constant-flag t) nil [21822 21849])
            ("VIR_DOMAIN_EVENT_ID_WATCHDOG" variable (:constant-flag t) nil [21886 21914])
            ("VIR_NETWORK_EVENT_ID_LAST" variable (:constant-flag t) nil [21952 21977])
            ("VIR_NETWORK_EVENT_ID_LIFECYCLE" variable (:constant-flag t) nil [22012 22042]))          
      :file "libvirt.h"
      :pointmax 22074
      :fsize 22073
      :lastmodtime '(23903 54665 275000 0)
      :unmatched-syntax nil
      :lexical-table 
        '(("VIR_DOMAIN_EVENT_ID_PMWAKEUP" . ((symbol "VIR_DOMAIN_EVENT_ID_PMWAKEUP" 21581 . 21609)))
          ("VIR_DOMAIN_EVENT_ID_WATCHDOG" . ((symbol "VIR_DOMAIN_EVENT_ID_WATCHDOG" 21915 . 21943)))
          ("VIR_DOMAIN_EVENT_ID_GRAPHICS" . ((symbol "VIR_DOMAIN_EVENT_ID_GRAPHICS" 20853 . 20881)))
          ("VIR_DOMAIN_EVENT_ID_REBOOT" . ((symbol "VIR_DOMAIN_EVENT_ID_REBOOT" 21645 . 21671)))
          ("VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE" . ((symbol "VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE" 20169 . 20203)))
          ("VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD" . ((symbol "VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD" 20388 . 20423)))
          ("VIR_DOMAIN_EVENT_ID_DISK_CHANGE" . ((symbol "VIR_DOMAIN_EVENT_ID_DISK_CHANGE" 20784 . 20815)))
          ("VIR_DOMAIN_EVENT_ID_DEVICE_ADDED" . ((symbol "VIR_DOMAIN_EVENT_ID_DEVICE_ADDED" 20541 . 20573)))
          ("VIR_DOMAIN_EVENT_ID_IO_ERROR" . ((symbol "VIR_DOMAIN_EVENT_ID_IO_ERROR" 20919 . 20947)))
          ("VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON" . ((symbol "VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON" 20992 . 21027)))
          ("VIR_DOMAIN_EVENT_ID_JOB_COMPLETED" . ((symbol "VIR_DOMAIN_EVENT_ID_JOB_COMPLETED" 21070 . 21103)))
          ("VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION" . ((symbol "VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION" 21358 . 21397)))
          ("VIR_DOMAIN_EVENT_ID_PMSUSPEND" . ((symbol "VIR_DOMAIN_EVENT_ID_PMSUSPEND" 21436 . 21465)))
          ("VIR_DOMAIN_EVENT_ID_TRAY_CHANGE" . ((symbol "VIR_DOMAIN_EVENT_ID_TRAY_CHANGE" 21782 . 21813)))
          ("VIR_DOMAIN_EVENT_ID_TUNABLE" . ((symbol "VIR_DOMAIN_EVENT_ID_TUNABLE" 21850 . 21877)))
          ("VIR_NETWORK_EVENT_ID_LAST" . ((symbol "VIR_NETWORK_EVENT_ID_LAST" 21978 . 22003)))
          ("VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE" . ((symbol "VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE" 20090 . 20125)))
          ("VIR_DOMAIN_EVENT_ID_METADATA_CHANGE" . ((symbol "VIR_DOMAIN_EVENT_ID_METADATA_CHANGE" 21274 . 21309)))
          ("VIR_DOMAIN_EVENT_ID_RTC_CHANGE" . ((symbol "VIR_DOMAIN_EVENT_ID_RTC_CHANGE" 21711 . 21741)))
          ("VIR_DOMAIN_EVENT_ID_BLOCK_JOB" . ((symbol "VIR_DOMAIN_EVENT_ID_BLOCK_JOB" 20242 . 20271)))
          ("VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2" . ((symbol "VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2" 20312 . 20343)))
          ("VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED" . ((symbol "VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED" 20624 . 20665)))
          ("VIR_DOMAIN_EVENT_ID_LAST" . ((symbol "VIR_DOMAIN_EVENT_ID_LAST" 21137 . 21161)))
          ("VIR_DOMAIN_EVENT_ID_CONTROL_ERROR" . ((symbol "VIR_DOMAIN_EVENT_ID_CONTROL_ERROR" 20466 . 20499)))
          ("VIR_NETWORK_EVENT_ID_LIFECYCLE" . ((symbol "VIR_NETWORK_EVENT_ID_LIFECYCLE" 22043 . 22073)))
          ("VIR_DOMAIN_EVENT_ID_LIFECYCLE" . ((symbol "VIR_DOMAIN_EVENT_ID_LIFECYCLE" 21200 . 21229)))
          ("VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED" . ((symbol "VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED" 20709 . 20743)))
          ("VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK" . ((symbol "VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK" 21509 . 21543)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("libvirt_lxc_virDomainLxcEnterCGroup" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [81 96])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97 112]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [34 113]))          
      :file "libvirt-lxc.h"
      :pointmax 114
      :fsize 113
      :lastmodtime '(23903 54665 640000 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("sys" include nil nil [439 449])
            ("try" code nil nil [450 718])
            ("libvirt" include nil nil [719 733])
            ("lxcEnterCGroup" function
               (:documentation "This API is LXC specific, so it will only work with hypervisor
    connections to the LXC driver.
    
    Attaches the process to the control cgroups associated
    with the container @domain. "
                :arguments 
                  ( ("domain" variable nil (reparse-symbol function_parameters) [795 801])
                    ("flags" variable nil (reparse-symbol function_parameters) [803 808]))                  )
                nil [776 1181])
            ("lxcOpenNamespace" function
               (:documentation "This API is LXC specific, so it will only work with hypervisor
    connections to the LXC driver.
    
    Open the namespaces associated with the container @domain
    and return a list of file descriptors associated with the
    container.
    
    The returned file descriptors are intended to be used with
    the setns() system call. "
                :arguments 
                  ( ("domain" variable nil (reparse-symbol function_parameters) [1203 1209])
                    ("flags" variable nil (reparse-symbol function_parameters) [1211 1216]))                  )
                nil [1182 1738]))          
      :file "libvirt_lxc.py"
      :pointmax 1739
      :fsize 1738
      :lastmodtime '(23903 54665 641000 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("Python.h" include (:system-flag t) nil [34 53])
            ("libvirt/libvirt.h" include (:system-flag t) nil [54 82])
            ("typewrappers.h" include nil nil [83 108])
            ("build/libvirt.h" include nil nil [109 135])
            ("libvirt_virConnResetLastError" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [178 209])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [193 210])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [211 226]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [137 582])
            ("libvirt_virConnectClose" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [619 650])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [634 651])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [652 667]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [584 1092])
            ("libvirt_virConnectCompareCPU" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1134 1165])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1149 1166])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1167 1182]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1094 1697])
            ("libvirt_virConnectCompareHypervisorCPU" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1749 1780])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1764 1781])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1782 1797]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [1699 2486])
            ("libvirt_virConnectDomainXMLFromNative" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2537 2568])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2552 2569])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2570 2585]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [2488 3218])
            ("libvirt_virConnectDomainXMLToNative" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3267 3298])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3282 3299])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3300 3315]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3220 3935])
            ("libvirt_virConnectFindStoragePoolSources" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3989 4020])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4004 4021])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4022 4037]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [3937 4637])
            ("libvirt_virConnectGetCapabilities" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4684 4715])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4699 4716])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4717 4732]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [4639 5207])
            ("libvirt_virConnectGetDomainCapabilities" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5260 5291])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5275 5292])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5293 5308]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5209 5992])
            ("libvirt_virConnectGetHostname" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6035 6066])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6050 6067])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6068 6083]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [5994 6550])
            ("libvirt_virConnectGetMaxVcpus" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6593 6624])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6608 6625])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6626 6641]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [6552 7109])
            ("libvirt_virConnectGetSysinfo" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7151 7182])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7166 7183])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7184 7199]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7111 7704])
            ("libvirt_virConnectGetType" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7743 7774])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7758 7775])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7776 7791]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [7706 8247])
            ("libvirt_virConnectGetURI" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8285 8316])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8300 8317])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8318 8333]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8249 8790])
            ("libvirt_virConnectIsAlive" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8829 8860])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8844 8861])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8862 8877]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [8792 9306])
            ("libvirt_virConnectIsEncrypted" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9349 9380])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9364 9381])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9382 9397]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9308 9834])
            ("libvirt_virConnectIsSecure" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9874 9905])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9889 9906])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9907 9922]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [9836 10353])
            ("libvirt_virConnectNumOfDefinedDomains" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10404 10435])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10419 10436])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10437 10452]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10355 10905])
            ("libvirt_virConnectNumOfDefinedInterfaces" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10959 10990])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10974 10991])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10992 11007]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [10907 11466])
            ("libvirt_virConnectNumOfDefinedNetworks" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11518 11549])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11533 11550])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11551 11566]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [11468 12021])
            ("libvirt_virConnectNumOfDefinedStoragePools" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12077 12108])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12092 12109])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12110 12125]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12023 12588])
            ("libvirt_virConnectNumOfDomains" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12632 12663])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12647 12664])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12665 12680]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [12590 13119])
            ("libvirt_virConnectNumOfInterfaces" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13166 13197])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13181 13198])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13199 13214]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13121 13659])
            ("libvirt_virConnectNumOfNWFilters" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13705 13736])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13720 13737])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13738 13753]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [13661 14196])
            ("libvirt_virConnectNumOfNetworks" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14241 14272])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14256 14273])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14274 14289]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14198 14730])
            ("libvirt_virConnectNumOfSecrets" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14774 14805])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14789 14806])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14807 14822]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [14732 15261])
            ("libvirt_virConnectNumOfStoragePools" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15310 15341])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15325 15342])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15343 15358]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15263 15807])
            ("libvirt_virConnectOpen" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15843 15874])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15858 15875])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15876 15891]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [15809 16247])
            ("libvirt_virConnectOpenReadOnly" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16291 16322])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16306 16323])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16324 16339]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16249 16711])
            ("libvirt_virConnectSetKeepAlive" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16755 16786])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16770 16787])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16788 16803]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [16713 17322])
            ("libvirt_virDomainAbortJob" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17361 17392])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17376 17393])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17394 17409]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17324 17847])
            ("libvirt_virDomainAddIOThread" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17889 17920])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17904 17921])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17922 17937]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [17849 18479])
            ("libvirt_virDomainAttachDevice" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18522 18553])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18537 18554])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18555 18570]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [18481 19044])
            ("libvirt_virDomainAttachDeviceFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19092 19123])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19107 19124])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19125 19140]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19046 19664])
            ("libvirt_virDomainBlockCommit" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19706 19737])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19721 19738])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19739 19754]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [19666 20363])
            ("libvirt_virDomainBlockJobAbort" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20407 20438])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20422 20439])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20440 20455]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [20365 20956])
            ("libvirt_virDomainBlockJobSetSpeed" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21003 21034])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21018 21035])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21036 21051]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [20958 21611])
            ("libvirt_virDomainBlockPull" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21651 21682])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21666 21683])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [21684 21699]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [21613 22245])
            ("libvirt_virDomainBlockRebase" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [22287 22318])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22302 22319])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [22320 22335]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [22247 22916])
            ("libvirt_virDomainBlockResize" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [22958 22989])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22973 22990])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [22991 23006]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [22918 23546])
            ("libvirt_virDomainCoreDump" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [23585 23616])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23600 23617])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [23618 23633]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [23548 24136])
            ("libvirt_virDomainCoreDumpWithFormat" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24185 24216])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24200 24217])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24218 24233]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [24138 24811])
            ("libvirt_virDomainCreate" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24848 24879])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24863 24880])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24881 24896]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [24813 25330])
            ("libvirt_virDomainCreateLinux" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25372 25403])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25387 25404])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25405 25420]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [25332 25962])
            ("libvirt_virDomainCreateWithFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26008 26039])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26023 26040])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26041 26056]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [25964 26548])
            ("libvirt_virDomainCreateXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26588 26619])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26603 26620])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26621 26636]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [26550 27174])
            ("libvirt_virDomainDefineXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27214 27245])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27229 27246])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27247 27262]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [27176 27748])
            ("libvirt_virDomainDefineXMLFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27793 27824])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27808 27825])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27826 27841]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [27750 28377])
            ("libvirt_virDomainDelIOThread" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28419 28450])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28434 28451])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28452 28467]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [28379 29009])
            ("libvirt_virDomainDestroy" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [29047 29078])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29062 29079])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [29080 29095]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [29011 29531])
            ("libvirt_virDomainDestroyFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [29574 29605])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29589 29606])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [29607 29622]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [29533 30108])
            ("libvirt_virDomainDetachDevice" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30151 30182])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30166 30183])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30184 30199]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [30110 30673])
            ("libvirt_virDomainDetachDeviceAlias" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30721 30752])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30736 30753])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30754 30769]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [30675 31299])
            ("libvirt_virDomainDetachDeviceFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [31347 31378])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31362 31379])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [31380 31395]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [31301 31919])
            ("libvirt_virDomainFSTrim" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [31956 31987])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31971 31988])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [31989 32004]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [31921 32561])
            ("libvirt_virDomainFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [32596 32627])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32611 32628])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [32629 32644]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [32563 33074])
            ("libvirt_virDomainGetHostname" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33116 33147])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33131 33148])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33149 33164]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [33076 33678])
            ("libvirt_virDomainGetID" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33714 33745])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33729 33746])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33747 33762]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [33680 34203])
            ("libvirt_virDomainGetMaxMemory" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [34246 34277])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34261 34278])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [34279 34294]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [34205 34752])
            ("libvirt_virDomainGetMaxVcpus" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [34794 34825])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34809 34826])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [34827 34842]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [34754 35286])
            ("libvirt_virDomainGetMetadata" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [35328 35359])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35343 35360])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [35361 35376]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [35288 35946])
            ("libvirt_virDomainGetName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [35984 36015])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35999 36016])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [36017 36032]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [35948 36495])
            ("libvirt_virDomainGetOSType" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [36535 36566])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36550 36567])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [36568 36583]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [36497 37053])
            ("libvirt_virDomainGetVcpusFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37097 37128])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37112 37129])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37130 37145]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [37055 37633])
            ("libvirt_virDomainGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37674 37705])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37689 37706])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37707 37722]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [37635 38234])
            ("libvirt_virDomainHasCurrentSnapshot" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38283 38314])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38298 38315])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38316 38331]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [38236 38829])
            ("libvirt_virDomainHasManagedSaveImage" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38879 38910])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38894 38911])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38912 38927]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [38831 39409])
            ("libvirt_virDomainInjectNMI" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39449 39480])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39464 39481])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39482 39497]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [39411 39977])
            ("libvirt_virDomainIsActive" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [40016 40047])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40031 40048])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [40049 40064]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [39979 40484])
            ("libvirt_virDomainIsPersistent" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [40527 40558])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40542 40559])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [40560 40575]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [40486 41003])
            ("libvirt_virDomainIsUpdated" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [41043 41074])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41058 41075])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [41076 41091]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [41005 41513])
            ("libvirt_virDomainLookupByID" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [41554 41585])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41569 41586])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [41587 41602]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [41515 42084])
            ("libvirt_virDomainLookupByName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [42127 42158])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42142 42159])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [42160 42175]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [42086 42670])
            ("libvirt_virDomainLookupByUUIDString" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [42719 42750])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42734 42751])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [42752 42767]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [42672 43283])
            ("libvirt_virDomainManagedSave" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [43325 43356])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43340 43357])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [43358 43373]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [43285 43839])
            ("libvirt_virDomainManagedSaveDefineXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [43890 43921])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43905 43922])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [43923 43938]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [43841 44471])
            ("libvirt_virDomainManagedSaveGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44523 44554])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44538 44555])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44556 44571]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [44473 45105])
            ("libvirt_virDomainManagedSaveRemove" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [45153 45184])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45168 45185])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [45186 45201]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [45107 45679])
            ("libvirt_virDomainMigrate" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [45717 45748])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45732 45749])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [45750 45765]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [45681 46517])
            ("libvirt_virDomainMigrate2" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [46556 46587])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46571 46588])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [46589 46604]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [46519 47389])
            ("libvirt_virDomainMigrateSetCompressionCache" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47446 47477])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47461 47478])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47479 47494]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [47391 48066])
            ("libvirt_virDomainMigrateSetMaxDowntime" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [48118 48149])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48133 48150])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [48151 48166]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [48068 48725])
            ("libvirt_virDomainMigrateSetMaxSpeed" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [48774 48805])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48789 48806])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [48807 48822]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [48727 49373])
            ("libvirt_virDomainMigrateStartPostCopy" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [49424 49455])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49439 49456])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [49457 49472]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [49375 49974])
            ("libvirt_virDomainMigrateToURI" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [50017 50048])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50032 50049])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [50050 50065]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [49976 50670])
            ("libvirt_virDomainMigrateToURI2" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [50714 50745])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50729 50746])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [50747 50762]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [50672 51449])
            ("libvirt_virDomainOpenChannel" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [51491 51522])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51506 51523])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [51524 51539]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [51451 52148])
            ("libvirt_virDomainOpenConsole" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52190 52221])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52205 52222])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52223 52238]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [52150 52859])
            ("libvirt_virDomainOpenGraphics" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52902 52933])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52917 52934])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52935 52950]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [52861 53474])
            ("libvirt_virDomainOpenGraphicsFD" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [53519 53550])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53534 53551])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [53552 53567]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [53476 54073])
            ("libvirt_virDomainPMSuspendForDuration" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [54124 54155])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54139 54156])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [54157 54172]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [54075 54754])
            ("libvirt_virDomainPMWakeup" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [54793 54824])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54808 54825])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [54826 54841]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [54756 55301])
            ("libvirt_virDomainReboot" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [55338 55369])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55353 55370])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [55371 55386]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [55303 55860])
            ("libvirt_virDomainRename" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [55897 55928])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55912 55929])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [55930 55945]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [55862 56444])
            ("libvirt_virDomainReset" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [56480 56511])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56495 56512])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [56513 56528]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [56446 57000])
            ("libvirt_virDomainRestore" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [57038 57069])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57053 57070])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [57071 57086]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [57002 57541])
            ("libvirt_virDomainRestoreFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [57584 57615])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57599 57616])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [57617 57632]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [57543 58168])
            ("libvirt_virDomainResume" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58205 58236])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58220 58237])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58238 58253]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [58170 58687])
            ("libvirt_virDomainSave" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58722 58753])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58737 58754])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58755 58770]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [58689 59225])
            ("libvirt_virDomainSaveFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [59265 59296])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59280 59297])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [59298 59313]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [59227 59849])
            ("libvirt_virDomainSaveImageDefineXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [59898 59929])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59913 59930])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [59931 59946]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [59851 60497])
            ("libvirt_virDomainSaveImageGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [60547 60578])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60562 60579])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [60580 60595]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [60499 61147])
            ("libvirt_virDomainScreenshot" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61188 61219])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61203 61220])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61221 61236]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [61149 61927])
            ("libvirt_virDomainSendProcessSignal" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61975 62006])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61990 62007])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [62008 62023]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [61929 62611])
            ("libvirt_virDomainSetAutostart" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [62654 62685])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62669 62686])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [62687 62702]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [62613 63191])
            ("libvirt_virDomainSetBlockThreshold" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [63239 63270])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63254 63271])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [63272 63287]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [63193 63869])
            ("libvirt_virDomainSetGuestVcpus" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [63913 63944])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63928 63945])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [63946 63961]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [63871 64517])
            ("libvirt_virDomainSetLifecycleAction" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [64566 64597])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64581 64598])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [64599 64614]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [64519 65192])
            ("libvirt_virDomainSetMaxMemory" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [65235 65266])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65250 65267])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [65268 65283]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [65194 65773])
            ("libvirt_virDomainSetMemory" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [65813 65844])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65828 65845])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [65846 65861]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [65775 66345])
            ("libvirt_virDomainSetMemoryFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [66390 66421])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66405 66422])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [66423 66438]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [66347 66972])
            ("libvirt_virDomainSetMemoryStatsPeriod" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [67023 67054])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67038 67055])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [67056 67071]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [66974 67607])
            ("libvirt_virDomainSetMetadata" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [67649 67680])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67664 67681])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [67682 67697]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [67609 68308])
            ("libvirt_virDomainSetUserPassword" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68354 68385])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68369 68386])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68387 68402]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [68310 68950])
            ("libvirt_virDomainSetVcpu" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68988 69019])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69003 69020])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [69021 69036]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [68952 69583])
            ("libvirt_virDomainSetVcpus" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [69622 69653])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69637 69654])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [69655 69670]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [69585 70151])
            ("libvirt_virDomainSetVcpusFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [70195 70226])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70210 70227])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [70228 70243]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [70153 70774])
            ("libvirt_virDomainShutdown" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [70813 70844])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70828 70845])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [70846 70861]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [70776 71299])
            ("libvirt_virDomainShutdownFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [71343 71374])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71358 71375])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [71376 71391]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [71301 71879])
            ("libvirt_virDomainSnapshotCreateXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [71927 71958])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71942 71959])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [71960 71975]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [71881 72562])
            ("libvirt_virDomainSnapshotCurrent" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [72608 72639])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72623 72640])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [72641 72656]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [72564 73199])
            ("libvirt_virDomainSnapshotDelete" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [73244 73275])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73259 73276])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [73277 73292]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [73201 73818])
            ("libvirt_virDomainSnapshotFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [73861 73892])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73876 73893])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [73894 73909]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [73820 74391])
            ("libvirt_virDomainSnapshotGetName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [74437 74468])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74452 74469])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [74470 74485]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [74393 75000])
            ("libvirt_virDomainSnapshotGetParent" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [75048 75079])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75063 75080])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [75081 75096]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [75002 75679])
            ("libvirt_virDomainSnapshotGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [75728 75759])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75743 75760])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [75761 75776]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [75681 76340])
            ("libvirt_virDomainSnapshotHasMetadata" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [76390 76421])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76405 76422])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [76423 76438]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [76342 76974])
            ("libvirt_virDomainSnapshotIsCurrent" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [77022 77053])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77037 77054])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [77055 77070]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [76976 77602])
            ("libvirt_virDomainSnapshotLookupByName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [77653 77684])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77668 77685])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [77686 77701]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [77604 78285])
            ("libvirt_virDomainSnapshotNum" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [78327 78358])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78342 78359])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [78360 78375]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [78287 78859])
            ("libvirt_virDomainSnapshotNumChildren" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [78909 78940])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78924 78941])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [78942 78957]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [78861 79493])
            ("libvirt_virDomainSuspend" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [79531 79562])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79546 79563])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [79564 79579]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [79495 80015])
            ("libvirt_virDomainUndefine" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [80054 80085])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80069 80086])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [80087 80102]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [80017 80540])
            ("libvirt_virDomainUndefineFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [80584 80615])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80599 80616])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [80617 80632]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [80542 81120])
            ("libvirt_virDomainUpdateDeviceFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [81168 81199])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81183 81200])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [81201 81216]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [81122 81740])
            ("libvirt_virEventRegisterDefaultImpl" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [81789 81820])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81804 81821])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [81822 81853])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81837 81854]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [81742 82082])
            ("libvirt_virEventRemoveHandle" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82124 82155])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82139 82156])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82157 82172]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [82084 82510])
            ("libvirt_virEventRemoveTimeout" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82553 82584])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82568 82585])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82586 82601]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [82512 82941])
            ("libvirt_virEventRunDefaultImpl" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [82985 83016])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83000 83017])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [83018 83049])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83033 83050]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [82943 83273])
            ("libvirt_virEventUpdateHandle" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [83315 83346])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83330 83347])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [83348 83363]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [83275 83654])
            ("libvirt_virEventUpdateTimeout" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [83697 83728])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83712 83729])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [83730 83745]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [83656 84041])
            ("libvirt_virGetLastErrorCode" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84082 84113])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84097 84114])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84115 84146])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84130 84147]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [84043 84367])
            ("libvirt_virGetLastErrorDomain" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84410 84441])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84425 84442])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84443 84474])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84458 84475]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [84369 84697])
            ("libvirt_virGetLastErrorMessage" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84741 84772])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84756 84773])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84774 84805])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84789 84806]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [84699 85056])
            ("libvirt_virInitialize" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85091 85122])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85106 85123])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85124 85155])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85139 85156]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [85058 85370])
            ("libvirt_virInterfaceChangeBegin" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85415 85446])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85430 85447])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85448 85463]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [85372 85944])
            ("libvirt_virInterfaceChangeCommit" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85990 86021])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86005 86022])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [86023 86038]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [85946 86521])
            ("libvirt_virInterfaceChangeRollback" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [86569 86600])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86584 86601])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [86602 86617]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [86523 87104])
            ("libvirt_virInterfaceCreate" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87144 87175])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87159 87176])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87177 87192]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [87106 87675])
            ("libvirt_virInterfaceDefineXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87718 87749])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87733 87750])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87751 87766]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [87677 88307])
            ("libvirt_virInterfaceDestroy" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [88348 88379])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88363 88380])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [88381 88396]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [88309 88881])
            ("libvirt_virInterfaceFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [88919 88950])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88934 88951])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [88952 88967]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [88883 89406])
            ("libvirt_virInterfaceGetMACString" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [89452 89483])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89467 89484])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [89485 89500]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [89408 89982])
            ("libvirt_virInterfaceGetName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90023 90054])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90038 90055])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90056 90071]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [89984 90543])
            ("libvirt_virInterfaceGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90587 90618])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90602 90619])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90620 90635]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [90545 91156])
            ("libvirt_virInterfaceIsActive" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [91198 91229])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91213 91230])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [91231 91246]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [91158 91693])
            ("libvirt_virInterfaceLookupByMACString" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [91744 91775])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91759 91776])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [91777 91792]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [91695 92318])
            ("libvirt_virInterfaceLookupByName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [92364 92395])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92379 92396])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [92397 92412]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [92320 92922])
            ("libvirt_virInterfaceUndefine" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [92964 92995])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92979 92996])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [92997 93012]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [92924 93459])
            ("libvirt_virNWFilterBindingCreateXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [93508 93539])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93523 93540])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [93541 93556]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [93461 94127])
            ("libvirt_virNWFilterBindingDelete" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94173 94204])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94188 94205])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94206 94221]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [94129 94706])
            ("libvirt_virNWFilterBindingFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94750 94781])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94765 94782])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94783 94798]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [94708 95279])
            ("libvirt_virNWFilterBindingGetFilterName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [95332 95363])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95347 95364])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [95365 95380]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [95281 95906])
            ("libvirt_virNWFilterBindingGetPortDev" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [95956 95987])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95971 95988])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [95989 96004]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [95908 96524])
            ("libvirt_virNWFilterBindingGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [96574 96605])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96589 96606])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [96607 96622]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [96526 97185])
            ("libvirt_virNWFilterBindingLookupByPortDev" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97240 97271])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97255 97272])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97273 97288]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [97187 97843])
            ("libvirt_virNWFilterDefineXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97885 97916])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97900 97917])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97918 97933]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [97845 98441])
            ("libvirt_virNWFilterFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [98478 98509])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98493 98510])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [98511 98526]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [98443 98978])
            ("libvirt_virNWFilterGetName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [99018 99049])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99033 99050])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [99051 99066]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [98980 99551])
            ("libvirt_virNWFilterGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [99594 99625])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99609 99626])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [99627 99642]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [99553 100176])
            ("libvirt_virNWFilterLookupByName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [100221 100252])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100236 100253])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [100254 100269]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [100178 100774])
            ("libvirt_virNWFilterLookupByUUIDString" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [100825 100856])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100840 100857])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [100858 100873]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [100776 101399])
            ("libvirt_virNWFilterUndefine" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [101440 101471])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101455 101472])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [101473 101488]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [101401 101948])
            ("libvirt_virNetworkCreate" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [101986 102017])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102001 102018])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [102019 102034]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [101950 102479])
            ("libvirt_virNetworkCreateXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [102520 102551])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102535 102552])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [102553 102568]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [102481 103071])
            ("libvirt_virNetworkDefineXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [103112 103143])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103127 103144])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [103145 103160]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [103073 103651])
            ("libvirt_virNetworkDestroy" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [103690 103721])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103705 103722])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [103723 103738]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [103653 104185])
            ("libvirt_virNetworkFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [104221 104252])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104236 104253])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [104254 104269]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [104187 104710])
            ("libvirt_virNetworkGetBridgeName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [104755 104786])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104770 104787])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [104788 104803]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [104712 105292])
            ("libvirt_virNetworkGetName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [105331 105362])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105346 105363])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [105364 105379]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [105294 105853])
            ("libvirt_virNetworkGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [105895 105926])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105910 105927])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [105928 105943]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [105855 106466])
            ("libvirt_virNetworkIsActive" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [106506 106537])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106521 106538])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [106539 106554]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [106468 106979])
            ("libvirt_virNetworkIsPersistent" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [107023 107054])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107038 107055])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [107056 107071]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [106981 107504])
            ("libvirt_virNetworkLookupByName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [107548 107579])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107563 107580])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [107581 107596]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [107506 108096])
            ("libvirt_virNetworkLookupByUUIDString" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [108146 108177])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108161 108178])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [108179 108194]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [108098 108715])
            ("libvirt_virNetworkSetAutostart" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [108759 108790])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108774 108791])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [108792 108807]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [108717 109307])
            ("libvirt_virNetworkUndefine" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [109347 109378])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109362 109379])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [109380 109395]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [109309 109844])
            ("libvirt_virNetworkUpdate" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [109882 109913])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109897 109914])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [109915 109930]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [109846 110584])
            ("libvirt_virNodeDeviceCreateXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [110628 110659])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110643 110660])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [110661 110676]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [110586 111234])
            ("libvirt_virNodeDeviceDestroy" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [111276 111307])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111291 111308])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [111309 111324]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [111236 111762])
            ("libvirt_virNodeDeviceDetachFlags" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [111808 111839])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111823 111840])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [111841 111856]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [111764 112391])
            ("libvirt_virNodeDeviceDettach" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [112433 112464])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112448 112465])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [112466 112481]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [112393 112919])
            ("libvirt_virNodeDeviceFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [112958 112989])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112973 112990])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [112991 113006]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [112921 113438])
            ("libvirt_virNodeDeviceGetName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [113480 113511])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113495 113512])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [113513 113528]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [113440 113993])
            ("libvirt_virNodeDeviceGetParent" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [114037 114068])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114052 114069])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [114070 114085]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [113995 114554])
            ("libvirt_virNodeDeviceGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [114599 114630])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114614 114631])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [114632 114647]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [114556 115161])
            ("libvirt_virNodeDeviceLookupByName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [115208 115239])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115223 115240])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [115241 115256]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [115163 115771])
            ("libvirt_virNodeDeviceLookupSCSIHostByWWN" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [115825 115856])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115840 115857])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [115858 115873]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [115773 116473])
            ("libvirt_virNodeDeviceNumOfCaps" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [116517 116548])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116532 116549])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [116550 116565]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [116475 117007])
            ("libvirt_virNodeDeviceReAttach" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [117050 117081])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117065 117082])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [117083 117098]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [117009 117538])
            ("libvirt_virNodeDeviceReset" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [117578 117609])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117593 117610])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [117611 117626]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [117540 118060])
            ("libvirt_virNodeGetFreeMemory" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [118102 118133])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118117 118134])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [118135 118150]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [118062 118611])
            ("libvirt_virNodeNumOfDevices" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [118652 118683])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118667 118684])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [118685 118700]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [118613 119201])
            ("libvirt_virNodeSuspendForDuration" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [119248 119279])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119263 119280])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [119281 119296]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [119203 119879])
            ("libvirt_virResetLastError" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [119918 119949])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119933 119950])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [119951 119982])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119966 119983]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [119881 120120])
            ("libvirt_virSecretDefineXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120160 120191])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120175 120192])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120193 120208]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [120122 120734])
            ("libvirt_virSecretFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120769 120800])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120784 120801])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120802 120817]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [120736 121247])
            ("libvirt_virSecretGetUsageID" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [121288 121319])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121303 121320])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [121321 121336]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [121249 121805])
            ("libvirt_virSecretGetUsageType" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [121848 121879])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121863 121880])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [121881 121896]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [121807 122342])
            ("libvirt_virSecretGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [122383 122414])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122398 122415])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [122416 122431]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [122344 122943])
            ("libvirt_virSecretLookupByUUIDString" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [122992 123023])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123007 123024])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [123025 123040]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [122945 123556])
            ("libvirt_virSecretLookupByUsage" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [123600 123631])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123615 123632])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [123633 123648]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [123558 124197])
            ("libvirt_virSecretUndefine" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [124236 124267])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124251 124268])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [124269 124284]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [124199 124722])
            ("libvirt_virStoragePoolBuild" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [124763 124794])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124778 124795])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [124796 124811]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [124724 125296])
            ("libvirt_virStoragePoolCreate" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [125338 125369])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125353 125370])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [125371 125386]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [125298 125873])
            ("libvirt_virStoragePoolCreateXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [125918 125949])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125933 125950])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [125951 125966]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [125875 126529])
            ("libvirt_virStoragePoolDefineXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [126574 126605])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126589 126606])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [126607 126622]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [126531 127173])
            ("libvirt_virStoragePoolDelete" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [127215 127246])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127230 127247])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [127248 127263]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [127175 127750])
            ("libvirt_virStoragePoolDestroy" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [127793 127824])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127808 127825])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [127826 127841]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [127752 128290])
            ("libvirt_virStoragePoolFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [128330 128361])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128345 128362])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [128363 128378]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [128292 128821])
            ("libvirt_virStoragePoolGetName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [128864 128895])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128879 128896])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [128897 128912]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [128823 129388])
            ("libvirt_virStoragePoolGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [129434 129465])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129449 129466])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [129467 129482]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [129390 130007])
            ("libvirt_virStoragePoolIsActive" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [130051 130082])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130066 130083])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [130084 130099]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [130009 130550])
            ("libvirt_virStoragePoolIsPersistent" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [130598 130629])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130613 130630])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [130631 130646]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [130552 131105])
            ("libvirt_virStoragePoolLookupByName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [131153 131184])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131168 131185])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [131186 131201]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [131107 131721])
            ("libvirt_virStoragePoolLookupByTargetPath" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [131775 131806])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131790 131807])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [131808 131823]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [131723 132355])
            ("libvirt_virStoragePoolLookupByUUIDString" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [132409 132440])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132424 132441])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [132442 132457]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [132357 132998])
            ("libvirt_virStoragePoolLookupByVolume" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [133048 133079])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133063 133080])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [133081 133096]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [133000 133592])
            ("libvirt_virStoragePoolNumOfVolumes" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [133640 133671])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [133655 133672])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [133673 133688]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [133594 134147])
            ("libvirt_virStoragePoolRefresh" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [134190 134221])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134205 134222])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [134223 134238]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [134149 134727])
            ("libvirt_virStoragePoolSetAutostart" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [134775 134806])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134790 134807])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [134808 134823]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [134729 135325])
            ("libvirt_virStoragePoolUndefine" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [135369 135400])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135384 135401])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [135402 135417]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [135327 135868])
            ("libvirt_virStorageVolCreateXML" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [135912 135943])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135927 135944])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [135945 135960]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [135870 136530])
            ("libvirt_virStorageVolCreateXMLFrom" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [136578 136609])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136593 136610])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [136611 136626]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [136532 137364])
            ("libvirt_virStorageVolDelete" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [137405 137436])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137420 137437])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [137438 137453]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [137366 137929])
            ("libvirt_virStorageVolDownload" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [137972 138003])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137987 138004])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [138005 138020]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [137931 138734])
            ("libvirt_virStorageVolFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [138773 138804])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [138788 138805])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [138806 138821]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [138736 139253])
            ("libvirt_virStorageVolGetKey" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [139294 139325])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139309 139326])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [139327 139342]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [139255 139805])
            ("libvirt_virStorageVolGetName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [139847 139878])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139862 139879])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [139880 139895]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [139807 140360])
            ("libvirt_virStorageVolGetPath" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [140402 140433])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140417 140434])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [140435 140450]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [140362 140918])
            ("libvirt_virStorageVolGetXMLDesc" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [140963 140994])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140978 140995])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [140996 141011]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [140920 141525])
            ("libvirt_virStorageVolLookupByKey" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [141571 141602])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141586 141603])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [141604 141619]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [141527 142129])
            ("libvirt_virStorageVolLookupByName" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [142176 142207])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142191 142208])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [142209 142224]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [142131 142751])
            ("libvirt_virStorageVolLookupByPath" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [142798 142829])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142813 142830])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [142831 142846]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [142753 143361])
            ("libvirt_virStorageVolResize" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [143402 143433])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [143417 143434])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [143435 143450]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [143363 143981])
            ("libvirt_virStorageVolUpload" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [144022 144053])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [144037 144054])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [144055 144070]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [143983 144780])
            ("libvirt_virStorageVolWipe" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [144819 144850])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [144834 144851])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [144852 144867]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [144782 145339])
            ("libvirt_virStorageVolWipePattern" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [145385 145416])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [145400 145417])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [145418 145433]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [145341 145971])
            ("libvirt_virStreamAbort" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [146007 146038])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146022 146039])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [146040 146055]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [145973 146487])
            ("libvirt_virStreamEventRemoveCallback" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [146537 146568])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [146552 146569])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [146570 146585]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [146489 147045])
            ("libvirt_virStreamEventUpdateCallback" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [147095 147126])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147110 147127])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [147128 147143]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [147047 147637])
            ("libvirt_virStreamFinish" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [147674 147705])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147689 147706])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [147707 147722]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [147639 148156])
            ("libvirt_virStreamFree" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [148191 148222])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148206 148223])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [148224 148239]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [148158 148669])
            ("libvirt_virStreamNew" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [148703 148734])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148718 148735])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [148736 148751]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [148671 149237])
            ("libvirt_virDomain_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [149276 149307])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149291 149308])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [149309 149324]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [149239 149576])
            ("libvirt_virNetwork_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [149616 149647])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149631 149648])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [149649 149664]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [149578 149919])
            ("libvirt_virNetworkPort_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [149963 149994])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149978 149995])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [149996 150011]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [149921 150278])
            ("libvirt_virInterface_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [150320 150351])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150335 150352])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [150353 150368]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [150280 150629])
            ("libvirt_virStoragePool_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [150673 150704])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150688 150705])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [150706 150721]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [150631 150988])
            ("libvirt_virStorageVol_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [151031 151062])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151046 151063])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [151064 151079]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [150990 151343])
            ("libvirt_virConnect_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [151383 151414])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151398 151415])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [151416 151431]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [151345 151686])
            ("libvirt_virNodeDevice_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [151729 151760])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151744 151761])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [151762 151777]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [151688 152041])
            ("libvirt_virSecret_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [152080 152111])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152095 152112])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [152113 152128]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [152043 152380])
            ("libvirt_virNWFilter_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [152421 152452])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152436 152453])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [152454 152469]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [152382 152727])
            ("libvirt_virNWFilterBinding_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [152775 152806])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152790 152807])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [152808 152823]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [152729 153102])
            ("libvirt_virStream_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [153141 153172])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [153156 153173])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [153174 153189]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [153104 153441])
            ("libvirt_virDomainCheckpoint_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [153490 153521])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [153505 153522])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [153523 153538]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [153443 153820])
            ("libvirt_virDomainSnapshot_pointer" function
               (:pointer 1
                :arguments 
                  ( ("self" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [153867 153898])
                    ("" variable (:type ("ATTRIBUTE_UNUSED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [153882 153899])
                    ("args" variable
                       (:pointer 1
                        :type ("PyObject" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [153900 153915]))                  
                :type ("PyObject" type (:type "class") nil nil))
                nil [153822 154191]))          
      :file "libvirt.c"
      :pointmax 154193
      :fsize 154192
      :lastmodtime '(23903 54665 276000 0)
      :unmatched-syntax nil))
  :file "!root!libvirt-python-5.6.0!build!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
