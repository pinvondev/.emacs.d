;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
虚拟设备实现
\"\"\"" code nil nil [1 15])
            ("__future__" include nil nil [17 55])
            ("__future__" include nil nil [56 87])
            ("copy" include nil nil [89 100])
            ("urllib.parse" include nil nil [101 134])
            ("rccpxuanyuan.common" include nil nil [136 176])
            ("rccpxuanyuan.common" include nil nil [177 212])
            ("rccpxuanyuan.common" include nil nil [213 253])
            ("rccpxuanyuan.common.exception" include nil nil [254 318])
            ("rccpxuanyuan.common.exception" include nil nil [319 387])
            ("rccpxuanyuan.common.exception" include nil nil [388 450])
            ("rccpxuanyuan.common.exception" include nil nil [451 514])
            ("rccpxuanyuan.common.exception" include nil nil [515 573])
            ("rccpxuanyuan.virt.vmdevices.posdriver" include nil nil [574 687])
            ("ClearVHostSCSIControllerFailed" variable nil nil [690 732])
            ("POSDriverException" type
               (:documentation "虚拟访问层异常"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [801 809])
                    ("message" variable nil (reparse-symbol indented_block_body) [814 858]))                  
                :type "class")
                nil [735 859])
            ("VMCPUNumberError" type
               (:documentation "VCPU 数量不合法"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [928 936]))                  
                :type "class")
                nil [861 937])
            ("VMMemorySizeError" type
               (:documentation "虚机内存大小不合法"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [1006 1014]))                  
                :type "class")
                nil [939 1015])
            ("VMOSConfigError" type
               (:documentation "虚机系统模型配置不合法"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [1084 1092]))                  
                :type "class")
                nil [1017 1093])
            ("VMInterfaceConfigError" type
               (:documentation "虚拟网卡配置错误"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [1166 1174]))                  
                :type "class")
                nil [1095 1175])
            ("VMCDROMConfigureError" type
               (:documentation "CDROM 配置错误"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [1249 1257]))                  
                :type "class")
                nil [1177 1258])
            ("_DISK_NAMESPACE" variable nil nil [1260 1322])
            ("configure_domain" function (:arguments 
              ( ("conf" variable nil (reparse-symbol function_parameters) [1346 1350])
                ("domain" variable nil (reparse-symbol function_parameters) [1352 1358]))              ) nil [1325 1592])
            ("Base" type
               (:documentation "
    虚拟设备基类
    职责：
        1. 声明虚拟设备公共接口和成员变量，支持上层使用
    约定：
        1. 在继承Base后，虚拟设备需要设置设备自身的别名，别名是指上层模型和
           libvirt模型中设备的名字，比如CPU设备对应别名有(\"cpu\", \"vcpu\")。设置别
           名后，上层可以通过别名查找对应设备类。
    "
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [1824 1839])
                    ("_CONF" variable nil (reparse-symbol indented_block_body) [1845 1855])
                    ("_DEV_GROUP_XML" variable nil (reparse-symbol indented_block_body) [1861 1880])
                    ("set_default_conf" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置其中默认参数。
        职责：
            1. 检查设备配置组合法性；
            2. 根据上层设备配置设置改配置缺省字段；
            3. 提取公共参数
        参数 conf：上层设备配置；
        类型：泛型根据具体设备类约定入参类型；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1924 1927])
                            ("conf" variable nil (reparse-symbol function_parameters) [1929 1933]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1886 2140])
                    ("get_mutex_resource" function
                       (:documentation "
        定义：根据虚拟设备配置，获取设备多线程互斥资源。
        职责：
            1. 根据上层设备配置返回设备互斥资源标识。
        参数 conf：上层设备配置；
        类型：泛型根据具体设备类约定入参类型；
        返回值：设备互斥资源标识组合。
        类型：字符串列表；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2186 2189])
                            ("conf" variable nil (reparse-symbol function_parameters) [2191 2195]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2146 2415])
                    ("set_dev_group_xml" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置设备组总线/公共配置。
        职责：
            1. 根据上层一组设备配置，设置对应底层设备libvirt配置；
        参数 conf_group：同set_default_conf接口描述；
        类型：列表；
        参数 par_dev_dom：设置一组同类设备；
        类型：xml.etree.ElementTree对象；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2459 2462])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [2464 2474])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [2476 2487]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2420 2737])
                    ("set_xml" function
                       (:documentation "
        定义：单一虚拟设备配置翻译接口。
        职责：
            1. 翻译上层设备模型配置为libvirt XML对象；
            2. 设置设备libvirt XML缺省参数；
        参数 conf：上层单一设备模型配置；
        类型：字典{}；
        参数 dev_dom：底层设备libvirt参数；
        类型：xml.etree.ElementTree；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2771 2774])
                            ("conf" variable nil (reparse-symbol function_parameters) [2776 2780])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [2782 2789]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2742 3043])
                    ("setup_dev_group" function
                       (:documentation "
        定义：一组虚拟设备安装接口。
        职责：
            1. 完成一组虚拟设备依赖的环境配置。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数 conf_group：同set_default_conf接口描述；
        类型：列表；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3085 3088])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [3090 3100]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3048 3298])
                    ("setup" function
                       (:documentation "
        定义：单一虚拟设备安装接口。
        职责：
            1. 完成虚拟设备依赖的环境配置。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3330 3333])
                            ("conf" variable nil (reparse-symbol function_parameters) [3335 3339]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3303 3498])
                    ("teardown" function
                       (:documentation "
        定义：单一虚拟设备卸载接口。
        职责：
            1. 完成虚拟设备依赖的环境清理。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3533 3536])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [3538 3545]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3503 3660]))                  
                :type "class")
                nil [1594 3660])
            ("CPU" type
               (:documentation "虚拟CPU"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [3700 3728])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [3733 3745])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [3750 3768])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3812 3815])
                            ("conf" variable nil (reparse-symbol function_parameters) [3817 3821]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3774 4139])
                    ("set_xml" function
                       (:documentation "
        将 vcpu 配置参数转换成 xml
        @cpu_conf: dict, required
        @dev_dom: xml.etree.Element, optional
        根据 conf 查找 default 对应的值是否存在, 若不存在, 则 append
                                                 若存在, 则 update
        eg.
        dev_dom: </default>
        vcpu_conf: {\"cpu\": 4}
        @ret: <vcpu>4</vcpu>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4173 4176])
                            ("vcpu_conf" variable nil (reparse-symbol function_parameters) [4178 4187])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [4189 4196]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4144 4665]))                  
                :type "class")
                nil [3662 4665])
            ("Memory" type
               (:documentation "虚拟内存"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [4707 4731])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [4736 4751])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [4756 4776])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4820 4823])
                            ("conf" variable nil (reparse-symbol function_parameters) [4825 4829]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4782 5169])
                    ("set_xml" function
                       (:documentation "
        将虚拟内存配置参数转换成 xml
        @mem: dict, required

        eg.
        mem_conf: {\"memory\": 4096}
        dev_dom: <default />
        @ret: <memory unit=\"KiB\">4096</memory>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5203 5206])
                            ("mem_conf" variable nil (reparse-symbol function_parameters) [5208 5216])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [5218 5225]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5174 5581]))                  
                :type "class")
                nil [4667 5581])
            ("OS" type
               (:documentation "虚机系统"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [5619 5650])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [5655 5672])
                    ("_TAG" variable nil (reparse-symbol indented_block_body) [5677 5688])
                    ("\"\"\"
<os>
    <type arch=\"x86_64\" machine=\"pc-i440fx-2.11\">hvm</type>
    <boot dev='$boot_dev' />
</os>
\"\"\"" code nil (reparse-symbol indented_block_body) [5709 5816])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        @ret: dict
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5860 5863])
                            ("conf" variable nil (reparse-symbol function_parameters) [5865 5869]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5822 6270])
                    ("set_xml" function
                       (:documentation "虚拟机系统模型配置参数转换成 xml
        @boot_conf: dict, required
        引导设备可选值有 cdrom 和 hd, 默认为 hd

        eg.
        boot_conf: {\"boot_dev\": \"hd/cdrom\"}
        dev_dom: <domain />
        @ret: <os>
                <type arch='x86_64' machine='pc-0.14'>hvm</type>
                <boot dev=\"hd\">
              </os>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6304 6307])
                            ("boot_conf" variable nil (reparse-symbol function_parameters) [6309 6318])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [6320 6327]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6275 6799]))                  
                :type "class")
                nil [5583 6799])
            ("Interface" type
               (:documentation "虚拟网卡
    <interface type='bridge'>
      <source bridge=$src_br/>
      <virtualport type='openvswitch'>
        <parameters profileid='menial' interface_id=$interface_id/>
      </virtualport>
      <alias name=\"$dev_id\"/>
    </interface>
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [7497 7524])
                    ("\"\"\"
<interface type='bridge'>
    <source bridge='$src_br'/>
    <virtualport type='openvswitch'>
        <parameters profileid='menial' interface_id='$interface_id'/>
    </virtualport>
    <alias name='$dev_id'/>
</interface>
\"\"\"" code nil (reparse-symbol indented_block_body) [7552 7783])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: list, required, list 中每个元素为 dict
        @ret: list
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7827 7830])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [7832 7842]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7789 8325])
                    ("set_xml" function
                       (:documentation "虚拟网卡设备配置参数转换成 xml
        @conf: dict, required.
        @dev_dom: xml.etree.Element, optional

        eg.
        conf: {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx}
        dev_dom: <Interface />
        @ret:
        <Interface type=\"bridge\">
            <source bridge=xxx />
            <virtualport type=\"openvswitch\">
                <parameters interface_id=xxx profileid=\"menial\" />
            </virtualport>
            <alias name=xxx />
        </Interface>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8359 8362])
                            ("conf" variable nil (reparse-symbol function_parameters) [8364 8368])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [8370 8377]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8330 9039])
                    ("set_dev_group_xml" function
                       (:documentation "批量转换虚拟网卡 conf 为 xml
        @conf_group: list, 每个元素为 dict, 对应一个网卡设备
        @dev_dom: xml.etree.Element

        eg.
        conf_group: [
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
        ]
        par_dev_dom:
            <domain>
              <devices />
            <domain/>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9726 9729])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [9731 9741])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [9743 9754]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9687 10357]))                  
                :type "class")
                nil [7213 10357])
            ("CDROM" type
               (:documentation "虚拟光驱"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [10440 10463])
                    ("_FTP_PORT" variable nil (reparse-symbol indented_block_body) [10468 10482])
                    ("_SFTP_PORT" variable nil (reparse-symbol indented_block_body) [10487 10502])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source file='$file_path' />
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <alias name='$dev_id' />
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [10532 10746])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source name='$file_path' protocol='$protocol'>
        <host name='$name' port='$port' />
    </source>
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <alias name='$dev_id' />
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [10777 11067])
                    ("set_default_conf" function
                       (:documentation "检查单项配置的合法性, 填充默认值
        @conf_group: dict, required

        若是 boot 设备, 则从 hda 开始编号
        否则, 从 hde 往前编号
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11111 11114])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [11116 11126]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11073 12535])
                    ("set_xml" function
                       (:documentation "虚拟光驱设备配置参数转换成 xml
        @cdrom_conf: dict, required
        @dev_dom: rccpxuanyuan.virt.vmxml.Element, optional

        1. 若 key-value 形式为 str-list, 则将 domain 这个节点传给 dev_dom,
           上层不去区分是什么设备
        2. 若 key-value 形式为 str-str, 则将当前节点传进来
        3. 根据 conf, 查找 dev_dom 中对应节点和值是否存在
           若不存在, 则 append
           若存在, 则 update
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12569 12572])
                            ("cdrom_conf" variable nil (reparse-symbol function_parameters) [12574 12584])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [12586 12593]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12540 13521])
                    ("_parse_local_filepath" function
                       (:documentation "返回本地文件路径, eg:
        /test/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13569 13572])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [13574 13585]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13526 13701])
                    ("_parse_remote_filepath" function
                       (:documentation "解析远程光驱设备路径
        standard:
        ftp://[user ID:password@]<host name>[:port]/[path name/]

        ftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        sftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13750 13753])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [13755 13766]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13706 14742])
                    ("set_dev_group_xml" function
                       (:documentation "批量虚拟设备统一处理接口
        获取 domxml, 根据 domxml 的信息完善 conf
        @conf: list, required
        @domxml: xml.etree.ElementTree.Element, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14786 14789])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [14791 14801])
                            ("domxml" variable nil (reparse-symbol function_parameters) [14803 14809]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14747 15219])
                    ("_is_local_iso" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15267 15270])
                            ("file_path" variable nil (reparse-symbol function_parameters) [15272 15281]))                          )
                        (reparse-symbol indented_block_body) [15232 15364]))                  
                :type "class")
                nil [10401 15364])
            ("Disk" type
               (:documentation "
    virtual disk model
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [15428 15521])
                    ("_CONF" variable nil (reparse-symbol indented_block_body) [15527 15730])
                    ("_set_booter" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("conf_group" variable nil (reparse-symbol function_parameters) [16145 16155]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16111 16590])
                    ("_set_vdiskid" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("conf_group" variable nil (reparse-symbol function_parameters) [16630 16640]))                          
                        :documentation "
        conf = {
            \"disk_path\": \"1/2\"}
        parse conf = {
            \"vdisk_id\": \"1\",
            \"volume_id\": \"2\",
            \"vdisk_value\": \"socket,id=spdk_vhost_scsi, path=/usr/vdisk/1\"}
        ")
                        (reparse-symbol indented_block_body) [16595 17423])
                    ("" code nil (reparse-symbol indented_block_body) [17459 17517])
                    ("" code nil (reparse-symbol indented_block_body) [17539 17587])
                    ("set_default_conf" function
                       (:documentation "
        定义：根据上层硬盘设备配置组参数，设置其中默认参数lun_id, vdisk_id,
              vdisk_value, volume_id。
        职责：
            1. 检查设备配置组合法性，主要检查所有虚拟硬盘使用相同的vdisk_id；
            2. 根据设备配置组字段设置默认配置,
                主要解析disk_path和boot字段，设置vdisk_id,
                vdisk_value, volume_id, lun_id
            3. 提取公共参数
        参数 conf_group：上层设备配置组；
        类型：列表；
        示例：[
            {
                \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                \"disk_path\": \"1/2\",
                \"boot\": True,
            }
        ]
        设置后：[
            {
                \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                \"disk_path\": \"1/2\",
                \"boot\": True,
                \"vdisk_id\": \"1\",
                \"volume_id\": \"2\",
                \"vdisk_value\": \"socket,id=spdk_vhost_scsi, path=/usr/vdisk/1\"}
                \"lun_id\": 0,
            }
        ]
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17613 17616])
                            ("conf" variable nil (reparse-symbol function_parameters) [17618 17622]))                          )
                        (reparse-symbol indented_block_body) [17592 18627])
                    ("" code nil (reparse-symbol indented_block_body) [18667 18705])
                    ("get_mutex_resource" function
                       (:documentation "
        定义：根据虚拟硬盘配置，获取虚拟硬盘VDisk互斥资源。
        职责：
            1. 根据上层虚拟硬盘配置返回虚拟硬盘试用VDisk标识。
        参数 conf：同set_default_conf中conf_group；
        返回值：虚拟硬盘互斥资源vdisk_id；
        类型：字符串列表；
        "
                        :arguments 
                          ( ("conf" variable nil (reparse-symbol function_parameters) [18733 18737]))                          )
                        (reparse-symbol indented_block_body) [18710 18986])
                    ("" code nil (reparse-symbol indented_block_body) [19025 19071])
                    ("set_dev_group_xml" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置设备组总线/公共配置。
        职责：
            1. 根据设备配置组参数，设置设备组总线/公共配置；
        参数 conf_group：上层设备配置组；
        类型：列表；
        参数 dev_dom：想要设置的设备domain对象；
        类型：xml.etree.ElementTree对象；
        示例：
        <domain>
        </domain>
        设置后：
        <domain xmlns:qemu=\"http://libvirt.org/schemas/domain/qemu/1.0\">
          <qemu:commandline>
            <qemu:arg value='-chardev'/>
            <qemu:arg value='$vdisk_value'/>
            <qemu:arg value='-device'/>
            <qemu:arg value='vhost-user-scsi-pci,id=scsi,
                             chardev=spdk_vhost_scsi,num_queues=1'/>
            <qemu:evn vdisk_id=\"$vdisk_id\"/>
          </qemu:commandline>
        </domain>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19098 19101])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [19103 19113])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [19115 19126]))                          )
                        (reparse-symbol indented_block_body) [19076 20050])
                    ("" code nil (reparse-symbol indented_block_body) [20087 20119])
                    ("" code nil (reparse-symbol indented_block_body) [20140 20169])
                    ("_remove_vhostscsilun" function
                       (:documentation "
        定义：封装POSDriver移除lun接口
        职责：
            1. 执行POSDriver.remove_vhostscsilun接口
            1. 封装POSDriver.remove_vhostscsilun异常，VDisk接口允许移除lun失败
        "
                        :arguments 
                          ( ("vdisk_id" variable nil (reparse-symbol function_parameters) [20199 20207]))                          )
                        (reparse-symbol indented_block_body) [20174 20439])
                    ("" code nil (reparse-symbol indented_block_body) [20475 20507])
                    ("" code nil (reparse-symbol indented_block_body) [20529 20571])
                    ("setup_dev_group" function
                       (:documentation "
        定义：虚拟一组硬盘安装接口。
        职责：
            1. 完成虚拟所有硬盘的环境依赖。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数参考set_xml接口。
        注意：
            本接口非多线程安全，vhostscsicontroller的配置会被弄脏
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20596 20599])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [20601 20611]))                          )
                        (reparse-symbol indented_block_body) [20576 21241])
                    ("" code nil (reparse-symbol indented_block_body) [21277 21309])
                    ("" code nil (reparse-symbol indented_block_body) [21330 21362])
                    ("" code nil (reparse-symbol indented_block_body) [21384 21428])
                    ("teardown" function
                       (:documentation "
        定义：虚拟硬盘卸载接口。
        职责：
            1. 完成虚拟硬盘依赖的环境清理。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [21446 21449])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [21451 21458]))                          )
                        (reparse-symbol indented_block_body) [21433 21825]))                  
                :type "class")
                nil [15366 21825])
            ("Graphics" type
               (:documentation "暂时使用默认 XML"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [21875 21901])
                    ("\"\"\"
<graphics type=\"spice\" autoport=\"yes\" listen=\"0.0.0.0\" defaultMode=\"insecure\" passwd=\"\"
    <listen address=\"0.0.0.0\" type=\"address\" />
</graphics>
<video>
    <model type=\"qxl\" />
</video>
\"\"\"" code nil (reparse-symbol indented_block_body) [21928 22125])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        @ret: dict
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22168 22171])
                            ("conf" variable nil (reparse-symbol function_parameters) [22173 22177]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22130 22293])
                    ("set_xml" function
                       (:documentation "图形界面 xml 配置
        @graphics_conf: dict, required
        @ret:
        <graphics type=\"spice\" autoport=\"yes\" listen=\"0.0.0.0\" defaultMode=\"insecure\" passwd=\"\"
          <listen address=\"0.0.0.0\" type=\"address\" />
        </graphics>
        <video>
          <model type=\"qxl\" />
        </video>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22327 22330])
                            ("graphics_conf" variable nil (reparse-symbol function_parameters) [22332 22345])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [22347 22354]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22298 22842]))                  
                :type "class")
                nil [21827 22842]))          
      :file "core.py"
      :pointmax 22842
      :fsize 25733
      :lastmodtime '(23935 18195 381696 261000)
      :unmatched-syntax '((NEWLINE 16105 . 16106) (RPAREN 16104 . 16105) (NAME 15736 . 15750) (DEDENT 15755 . 15755) (STRING_LITERAL 15755 . 16081) (LPAREN 16088 . 16089)))
    (semanticdb-table "semanticdb-table"
      :file "posdriver.py"
      :fsize 6244
      :lastmodtime '(23935 18195 397696 549000)))
  :file "!root!spec-bak!vmdevicesbak!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
