;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
虚拟机模型
\"\"\"" code nil nil [1 14])
            ("threading" include nil nil [16 32])
            ("rccpxuanyuan.common" include nil nil [34 69])
            ("rccpxuanyuan.common" include nil nil [70 110])
            ("rccpxuanyuan.common" include nil nil [111 152])
            ("rccpxuanyuan.common.cache" include nil nil [153 204])
            ("rccpxuanyuan.common" include nil nil [205 246])
            ("rccpxuanyuan.virt" include nil nil [248 287])
            ("rccpxuanyuan.virt.libvirt" include nil nil [288 333])
            ("rccpxuanyuan.virt.vmdevices" include nil nil [334 383])
            ("rccpxuanyuan.virt" include nil nil [384 432])
            ("DEF_DESCRIPTION" variable nil nil [435 461])
            ("DESCRIPTION" variable nil nil [464 486])
            ("DESTROY" variable nil nil [487 506])
            ("REBOOT" variable nil nil [507 524])
            ("VM" type
               (:documentation "
    虚拟机模型
    "
                :members 
                  ( ("_CONF" variable nil (reparse-symbol indented_block_body) [568 670])
                    ("\"\"\"
<domain type='kvm'>
  <name>$name</name>
  <uuid>$vm_id</uuid>
  <description>$description</description>
  <memoryBacking>
    <hugepages/>
    <source type=\"file\"/>
    <access mode=\"shared\"/>
  </memoryBacking>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <cpu>
    <topology sockets='1' cores='2' threads='1'/>
    <numa>
      <cell id='0' cpus='0-1' memory='2' unit='G'/>
    </numa>
  </cpu>
  <devices>
    <input type=\"tablet\" bus=\"usb\"/>
    <graphics type='vnc' port='-1' passwd='123456'>
      <listen type='address' address='0.0.0.0'/>
    </graphics>
  </devices>
</domain>\"\"\"" code nil (reparse-symbol indented_block_body) [688 1300])
                    ("create" function
                       (:documentation "
        定义：虚拟机创建启动接口
        参数 conf:虚拟机上层模型参数
        类型： 字典
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1334 1337])
                            ("conf" variable nil (reparse-symbol function_parameters) [1339 1343]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1306 1873])
                    ("" code nil (reparse-symbol indented_block_body) [1927 2024])
                    ("_set_default_conf" function
                       (:documentation "
        定义：检查并设置默认配置
        "
                        :arguments 
                          ( ("conf" variable nil (reparse-symbol function_parameters) [2051 2055]))                          )
                        (reparse-symbol indented_block_body) [2029 2277])
                    ("_set_vm" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2311 2314])
                            ("conf" variable nil (reparse-symbol function_parameters) [2316 2320])
                            ("vm_dom" variable nil (reparse-symbol function_parameters) [2322 2328])
                            ("mutex_resource" variable nil (reparse-symbol function_parameters) [2330 2344]))                          )
                        (reparse-symbol indented_block_body) [2282 2451])
                    ("_get_mutex_resource" function
                       (:documentation "
        get virtual machine mutex resource info
        :param conf:虚拟机上次配置
        :type dict
        :return: mutex resource list
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2497 2500])
                            ("conf" variable nil (reparse-symbol function_parameters) [2502 2506]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2456 2697])
                    ("" code nil (reparse-symbol indented_block_body) [2750 2795])
                    ("_lock_resource" function
                       (:documentation "
        get lock for mutex_resource
        :param mutex_resource:
        :type list
        :return: lock
        :type thread.Lock
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2819 2822])
                            ("mutex_resource" variable nil (reparse-symbol function_parameters) [2824 2838]))                          )
                        (reparse-symbol indented_block_body) [2800 3117])
                    ("" code nil (reparse-symbol indented_block_body) [3155 3166])
                    ("_release_resource" function
                       (:documentation "
        get lock for mutex_resource
        :param mutex_resource:
        :type list
        :return: lock
        :type thread.Lock
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3193 3196])
                            ("mutex_resource" variable nil (reparse-symbol function_parameters) [3198 3212]))                          )
                        (reparse-symbol indented_block_body) [3171 3502])
                    ("_set_devices" function
                       (:documentation "
        根据conf参数将设备的dom和mutex_resource设置到vm_dom和上层mutex_resource
        :param conf: 虚拟机上层模型配置
        :type dict
        :param vm_dom: 虚拟机libvirt xml domain
        :type Element
        :param mutex_resource: 虚拟设备互斥资源列表
        :type list
        :return:
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3541 3544])
                            ("conf" variable nil (reparse-symbol function_parameters) [3546 3550])
                            ("vm_dom" variable nil (reparse-symbol function_parameters) [3552 3558])
                            ("mutex_resource" variable nil (reparse-symbol function_parameters) [3560 3574]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3507 4455])
                    ("_set_device_domain" function
                       (:documentation "
        定义：组装虚拟设备domain
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4500 4503])
                            ("conf" variable nil (reparse-symbol function_parameters) [4505 4509])
                            ("device" variable nil (reparse-symbol function_parameters) [4511 4517])
                            ("vm_dom" variable nil (reparse-symbol function_parameters) [4519 4525]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4460 4815])
                    ("_is_device_group" function
                       (:documentation "
        定义：判断设备配置参数对应设备是否为一组设备参数
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4858 4861])
                            ("dev_conf" variable nil (reparse-symbol function_parameters) [4863 4871]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4820 4974])
                    ("_install_devices" function
                       (:documentation "
        定义：配置虚拟设备允许环境
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5017 5020])
                            ("conf" variable nil (reparse-symbol function_parameters) [5022 5026]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4979 5445])
                    ("_start" function
                       (:documentation "
        定义：libvirt虚拟机创建启动接口
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5478 5481])
                            ("vm_dom" variable nil (reparse-symbol function_parameters) [5483 5489]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5450 5623])
                    ("shutdown" function
                       (:documentation "虚机关闭, 虚机断电, 虚机重启
        @vm_id: string, required
        @flags: str, optional, reboot: 重启, shutdown: 关闭, destroy: 断电
        职责:
        1. 获取指定虚机的 libvirt 参数(Libvirt.get_vm_xml())
        2. 执行虚机关闭/断电/重启命令(VM._shutdown())
        3. 等待虚机关闭/重启
        4. 卸载虚拟设备(VM._uninstall_devices())
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5658 5661])
                            ("vm_id" variable nil (reparse-symbol function_parameters) [5663 5668])
                            ("flags" variable nil (reparse-symbol function_parameters) [5670 5675]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5628 6203])
                    ("_shutdown" function
                       (:documentation "虚机关闭接口
        @vm_id: string, required
        @flags: int, required
        调用:
        1. 关闭: Libvirt.shutdown_vm()
        2. 断电: Libvirt.destroy_vm()
        3. 重启: Libvirt.reboot()
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6239 6242])
                            ("vm_id" variable nil (reparse-symbol function_parameters) [6244 6249])
                            ("flags" variable nil (reparse-symbol function_parameters) [6251 6256]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6208 6657])
                    ("_uninstall_device" function
                       (:documentation "卸载单个虚拟设备"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6701 6704])
                            ("device_name" variable nil (reparse-symbol function_parameters) [6706 6717])
                            ("device_xml" variable nil (reparse-symbol function_parameters) [6719 6729]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6662 6933])
                    ("_uninstall_devices" function
                       (:documentation "卸载虚拟设备
        根据获取的虚机 xml 查找虚拟设备并卸载
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6978 6981])
                            ("vm_xml" variable nil (reparse-symbol function_parameters) [6983 6989]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6938 7767]))                  
                :type "class")
                nil [527 7767]))          
      :file "vm.py"
      :pointmax 7767
      :fsize 8272
      :lastmodtime '(23944 48984 581343 468000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
virt模块接口
\"\"\"" code nil nil [1 17])
            ("rccpxuanyuan.virt.libvirt" include nil nil [19 64])
            ("rccpxuanyuan.virt.vm" include nil nil [65 100])
            ("rccpxuanyuan.virt.vmdevices" include nil nil [101 150])
            ("rccpxuanyuan.common" include nil nil [151 191])
            ("rccpxuanyuan.common.exception" include nil nil [192 250])
            ("VirtException" type
               (:documentation "虚拟访问层异常"
                :superclasses ("ContextException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [315 359]))                  
                :type "class")
                nil [253 360])
            ("VirtUpdateException" type
               (:documentation "更新设备异常"
                :superclasses ("VirtException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [426 465]))                  
                :type "class")
                nil [362 466])
            ("Virt" type
               (:documentation "
    定义：主机资源管理子系统虚拟化功能模块接口类
    职责：
        1. 声明虚拟化功能接口
        2. 封装底层实现类接口
    "
                :members 
                  ( ("create_vm" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("conf" variable nil (reparse-symbol function_parameters) [610 614]))                          
                        :documentation "
        定义：创建并启动虚拟机接口
        参数 conf：虚拟机上层配置
        类型：字段
        参考值：
            {
                \"vm_id\": \"ua-09b11c53-8b5c-4eeb-8f00-d84eaa0aaa4f\", # 虚拟机唯一标识
                \"name\": \"vm-001\", # 虚拟机名
                \"cpu\": 4, #  单核单线程CPU数量
                \"memory\": 409640964096, # 内存容量
                \"boot_dev\": \"hd/cdrom\", # 引导设备
                \"cdrom\": [ # 光驱列表
                    {
                        # 光驱设备标识
                        \"dev_id\": \"ua-09b11c53-8b5c-4eeb-8f00-d84eaa0aaa4f\",
                        # 光驱设备全路径支持ftp/sftp协议路径
                        \"file_path\": \"\",
                        \"boot\": True, # 是否可作为引导设备
                    }
                ],
                \"interface\": [ # 网卡设备列表
                    {
                        # 网卡设备标识
                        \"dev_id\": \"ua-09b11c53-8b5c-4eeb-8f00-d84eaa0aaa4f\",
                        \"interface_id\":
                        \"09b11c53-8b5c-4eeb-8f00-d84eaa0aaa4f\" # OVS端口标识
                    }
                ],
                \"disk\": [ # 硬盘列表
                    {
                        # 硬盘设备标识
                        \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                        \"disk_path\": \"vdisk_id/volume\",
                        \"boot\": True, # 是否可作为引导设备
                    }
                ]
            }
        ")
                        (reparse-symbol indented_block_body) [578 2000])
                    ("shutdown" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("vm_id" variable nil (reparse-symbol function_parameters) [2036 2041])
                            ("flags" variable nil (reparse-symbol function_parameters) [2043 2048]))                          
                        :documentation "调用 VM.shutdown() 关闭/断电/重启虚机
        @vm_id: string, required
        @flags: string, reboot, shutdown, destroy, 分别对应
                (重启, 关闭, 断电)三个功能
        ")
                        (reparse-symbol indented_block_body) [2005 2258])
                    ("update_device" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("vm_id" variable nil (reparse-symbol function_parameters) [2299 2304])
                            ("params" variable nil (reparse-symbol function_parameters) [2306 2312]))                          
                        :documentation "修改虚拟设备接口
        @vm_id: string, required
        @dev_id: string, required
        @params: dict, required

        流程:
        1. Libvirt.get_vm_xml() 获取 domain xml
        2. DeviceMap.get_devices_cls() 获取设备类
        2. VMDevice.update_xml() 获取更新后的设备 xml
        3. Libvirt.update_devices() 在线更新虚机设备
        ")
                        (reparse-symbol indented_block_body) [2263 3237])
                    ("list_vm_status" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "调用 Libvirt.list_vm_status() 获取在线的虚机状态")
                        (reparse-symbol indented_block_body) [3242 3334]))                  
                :type "class")
                nil [468 3334]))          
      :file "interface.py"
      :pointmax 3334
      :fsize 3839
      :lastmodtime '(23940 27965 181943 717000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
libvirt network tools.
\"\"\"" code nil nil [818 848])
            ("collections" include nil nil [851 886])
            ("logging" include nil nil [887 901])
            ("threading" include nil nil [902 918])
            ("xml.etree.cElementTree" include nil nil [919 957])
            ("xml.sax.saxutils" include nil nil [958 993])
            ("six" include nil nil [995 1005])
            ("libvirt" include nil nil [1006 1058])
            ("rccpxuanyuan.virt.libvirt.libvirt_assistant" include nil nil [1060 1132])
            ("LIBVIRT_NET_PREFIX" variable nil nil [1135 1171])
            ("_LIBVIRT_NET_LOCK" variable nil nil [1172 1208])
            ("create_network_def" function
               (:documentation "
    Creates Network Xml e.g.:
    <network>
        <name>rccpxuanyuan-awesome_net</name>

        <forward mode='bridge'/><bridge name='awesome_net'/> ||
        <forward mode='passthrough'><interface dev='incredible'/></forward>
    </network>

    Forward mode can be either bridge or passthrough,
    according to net if bridged or bridgeless this
    determines respectively the presence of bridge element
    or interface subelement.
    "
                :arguments 
                  ( ("network" variable nil (reparse-symbol function_parameters) [1234 1241])
                    ("bridged" variable nil (reparse-symbol function_parameters) [1243 1250])
                    ("iface" variable nil (reparse-symbol function_parameters) [1257 1262]))                  )
                nil [1211 2489])
            ("create_network" function
               (:documentation "
    Create a libvirt network if it does not yet exist.
    The user_reference argument is a unique identifier of the caller,
    used to track the network users.
    "
                :arguments 
                  ( ("net_name" variable nil (reparse-symbol function_parameters) [2510 2518])
                    ("iface" variable nil (reparse-symbol function_parameters) [2520 2525])
                    ("user_reference" variable nil (reparse-symbol function_parameters) [2527 2541]))                  )
                nil [2491 3019])
            ("delete_network" function
               (:documentation "
    Remove a libvirt network when all its users have asked to remove it.
    "
                :arguments 
                  ( ("net_name" variable nil (reparse-symbol function_parameters) [3040 3048])
                    ("user_reference" variable nil (reparse-symbol function_parameters) [3050 3064]))                  )
                nil [3021 3341])
            ("_create_network" function (:arguments 
              ( ("net_xml" variable nil (reparse-symbol function_parameters) [3363 3370]))              ) nil [3343 3500])
            ("remove_network" function
               (:documentation "
    Remove a libvirt network when all its users have asked to remove it.
    "
                :arguments 
                  ( ("network" variable nil (reparse-symbol function_parameters) [3521 3528]))                  )
                nil [3502 3878])
            ("networks" function (:documentation "
    Get dict of networks from libvirt

    :returns: dict of networkname={properties}
    :rtype: dict of dict
            { 'ovirtmgmt': { 'bridge': 'ovirtmgmt', 'bridged': True}
              'red': { 'iface': 'red', 'bridged': False}}
    ") nil [3880 4867])
            ("is_libvirt_network" function
               (:documentation " check is libvirt network "
                :arguments 
                  ( ("net_name" variable nil (reparse-symbol function_parameters) [4892 4900]))                  )
                nil [4869 5132])
            ("net_name_o2l" function
               (:documentation "Translate ovirt network name to the name used by libvirt database"
                :arguments 
                  ( ("ovirt_name" variable nil (reparse-symbol function_parameters) [5151 5161]))                  )
                nil [5134 5283])
            ("net_name_l2o" function
               (:documentation "Translate the name used by libvirt database to the ovirt network name"
                :arguments 
                  ( ("libvirt_name" variable nil (reparse-symbol function_parameters) [5302 5314]))                  )
                nil [5285 5447])
            ("_netlookup_by_name" function (:arguments 
              ( ("conn" variable nil (reparse-symbol function_parameters) [5472 5476])
                ("net_name" variable nil (reparse-symbol function_parameters) [5478 5486]))              ) nil [5449 5673])
            ("NetworksUsersCache" type
               (:documentation "
    Manages networks users reference.
    Note: The implementation is NOT thread safe.
    "
                :members 
                  ( ("_nets_users" variable nil (reparse-symbol indented_block_body) [5808 5838])
                    ("add" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("net" variable nil (reparse-symbol function_parameters) [5870 5873])
                            ("user_ref" variable nil (reparse-symbol function_parameters) [5875 5883]))                          
                        :documentation " add network user reference ")
                        (reparse-symbol indented_block_body) [5844 6228])
                    ("remove" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("net" variable nil (reparse-symbol function_parameters) [6262 6265])
                            ("user_ref" variable nil (reparse-symbol function_parameters) [6267 6275]))                          
                        :documentation " remove network user reference ")
                        (reparse-symbol indented_block_body) [6233 6843])
                    ("has_users" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("net" variable nil (reparse-symbol function_parameters) [6880 6883]))                          
                        :documentation " check are there some users or not ")
                        (reparse-symbol indented_block_body) [6848 7075]))                  
                :type "class")
                nil [5675 7075]))          
      :file "libvirtnetwork.py"
      :pointmax 7075
      :fsize 7074
      :lastmodtime '(23945 34617 822389 85000)
      :unmatched-syntax '((INDENT_BLOCK 5580 . 5673) (NEWLINE 5579 . 5580) (COLON 5578 . 5579) (TRY 5493 . 5496) (AS 5572 . 5574) (NAME 2852 . 2857) (IF 2865 . 2867) (ELSE 2876 . 2880)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
虚拟化模块公共函数包
\"\"\"" code nil nil [1 19])
            ("rccpxuanyuan.common" include nil nil [22 62])
            ("configure_domain" function
               (:documentation " Configure virtual machine xml according to conf "
                :arguments 
                  ( ("conf" variable nil (reparse-symbol function_parameters) [86 90])
                    ("domain" variable nil (reparse-symbol function_parameters) [92 98]))                  )
                nil [65 408]))          
      :file "common.py"
      :pointmax 408
      :fsize 427
      :lastmodtime '(23940 27965 181943 717000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
virtual machine and virtulizaiton package.
\"\"\"" code nil nil [1 51])
            ("__future__" include nil nil [53 91])
            ("__future__" include nil nil [92 123])
            ("rccpxuanyuan.virt.interface" include nil nil [125 169]))          
      :file "__init__.py"
      :pointmax 170
      :fsize 169
      :lastmodtime '(23940 27965 180943 694000)
      :unmatched-syntax nil))
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuan!rccpxuanyuan!virt!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
