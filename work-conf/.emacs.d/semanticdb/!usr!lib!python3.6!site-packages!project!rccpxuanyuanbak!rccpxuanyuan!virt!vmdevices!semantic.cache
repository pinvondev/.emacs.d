;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
业务层封装 POS 接口
Create on: 2019/7/24
\"\"\"" code nil nil [1 42])
            ("enum" include nil nil [45 66])
            ("rccpxuanyuan.virt.vmdevices.vhost" include nil nil [67 118])
            ("rccpxuanyuan.rpc" include nil nil [119 161])
            ("rccpxuanyuan.common" include nil nil [162 203])
            ("rccpxuanyuan.common.exception" include nil nil [204 262])
            ("POSVHostErrorType" type
               (:documentation "POS Ctrl 错误码"
                :superclasses ("Enum")
                :members 
                  ( ("SCSI_ERR_CTRL_EXIST" variable nil (reparse-symbol indented_block_body) [323 350])
                    ("SCSI_ERR_NO_LUN" variable nil (reparse-symbol indented_block_body) [365 388])
                    ("SCSI_ERR_LUN_IN_USED" variable nil (reparse-symbol indented_block_body) [404 432])
                    ("SCSI_ERR_ALREADY_MARKED_TO_RM" variable nil (reparse-symbol indented_block_body) [449 486]))                  
                :type "class")
                nil [265 501])
            ("POSDriverException" type
               (:documentation "虚拟访问层异常"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [569 577])
                    ("message" variable nil (reparse-symbol indented_block_body) [582 626]))                  
                :type "class")
                nil [503 627])
            ("RemovePOSVHostSCSILunFailed" type
               (:documentation "删除 vdisk 时, ID 不存在"
                :superclasses ("POSDriverException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [718 762]))                  
                :type "class")
                nil [629 763])
            ("POSVHostExistError" type
               (:documentation "控制器已存在"
                :superclasses ("POSDriverException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [833 874]))                  
                :type "class")
                nil [765 875])
            ("POSServiceException" type
               (:documentation "除去需要捕获的错误外, 其他错误抛此异常"
                :superclasses ("POSDriverException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [960 993]))                  
                :type "class")
                nil [877 994])
            ("ClearVHostSCSIControllerFailed" type
               (:documentation "删除指定VHost失败异常"
                :superclasses ("POSDriverException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [1083 1113]))                  
                :type "class")
                nil [996 1114])
            ("POSDriver" type
               (:documentation "封装 VHost POS API"
                :members 
                  ( ("_raise_other_error" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1205 1208])
                            ("response" variable nil (reparse-symbol function_parameters) [1210 1218]))                          )
                        (reparse-symbol indented_block_body) [1165 1360])
                    ("" code nil (reparse-symbol indented_block_body) [1404 1415])
                    ("setup_vhostscsicontroller" function
                       (:documentation "
        创建 VHostSCSIController
        调用 VHost.ConstructVhostSCSIController()
        @vdisk_id: str, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1450 1453])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [1455 1463]))                          )
                        (reparse-symbol indented_block_body) [1420 1932])
                    ("" code nil (reparse-symbol indented_block_body) [1976 1987])
                    ("clear_vhostscsicontroller" function
                       (:documentation "
        清理 VHostSCSIController
        调用 VHost.RemoveVhostController()
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2022 2025])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [2027 2035]))                          )
                        (reparse-symbol indented_block_body) [1992 2421])
                    ("" code nil (reparse-symbol indented_block_body) [2465 2486])
                    ("add_vhostscsilun" function
                       (:documentation "
        挂载 VHostSCSILun
        调用 VHost.AddVhostSCSILUN()
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2512 2515])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [2517 2525])
                            ("scsi_target_num" variable nil (reparse-symbol function_parameters) [2527 2542])
                            ("volume_id" variable nil (reparse-symbol function_parameters) [2569 2578])
                            ("snapshot_id" variable nil (reparse-symbol function_parameters) [2580 2591]))                          )
                        (reparse-symbol indented_block_body) [2491 3084])
                    ("" code nil (reparse-symbol indented_block_body) [3128 3139])
                    ("remove_vhostscsilun" function
                       (:documentation "
        卸载 VHostSCSILun
        调用 VHost.RemoveVhostSCSILUN()
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3168 3171])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [3173 3181]))                          )
                        (reparse-symbol indented_block_body) [3144 4331])
                    ("get_vhostcontrollers" function
                       (:documentation "获取所有 vhost controller"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4378 4381]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4336 4492])
                    ("" code nil (reparse-symbol indented_block_body) [4536 4547])
                    ("_parse_diskpath" function
                       (:documentation "解析 disk_path 为 vdisk_id 和 volume_id"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4572 4575])
                            ("disk_path" variable nil (reparse-symbol function_parameters) [4577 4586]))                          )
                        (reparse-symbol indented_block_body) [4552 4709])
                    ("" code nil (reparse-symbol indented_block_body) [4753 4764])
                    ("_is_vhostscsicontroller_running" function
                       (:documentation "
        查询 VHostSCSIController 运行状态
        调用 VHost.GetVhostControllers() 并解析得到状态
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4805 4808])
                            ("vdisk_id" variable nil (reparse-symbol function_parameters) [4810 4818])
                            ("scsi_target_num" variable nil (reparse-symbol function_parameters) [4820 4835])
                            ("volume_id" variable nil (reparse-symbol function_parameters) [4877 4886]))                          )
                        (reparse-symbol indented_block_body) [4769 5518]))                  
                :type "class")
                nil [1116 5518]))          
      :file "posdriver.py"
      :pointmax 5518
      :fsize 5747
      :lastmodtime '(23937 55677 742785 778000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "vhost.py"
      :fsize 3796
      :lastmodtime '(23935 18195 294694 695000))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
虚拟设备实现
\"\"\"" code nil nil [1 15])
            ("re" include nil nil [18 27])
            ("urllib.parse" include nil nil [28 61])
            ("rccpxuanyuan.common" include nil nil [63 98])
            ("rccpxuanyuan.common" include nil nil [99 139])
            ("rccpxuanyuan.common" include nil nil [140 181])
            ("rccpxuanyuan.common.exception" include nil nil [182 246])
            ("rccpxuanyuan.common.exception" include nil nil [247 315])
            ("rccpxuanyuan.common.exception" include nil nil [316 378])
            ("rccpxuanyuan.common.exception" include nil nil [379 442])
            ("rccpxuanyuan.common.exception" include nil nil [443 500])
            ("rccpxuanyuan.virt.vmdevices.posdriver" include nil nil [501 659])
            ("rccpxuanyuan.virt" include nil nil [660 708])
            ("VMDeviceError" type
               (:documentation "virtual machine device error"
                :superclasses ("exception.ContextException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [804 844]))                  
                :type "class")
                nil [711 845])
            ("VMCPUNumberError" type
               (:documentation "VCPU 数量不合法"
                :superclasses ("VMDeviceError")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [912 947]))                  
                :type "class")
                nil [847 948])
            ("VMMemorySizeError" type
               (:documentation "虚机内存大小不合法"
                :superclasses ("VMDeviceError")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [1015 1052]))                  
                :type "class")
                nil [950 1053])
            ("VMOSConfigError" type
               (:documentation "虚机系统模型配置不合法"
                :superclasses ("VMDeviceError")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [1120 1162]))                  
                :type "class")
                nil [1055 1163])
            ("VMInterfaceConfigError" type
               (:documentation "虚拟网卡配置错误"
                :superclasses ("VMDeviceError")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [1234 1283]))                  
                :type "class")
                nil [1165 1284])
            ("VMCDROMConfigureError" type
               (:documentation "CDROM 配置错误"
                :superclasses ("VMDeviceError")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [1356 1401]))                  
                :type "class")
                nil [1286 1402])
            ("_DISK_NAMESPACE" variable nil nil [1404 1466])
            ("_DISK_ALIA_NAME" code nil nil [1467 1528])
            ("Base" type
               (:documentation "
    虚拟设备基类
    职责：
        1. 声明虚拟设备公共接口和成员变量，支持上层使用
    约定：
        1. 在继承Base后，虚拟设备需要设置设备自身的别名，别名是指上层模型和
           libvirt模型中设备的名字，比如CPU设备对应别名有(\"cpu\", \"vcpu\")。设置别
           名后，上层可以通过别名查找对应设备类。
    "
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [1761 1776])
                    ("_CONF" variable nil (reparse-symbol indented_block_body) [1782 1792])
                    ("_DEV_GROUP_XML" variable nil (reparse-symbol indented_block_body) [1798 1817])
                    ("set_default_conf" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置其中默认参数。
        职责：
            1. 检查设备配置组合法性；
            2. 根据上层设备配置设置改配置缺省字段；
            3. 提取公共参数
        参数 conf：上层设备配置；
        类型：泛型根据具体设备类约定入参类型；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1861 1864])
                            ("conf" variable nil (reparse-symbol function_parameters) [1866 1870]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1823 2077])
                    ("get_mutex_resource" function
                       (:documentation "
        定义：根据虚拟设备配置，获取设备多线程互斥资源。
        职责：
            1. 根据上层设备配置返回设备互斥资源标识。
        参数 conf：上层设备配置；
        类型：泛型根据具体设备类约定入参类型；
        返回值：设备互斥资源标识组合。
        类型：字符串列表；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2123 2126])
                            ("conf" variable nil (reparse-symbol function_parameters) [2128 2132]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2083 2333])
                    ("set_dev_group_xml" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置设备组总线/公共配置。
        职责：
            1. 根据上层一组设备配置，设置对应底层设备libvirt配置；
        参数 conf_group：同set_default_conf接口描述；
        类型：列表；
        参数 par_dev_dom：设置一组同类设备；
        类型：xml.etree.ElementTree对象；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2377 2380])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [2382 2392])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [2394 2405]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2338 2655])
                    ("set_xml" function
                       (:documentation "
        定义：单一虚拟设备配置翻译接口。
        职责：
            1. 翻译上层设备模型配置为libvirt XML对象；
            2. 设置设备libvirt XML缺省参数；
        参数 conf：上层单一设备模型配置；
        类型：字典{}；
        参数 dev_dom：底层设备libvirt参数；
        类型：xml.etree.ElementTree；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2689 2692])
                            ("conf" variable nil (reparse-symbol function_parameters) [2694 2698])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [2700 2707]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2660 2966])
                    ("update_xml" function
                       (:documentation "
        定义：单一虚拟设备配置翻译接口。
        职责：
            1. 翻译上层设备模型配置为libvirt XML对象；
            2. 设置设备libvirt XML缺省参数；
        参数 conf：上层单一设备模型配置；
        类型：字典{}；
        参数 dev_dom：底层设备libvirt参数；
        类型：xml.etree.ElementTree；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3003 3006])
                            ("conf" variable nil (reparse-symbol function_parameters) [3008 3012])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [3014 3021]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2971 3275])
                    ("setup_dev_group" function
                       (:documentation "
        定义：一组虚拟设备安装接口。
        职责：
            1. 完成一组虚拟设备依赖的环境配置。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数 conf_group：同set_default_conf接口描述；
        类型：列表；
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3317 3320])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [3322 3332]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3280 3530])
                    ("setup" function
                       (:documentation "
        定义：单一虚拟设备安装接口。
        职责：
            1. 完成虚拟设备依赖的环境配置。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3562 3565])
                            ("conf" variable nil (reparse-symbol function_parameters) [3567 3571]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3535 3730])
                    ("teardown" function
                       (:documentation "
        定义：单一虚拟设备卸载接口。
        职责：
            1. 完成虚拟设备依赖的环境清理。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3765 3768])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [3770 3777]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3735 3892])
                    ("update_xml" function
                       (:documentation "
        定义：更新虚拟设备接口
        职责：
            1. 根据传入的 conf 来更新 dev_dom 中对应项
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3929 3932])
                            ("conf" variable nil (reparse-symbol function_parameters) [3934 3938])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [3940 3947]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3897 4049]))                  
                :type "class")
                nil [1531 4049])
            ("CPU" type
               (:documentation "虚拟CPU"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [4089 4117])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [4122 4134])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [4139 4157])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4201 4204])
                            ("conf" variable nil (reparse-symbol function_parameters) [4206 4210]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4163 4540])
                    ("set_xml" function
                       (:documentation "
        将 vcpu 配置参数转换成 xml
        @cpu_conf: dict, required
        @dev_dom: xml.etree.Element, optional
        根据 conf 查找 default 对应的值是否存在, 若不存在, 则 append
                                                 若存在, 则 update
        eg.
        dev_dom: </default>
        vcpu_conf: {\"cpu\": 4}
        @ret: <vcpu>4</vcpu>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4574 4577])
                            ("conf" variable nil (reparse-symbol function_parameters) [4579 4583])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [4585 4592]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4545 5056]))                  
                :type "class")
                nil [4051 5056])
            ("Memory" type
               (:documentation "虚拟内存"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [5098 5122])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [5127 5142])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [5147 5167])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5211 5214])
                            ("conf" variable nil (reparse-symbol function_parameters) [5216 5220]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5173 5570])
                    ("set_xml" function
                       (:documentation "
        将虚拟内存配置参数转换成 xml
        @mem: dict, required

        eg.
        conf: {\"memory\": 4096}
        dev_dom: <default />
        @ret: <memory unit=\"MiB\">4096</memory>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5604 5607])
                            ("conf" variable nil (reparse-symbol function_parameters) [5609 5613])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [5615 5622]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5575 5970]))                  
                :type "class")
                nil [5058 5970])
            ("OS" type
               (:documentation "虚机系统"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [6008 6039])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [6044 6061])
                    ("_TAG" variable nil (reparse-symbol indented_block_body) [6066 6077])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        @ret: dict
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6121 6124])
                            ("conf" variable nil (reparse-symbol function_parameters) [6126 6130]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6083 6739])
                    ("set_xml" function
                       (:documentation "虚拟机系统模型配置参数转换成 xml
        @conf: dict, required
        引导设备可选值有 cdrom 和 hd, 默认为 hd

        eg.
        conf: {\"boot_dev\": \"hd/cdrom\"}
        dev_dom: <default />
        @ret: <os>
                <type arch='x86_64' machine='pc-0.14'>hvm</type>
                <boot dev=\"hd\">
              </os>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6773 6776])
                            ("conf" variable nil (reparse-symbol function_parameters) [6778 6782])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [6784 6791]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6744 7563]))                  
                :type "class")
                nil [5972 7563])
            ("Interface" type
               (:documentation "虚拟网卡
    <interface type='bridge'>
      <source bridge=$src_br/>
      <virtualport type='openvswitch'>
        <parameters profileid='menial' interface_id=$interface_id/>
      </virtualport>
      <alias name=\"$dev_id\"/>
    </interface>
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [7849 7876])
                    ("\"\"\"
<interface type='bridge'>
    <mac address='$mac'/>
    <source bridge='$src_br'/>
    <virtualport type='openvswitch'>
        <parameters profileid='menial' interface_id='$interface_id'/>
    </virtualport>
    <alias name='$dev_id'/>
</interface>
\"\"\"" code nil (reparse-symbol indented_block_body) [7904 8161])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: list, required, list 中每个元素为 dict
        @ret: list
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8205 8208])
                            ("conf" variable nil (reparse-symbol function_parameters) [8210 8214]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8167 8786])
                    ("set_xml" function
                       (:documentation "虚拟网卡设备配置参数转换成 xml
        @conf: dict, required.
        @dev_dom: xml.etree.Element, optional

        eg.
        conf: {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx}
        dev_dom: <Interface />
        @ret:
        <Interface type=\"bridge\">
            <source bridge=xxx />
            <virtualport type=\"openvswitch\">
                <parameters interface_id=xxx profileid=\"menial\" />
            </virtualport>
            <alias name=xxx />
        </Interface>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8820 8823])
                            ("conf" variable nil (reparse-symbol function_parameters) [8825 8829])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [8831 8838]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8791 9516])
                    ("set_dev_group_xml" function
                       (:documentation "批量转换虚拟网卡 conf 为 xml
        @conf_group: list, 每个元素为 dict, 对应一个网卡设备
        @dev_dom: xml.etree.Element

        eg.
        conf_group: [
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
        ]
        par_dev_dom:
            <domain>
              <devices />
            <domain/>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9560 9563])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [9565 9575])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [9577 9588]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9521 10225]))                  
                :type "class")
                nil [7565 10225])
            ("CDROM" type
               (:documentation "虚拟光驱"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [10266 10289])
                    ("_FTP_PORT" variable nil (reparse-symbol indented_block_body) [10294 10308])
                    ("_SFTP_PORT" variable nil (reparse-symbol indented_block_body) [10313 10328])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source file='$file_path' />
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <serial>'$dev_id'</serial>
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [10358 10574])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source name='$file_path' protocol='$protocol'>
        <host name='$name' port='$port' />
    </source>
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <serial />
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [10605 10881])
                    ("set_default_conf" function
                       (:documentation "检查单项配置的合法性, 填充默认值
        @conf: dict, required

        若是 boot 设备, 则从 hda 开始编号
        否则, 从 hde 往前编号
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10925 10928])
                            ("conf" variable nil (reparse-symbol function_parameters) [10930 10934]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10887 12333])
                    ("set_xml" function
                       (:documentation "虚拟光驱设备配置参数转换成 xml
        @conf: dict, required
        @dev_dom: rccpxuanyuan.virt.vmxml.Element, optional

        1. 若 key-value 形式为 str-list, 则将 domain 这个节点传给 dev_dom,
           上层不去区分是什么设备
        2. 若 key-value 形式为 str-str, 则将当前节点传进来
        3. 根据 conf, 查找 dev_dom 中对应节点和值是否存在
           若不存在, 则 append
           若存在, 则 update
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12367 12370])
                            ("conf" variable nil (reparse-symbol function_parameters) [12372 12376])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [12378 12385]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12338 13125])
                    ("_parse_local_filepath" function
                       (:documentation "返回本地文件路径, eg:
        /test/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13173 13176])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [13178 13189]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13130 13305])
                    ("_parse_remote_filepath" function
                       (:documentation "解析远程光驱设备路径
        standard:
        ftp://[user ID:password@]<host name>[:port]/[path name/]

        ftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        sftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13354 13357])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [13359 13370]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13310 14346])
                    ("set_dev_group_xml" function
                       (:documentation "批量虚拟设备统一处理接口
        获取 par_dev_dom, 根据 par_dev_dom 的信息完善 conf
        @conf: list, required
        @par_dev_dom: xml.etree.ElementTree.Element, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14390 14393])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [14395 14405])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [14407 14418]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14351 14836])
                    ("_is_local_iso" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14876 14879])
                            ("file_path" variable nil (reparse-symbol function_parameters) [14881 14890]))                          )
                        (reparse-symbol indented_block_body) [14841 14973])
                    ("update_xml" function
                       (:documentation "
        1. 准备 conf
        2. 根据 conf 生成新的 xml
        3. 将新 xml 拷贝给旧 xml
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15010 15013])
                            ("conf" variable nil (reparse-symbol function_parameters) [15015 15019])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [15021 15028]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14978 15596]))                  
                :type "class")
                nil [10227 15596])
            ("CPU" type
               (:documentation "虚拟CPU"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [15636 15664])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [15669 15681])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [15686 15704])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15748 15751])
                            ("conf" variable nil (reparse-symbol function_parameters) [15753 15757]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15710 16151])
                    ("set_xml" function
                       (:documentation "
        将 vcpu 配置参数转换成 xml
        @cpu_conf: dict, required
        @dev_dom: xml.etree.Element, optional
        根据 conf 查找 default 对应的值是否存在, 若不存在, 则 append
                                                 若存在, 则 update
        eg.
        dev_dom: </default>
        vcpu_conf: {\"cpu\": 4}
        @ret: <vcpu>4</vcpu>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16185 16188])
                            ("conf" variable nil (reparse-symbol function_parameters) [16190 16194])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [16196 16203]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16156 16667]))                  
                :type "class")
                nil [15598 16667])
            ("Memory" type
               (:documentation "虚拟内存"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [16709 16733])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [16738 16753])
                    ("_TAG_NAME" variable nil (reparse-symbol indented_block_body) [16758 16778])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16822 16825])
                            ("conf" variable nil (reparse-symbol function_parameters) [16827 16831]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16784 17249])
                    ("set_xml" function
                       (:documentation "
        将虚拟内存配置参数转换成 xml
        @mem: dict, required

        eg.
        conf: {\"memory\": 4096}
        dev_dom: <default />
        @ret: <memory unit=\"MiB\">4096</memory>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17283 17286])
                            ("conf" variable nil (reparse-symbol function_parameters) [17288 17292])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [17294 17301]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17254 17649]))                  
                :type "class")
                nil [16669 17649])
            ("OS" type
               (:documentation "虚机系统"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [17687 17718])
                    ("_KEY" variable nil (reparse-symbol indented_block_body) [17723 17740])
                    ("_TAG" variable nil (reparse-symbol indented_block_body) [17745 17756])
                    ("\"\"\"
<os>
    <type arch=\"x86_64\" machine=\"pc-i440fx-2.11\">hvm</type>
    <boot dev='$boot_dev' />
</os>
\"\"\"" code nil (reparse-symbol indented_block_body) [17777 17884])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        @ret: dict
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17928 17931])
                            ("conf" variable nil (reparse-symbol function_parameters) [17933 17937]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17890 18376])
                    ("set_xml" function
                       (:documentation "虚拟机系统模型配置参数转换成 xml
        @conf: dict, required
        引导设备可选值有 cdrom 和 hd, 默认为 hd

        eg.
        conf: {\"boot_dev\": \"hd/cdrom\"}
        dev_dom: <default />
        @ret: <os>
                <type arch='x86_64' machine='pc-0.14'>hvm</type>
                <boot dev=\"hd\">
              </os>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18410 18413])
                            ("conf" variable nil (reparse-symbol function_parameters) [18415 18419])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [18421 18428]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18381 18896]))                  
                :type "class")
                nil [17651 18896])
            ("Interface" type
               (:documentation "虚拟网卡
    <interface type='bridge'>
      <source bridge=$src_br/>
      <virtualport type='openvswitch'>
        <parameters profileid='menial' interface_id=$interface_id/>
      </virtualport>
      <alias name=\"$dev_id\"/>
    </interface>
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [19182 19209])
                    ("\"\"\"
<interface type='bridge'>
    <source bridge='$src_br'/>
    <virtualport type='openvswitch'>
        <parameters profileid='menial' interface_id='$interface_id'/>
    </virtualport>
    <alias name='$dev_id'/>
</interface>
\"\"\"" code nil (reparse-symbol indented_block_body) [19237 19468])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: list, required, list 中每个元素为 dict
        @ret: list
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19512 19515])
                            ("conf" variable nil (reparse-symbol function_parameters) [19517 19521]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19474 19992])
                    ("set_xml" function
                       (:documentation "虚拟网卡设备配置参数转换成 xml
        @conf: dict, required.
        @dev_dom: xml.etree.Element, optional

        eg.
        conf: {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx}
        dev_dom: <Interface />
        @ret:
        <Interface type=\"bridge\">
            <source bridge=xxx />
            <virtualport type=\"openvswitch\">
                <parameters interface_id=xxx profileid=\"menial\" />
            </virtualport>
            <alias name=xxx />
        </Interface>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20026 20029])
                            ("conf" variable nil (reparse-symbol function_parameters) [20031 20035])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [20037 20044]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19997 20731])
                    ("set_dev_group_xml" function
                       (:documentation "批量转换虚拟网卡 conf 为 xml
        @conf_group: list, 每个元素为 dict, 对应一个网卡设备
        @dev_dom: xml.etree.Element

        eg.
        conf_group: [
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
            {\"dev_id\": xxx, \"interface_id\": xxx, \"src_br\": xxx},
        ]
        par_dev_dom:
            <domain>
              <devices />
            <domain/>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20775 20778])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [20780 20790])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [20792 20803]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20736 21435]))                  
                :type "class")
                nil [18898 21435])
            ("CDROM" type
               (:documentation "虚拟光驱"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [21476 21499])
                    ("_FTP_PORT" variable nil (reparse-symbol indented_block_body) [21504 21518])
                    ("_SFTP_PORT" variable nil (reparse-symbol indented_block_body) [21523 21538])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source file='$file_path' />
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <serial>'$dev_id'</serial>
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [21568 21784])
                    ("\"\"\"
<disk device=\"cdrom\" type='$dev_type'>
    <source name='$file_path' protocol='$protocol'>
        <host name='$name' port='$port' />
    </source>
    <driver name=\"qemu\" type=\"raw\" />
    <target bus=\"ide\" dev='$target_dev' />
    <readonly />
    <serial>'$dev_id'</serial>
</disk>
\"\"\"" code nil (reparse-symbol indented_block_body) [21815 22107])
                    ("set_default_conf" function
                       (:documentation "检查单项配置的合法性, 填充默认值
        @conf: dict, required

        若是 boot 设备, 则从 hda 开始编号
        否则, 从 hde 往前编号
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22151 22154])
                            ("conf" variable nil (reparse-symbol function_parameters) [22156 22160]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22113 23647])
                    ("set_xml" function
                       (:documentation "虚拟光驱设备配置参数转换成 xml
        @conf: dict, required
        @dev_dom: rccpxuanyuan.virt.vmxml.Element, optional

        1. 若 key-value 形式为 str-list, 则将 domain 这个节点传给 dev_dom,
           上层不去区分是什么设备
        2. 若 key-value 形式为 str-str, 则将当前节点传进来
        3. 根据 conf, 查找 dev_dom 中对应节点和值是否存在
           若不存在, 则 append
           若存在, 则 update
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23681 23684])
                            ("conf" variable nil (reparse-symbol function_parameters) [23686 23690])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [23692 23699]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23652 24612])
                    ("_parse_local_filepath" function
                       (:documentation "返回本地文件路径, eg:
        /test/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24660 24663])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [24665 24676]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24617 24792])
                    ("_parse_remote_filepath" function
                       (:documentation "解析远程光驱设备路径
        standard:
        ftp://[user ID:password@]<host name>[:port]/[path name/]

        ftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        sftp://username:passwd@ip:port//home/base/RCOS-9.2.0-20190422172520.iso
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24841 24844])
                            ("parsed_path" variable nil (reparse-symbol function_parameters) [24846 24857]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24797 25833])
                    ("set_dev_group_xml" function
                       (:documentation "批量虚拟设备统一处理接口
        获取 par_dev_dom, 根据 par_dev_dom 的信息完善 conf
        @conf: list, required
        @par_dev_dom: xml.etree.ElementTree.Element, required
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [25877 25880])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [25882 25892])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [25894 25905]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25838 26323])
                    ("_is_local_iso" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26363 26366])
                            ("file_path" variable nil (reparse-symbol function_parameters) [26368 26377]))                          )
                        (reparse-symbol indented_block_body) [26328 26460]))                  
                :type "class")
                nil [21437 26460])
            ("Disk" type
               (:documentation "
    virtual disk model
    "
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [26524 26562])
                    ("_VDISK_ID_PREFIX" variable nil (reparse-symbol indented_block_body) [26568 26631])
                    ("_CONF" variable nil (reparse-symbol indented_block_body) [26637 26840])
                    ("_set_booter" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("conf_group" variable nil (reparse-symbol function_parameters) [27151 27161]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27117 27596])
                    ("_set_vdiskid" function
                       (:documentation "
        conf = {
            \"disk_path\": \"1/2\"}
        parse conf = {
            \"vdisk_id\": \"1\",
            \"volume_id\": \"2\",
            \"vdisk_value\": \"socket,id=spdk_vhost_scsi, path=/usr/vdisk/1\"}
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [27635 27638])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [27640 27650]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27601 28641])
                    ("" code nil (reparse-symbol indented_block_body) [28677 28735])
                    ("" code nil (reparse-symbol indented_block_body) [28757 28805])
                    ("set_default_conf" function
                       (:documentation "
        定义：根据上层硬盘设备配置组参数，设置其中默认参数lun_id, vdisk_id,
              vdisk_value, volume_id。
        职责：
            1. 检查设备配置组合法性，主要检查所有虚拟硬盘使用相同的vdisk_id；
            2. 根据设备配置组字段设置默认配置,
                主要解析disk_path和boot字段，设置vdisk_id,
                vdisk_value, volume_id, lun_id
            3. 提取公共参数
        参数 conf：上层设备配置组；
        类型：列表；
        示例：[
            {
                \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                \"disk_path\": \"1/2\",
                \"boot\": True,
            }
        ]
        设置后：[
            {
                \"dev_id\": \"b4e5f302-7c6c-1000-89d5-dfgdffffffff\",
                \"disk_path\": \"1/2\",
                \"boot\": True,
                \"vdisk_id\": \"1\",
                \"volume_id\": \"2\",
                \"vdisk_value\": \"socket,id=spdk_vhost_scsi, path=/usr/vdisk/1\"}
                \"lun_id\": 0,
            }
        ]
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28831 28834])
                            ("conf" variable nil (reparse-symbol function_parameters) [28836 28840]))                          )
                        (reparse-symbol indented_block_body) [28810 29839])
                    ("" code nil (reparse-symbol indented_block_body) [29879 29917])
                    ("get_mutex_resource" function
                       (:documentation "
        定义：根据虚拟硬盘配置，获取虚拟硬盘VDisk互斥资源。
        职责：
            1. 根据上层虚拟硬盘配置返回虚拟硬盘试用VDisk标识。
        参数 conf：同set_default_conf中conf_group；
        返回值：虚拟硬盘互斥资源vdisk_id；
        类型：字符串列表；
        "
                        :arguments 
                          ( ("conf" variable nil (reparse-symbol function_parameters) [29945 29949]))                          )
                        (reparse-symbol indented_block_body) [29922 30198])
                    ("" code nil (reparse-symbol indented_block_body) [30237 30283])
                    ("set_dev_group_xml" function
                       (:documentation "
        定义：根据虚拟设备配置组配置，设置设备组总线/公共配置。
        职责：
            1. 根据设备配置组参数，设置设备组总线/公共配置；
        参数 conf_group：上层设备配置组；
        类型：列表；
        参数 dev_dom：想要设置的设备domain对象；
        类型：xml.etree.ElementTree对象；
        示例：
        <domain>
        </domain>
        设置后：
        <domain xmlns:qemu=\"http://libvirt.org/schemas/domain/qemu/1.0\">
          <qemu:commandline>
            <qemu:arg value='-chardev'/>
            <qemu:arg value='$vdisk_value'/>
            <qemu:arg value='-device'/>
            <qemu:arg value='vhost-user-scsi-pci,id=scsi,
                             chardev=spdk_vhost_scsi,num_queues=1,watch'/>
          </qemu:commandline>
        </domain>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [30310 30313])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [30315 30325])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [30327 30338]))                          )
                        (reparse-symbol indented_block_body) [30288 31245])
                    ("" code nil (reparse-symbol indented_block_body) [31282 31314])
                    ("" code nil (reparse-symbol indented_block_body) [31335 31364])
                    ("_remove_vhostscsilun" function
                       (:documentation "
        定义：封装POSDriver移除lun接口
        职责：
            1. 执行POSDriver.remove_vhostscsilun接口
            1. 封装POSDriver.remove_vhostscsilun异常，VDisk接口允许移除lun失败
        "
                        :arguments 
                          ( ("vdisk_id" variable nil (reparse-symbol function_parameters) [31394 31402]))                          )
                        (reparse-symbol indented_block_body) [31369 31634])
                    ("" code nil (reparse-symbol indented_block_body) [31670 31702])
                    ("" code nil (reparse-symbol indented_block_body) [31724 31766])
                    ("setup_dev_group" function
                       (:documentation "
        定义：虚拟一组硬盘安装接口。
        职责：
            1. 完成虚拟所有硬盘的环境依赖。
        约定：
            1. 支持二次安装覆盖之前的配置内容。
        参数参考set_xml接口。
        注意：
            本接口非多线程安全，vhostscsicontroller的配置会被弄脏
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [31791 31794])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [31796 31806]))                          )
                        (reparse-symbol indented_block_body) [31771 32437])
                    ("" code nil (reparse-symbol indented_block_body) [32473 32505])
                    ("" code nil (reparse-symbol indented_block_body) [32526 32558])
                    ("" code nil (reparse-symbol indented_block_body) [32580 32624])
                    ("teardown" function
                       (:documentation "
        定义：虚拟硬盘卸载接口。
        职责：
            1. 完成虚拟硬盘依赖的环境清理。
        参数参考set_xml接口。
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [32642 32645])
                            ("dev_dom" variable nil (reparse-symbol function_parameters) [32647 32654]))                          )
                        (reparse-symbol indented_block_body) [32629 32911])
                    ("" code nil (reparse-symbol indented_block_body) [32947 32991])
                    ("_get_vdisk_id" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [33014 33017])
                        ("dev_dom" variable nil (reparse-symbol function_parameters) [33019 33026]))                      ) (reparse-symbol indented_block_body) [32996 33171])
                    ("" code nil (reparse-symbol indented_block_body) [33209 33226])
                    ("_parse_disk_path" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [33252 33255])
                        ("disk_path" variable nil (reparse-symbol function_parameters) [33257 33266]))                      ) (reparse-symbol indented_block_body) [33231 33440])
                    ("_compose_vdisk_id" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("original_pool_id" variable nil (reparse-symbol function_parameters) [33485 33501])
                            ("original_vdisk_id" variable nil (reparse-symbol function_parameters) [33503 33520]))                          
                        :documentation "
        使用底层P-OS存储中的池ID和vDisk ID来合成vdisk_id。
        ")
                        (reparse-symbol indented_block_body) [33445 33654])
                    ("_decompose_vdisk_id" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("vdisk_id" variable nil (reparse-symbol function_parameters) [33701 33709]))                          
                        :documentation "
        从已合成的vdisk_id中分解出底层P-OS存储中的池ID和vDisk ID。
        ")
                        (reparse-symbol indented_block_body) [33659 33962]))                  
                :type "class")
                nil [26462 33962])
            ("Graphics" type
               (:documentation "暂时使用默认 XML"
                :superclasses ("Base")
                :members 
                  ( ("ALIAS_NAME" variable nil (reparse-symbol indented_block_body) [34012 34038])
                    ("\"\"\"
<graphics type=\"spice\" autoport=\"yes\" listen=\"0.0.0.0\" defaultMode=\"insecure\" \\
passwd=\"\">
    <listen address=\"0.0.0.0\" type=\"address\" />
</graphics>
\"\"\"" code nil (reparse-symbol indented_block_body) [34065 34223])
                    ("\"\"\"
<video>
    <model type=\"qxl\" />
</video>
\"\"\"" code nil (reparse-symbol indented_block_body) [34247 34296])
                    ("set_default_conf" function
                       (:documentation "检查 conf 中的字段, 补充默认字段
        @conf: dict, required
        @ret: dict
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [34340 34343])
                            ("conf" variable nil (reparse-symbol function_parameters) [34345 34349]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34302 34465])
                    ("set_dev_group_xml" function
                       (:documentation "图形界面 xml 配置
        @conf_group: dict, required
        @ret:
        <graphics type=\"spice\" autoport=\"yes\" listen=\"0.0.0.0\" \\
defaultMode=\"insecure\" passwd=\"\"
          <listen address=\"0.0.0.0\" type=\"address\" />
        </graphics>
        <video>
          <model type=\"qxl\" />
        </video>
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [34509 34512])
                            ("conf_group" variable nil (reparse-symbol function_parameters) [34514 34524])
                            ("par_dev_dom" variable nil (reparse-symbol function_parameters) [34526 34537]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34470 35255]))                  
                :type "class")
                nil [33964 35255]))          
      :file "core.py"
      :pointmax 35255
      :fsize 39064
      :lastmodtime '(23937 42177 941740 122000)
      :unmatched-syntax '((NEWLINE 27111 . 27112) (RPAREN 27110 . 27111) (NAME 26846 . 26860) (DEDENT 26865 . 26865) (STRING_LITERAL 26865 . 27087) (LPAREN 27094 . 27095))))
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuanbak!rccpxuanyuan!virt!vmdevices!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
