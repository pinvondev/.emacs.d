;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
时钟同步管理
\"\"\"" code nil nil [1 15])
            ("re" include nil nil [17 26])
            ("logging" include nil nil [27 41])
            ("rccpxuanyuan.common" include nil nil [43 83])
            ("rccpxuanyuan.common" include nil nil [84 125])
            ("rccpxuanyuan.host.host_device" include nil nil [126 173])
            ("FatalError" type
               (:documentation " Raised error when cannot config "
                :superclasses ("Exception")
                :type "class")
                nil [176 249])
            ("NTP_CONF" variable nil nil [255 281])
            ("NTP_DAEMON" variable nil nil [282 316])
            ("THRESHOLD" variable nil nil [317 334])
            ("LOG" variable nil nil [335 365])
            ("ConfigNonSection" type
               (:documentation "
    解析无 section 的配置文件
    "
                :members 
                  ( ("get_conf" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("filename" variable nil (reparse-symbol function_parameters) [467 475])
                            ("key" variable nil (reparse-symbol function_parameters) [477 480])
                            ("delimiter" variable nil (reparse-symbol function_parameters) [482 491]))                          
                        :documentation "
        param filename: 配置文件名
        type filename: str
        param key: 键, key 可以嵌套
        type key: str
        param delimiter: 分隔符
        type delimiter: str
        return: (值, 去除注释和空行后的所有配置信息)
        ")
                        (reparse-symbol indented_block_body) [436 1501])
                    ("_key_num" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1536 1539])
                            ("key" variable nil (reparse-symbol function_parameters) [1541 1544])
                            ("row" variable nil (reparse-symbol function_parameters) [1546 1549]))                          )
                        (reparse-symbol indented_block_body) [1506 1686])
                    ("set_conf" function
                       (:documentation "
        修改配置文件
        param filename: 配置文件名
        param key: 要修改的字段
        param values: 将修改字段对应的值替换成values的值
        param delimiter: 配置文件中键值对的分隔符
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1721 1724])
                            ("filename" variable nil (reparse-symbol function_parameters) [1726 1734])
                            ("key" variable nil (reparse-symbol function_parameters) [1736 1739])
                            ("values" variable nil (reparse-symbol function_parameters) [1741 1747])
                            ("delimiter" variable nil (reparse-symbol function_parameters) [1749 1758]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1691 2521])
                    ("_merge_kv" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("key" variable nil (reparse-symbol function_parameters) [2558 2561])
                            ("value" variable nil (reparse-symbol function_parameters) [2563 2568]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2526 2785])
                    ("_save_conf" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("filename" variable nil (reparse-symbol function_parameters) [2823 2831])
                            ("contents" variable nil (reparse-symbol function_parameters) [2833 2841])
                            ("delimiter" variable nil (reparse-symbol function_parameters) [2843 2852]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2790 3202]))                  
                :type "class")
                nil [368 3202])
            ("NTPClientManager" type
               (:documentation "
    NTP 客户端管理类
    "
                :members 
                  ( ("_is_running" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        检查 NTP 是否已开启
        ")
                        (reparse-symbol indented_block_body) [3265 3529])
                    ("open_ntp" function
                       (:documentation "
        开启 ntp 服务
        1. 对比时间差, 相差较少时使用 ntpd 调整;
           相差较多时使用 nptdate 更新
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3564 3567]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3534 3861])
                    ("close_ntp" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        关闭 ntp 服务
        ")
                        (reparse-symbol indented_block_body) [3866 3996])
                    ("_update" function
                       (:documentation "
        直接更新
        同步源的读取顺序: 实际使用的源; 配置文件中的源;
        如果以上两个地方都未找到同步源, 抛出异常
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4030 4033]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4001 4961])
                    ("_get_deviation" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("server" variable nil (reparse-symbol function_parameters) [5003 5009]))                          
                        :documentation "
        首先判断同步源是否真实存在, 然后获取时间差
        ")
                        (reparse-symbol indented_block_body) [4966 5293])
                    ("set_servers" function
                       (:documentation "
        设置 NTP 同步源
        设置过程中对 ntp 服务是否开启没有要求

        设置完成后:
            如果 ntp 服务原本是开启的, 需要重启 ntp 服务
            如果 ntp 服务原本是关闭的, 则不改变其状态
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5331 5334])
                            ("servers" variable nil (reparse-symbol function_parameters) [5336 5343]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5298 5688])
                    ("set_threshold" function
                       (:documentation "
        设置阈值, 涉及 /etc/sysconfig/ntpd 和 /etc/ntp.conf
        两个文件的修改, 如果前一个修改成功, 后一个修改失败,
        则需要还原前一个文件的设置
        如果阈值在 0-0.5s 之间, 则不开启 -x 选项; 否则开启;
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5728 5731])
                            ("threshold" variable nil (reparse-symbol function_parameters) [5733 5742]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5693 6700])
                    ("get_servers" function
                       (:documentation "
        获取 NTP 同步源
        1. 配置文件中配置的同步源
        2. 实际运行过程中使用的同步源, 刚启动时, 需要等待一段时间才会确定
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6738 6741]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6705 7353])
                    ("get_threshold" function
                       (:documentation "
        获取阈值
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7393 7396]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7358 7783])
                    ("_modify_ntpd" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("filename" variable nil (reparse-symbol function_parameters) [7823 7831])
                            ("content" variable nil (reparse-symbol function_parameters) [7833 7840]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7788 8069]))                  
                :type "class")
                nil [3204 8069]))          
      :file "ntp.py"
      :pointmax 8069
      :fsize 8828
      :lastmodtime '(23898 35457 613000 0)
      :unmatched-syntax '((INDENT_BLOCK 2455 . 2521) (NEWLINE 2454 . 2455) (COLON 2453 . 2454) (TRY 2371 . 2374) (AS 2447 . 2449)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "__init__.py"
      :pointmax 2
      :fsize 1
      :lastmodtime '(23836 1070 582000 0)
      :unmatched-syntax '(($EOI 18 . 18) ($EOI 17 . 17) ($EOI 8 . 8) ($EOI 6 . 6))))
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuan!rccpxuanyuan!ntp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
