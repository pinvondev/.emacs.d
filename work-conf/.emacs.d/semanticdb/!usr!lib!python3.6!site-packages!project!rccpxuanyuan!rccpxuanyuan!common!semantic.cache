;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module creates rccpxuanyuan configuration from a default rccpxuanyuan
configuration file
under /etc/rccpxuanyuan/rccpxuanyuan.conf. It reads conf files from drop-in
dirs and updates
the configuration according to the files.

The semantics of the directories and the search order is as follows:

- /etc/rccpxuanyuan/rccpxuanyuan.conf - for user configuration. We installed
  this file if missing, and never touch this file during upgrade.
- /etc/rccpxuanyuan/rccpxuanyuan.conf.d/ - for admin drop-in conf files.
- /usr/lib/rccpxuanyuan/rccpxuanyuan.conf.d/ - for vendor drop-in
  configuration files.
- /var/run/rccpxuanyuan/rccpxuanyuan.conf.d/ - for admin temporary
  configuration.

Files with a .conf suffix can be placed into any of the rccpxuanyuan.conf.d
drop-in directories.

The priority of the configuration files is determined by the number prefix of
each file.
\"\"\"" code nil nil [1 885])
            ("os" include nil nil [887 896])
            ("glob" include nil nil [897 908])
            ("shutil" include nil nil [909 922])
            ("functools" include nil nil [923 950])
            ("six.moves" include nil nil [952 986])
            ("rccpxuanyuan.common" include nil nil [988 1029])
            ("rccpxuanyuan.common" include nil nil [1030 1071])
            ("_SYSCONFDIR" variable nil nil [1074 1110])
            ("_SERVICECONFIG_PATH" variable nil nil [1111 1161])
            ("_DROPPIN_BASES" variable nil nil [1162 1214])
            ("_SERVICECONFIG_FILE" code nil nil [1215 1320])
            ("_SERVICECONFIG_FILE_BAK" code nil nil [1321 1443])
            ("PARAMETERS" variable nil nil [1445 27204])
            ("set_defaults" function
               (:documentation " 为每个 section 里面的配置对设置默认值 "
                :arguments 
                  ( ("config_obj" variable nil (reparse-symbol function_parameters) [27224 27234]))                  )
                nil [27207 27439])
            ("load" function
               (:documentation " load config "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [27902 27906]))                  )
                nil [27893 28037])
            ("read_configs" function
               (:documentation "This function is reading config files in a specific scheme

    The function reads - for one component - config files from several
    locations and in addition it is also reading configuration snippets
    from drop-in directories.
    This scheme allows to store the vendor provided (default) configuration
    in a different directory, and override it using either defaults from
    other packages which can then be put into the vendor drop-in dir,
    or users can overwrite the defaults, by placing a complete or partial
    configuration file into /etc or a drop-in directory.
    "
                :arguments 
                  ( ("cfg" variable nil (reparse-symbol function_parameters) [28056 28059])
                    ("name" variable nil (reparse-symbol function_parameters) [28061 28065]))                  )
                nil [28039 28986])
            ("FileConfigureManager" type
               (:documentation "
    配置文件读写类
    职责:
        1. 辅助读写配置文件
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [29115 29157])
                            ("try" code nil (reparse-symbol indented_block_body) [29166 29254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29090 29094])
                            ("filename" variable nil (reparse-symbol function_parameters) [29096 29104]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29077 29254])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29273 29277])
                            ("session" variable nil (reparse-symbol function_parameters) [29279 29286])
                            ("option" variable nil (reparse-symbol function_parameters) [29288 29294])
                            ("default_val" variable nil (reparse-symbol function_parameters) [29296 29307]))                          
                        :documentation "
        获取配置值,如果查询不到返回设置默认值
        ")
                        (reparse-symbol indented_block_body) [29259 29529])
                    ("get_int" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29546 29550])
                            ("session" variable nil (reparse-symbol function_parameters) [29552 29559])
                            ("option" variable nil (reparse-symbol function_parameters) [29561 29567])
                            ("default_val" variable nil (reparse-symbol function_parameters) [29569 29580]))                          
                        :documentation "
        获取整形配置值,如果查询不到返回设置默认值
        ")
                        (reparse-symbol indented_block_body) [29534 29710])
                    ("save_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29730 29734])
                            ("filename" variable nil (reparse-symbol function_parameters) [29736 29744])
                            ("session" variable nil (reparse-symbol function_parameters) [29746 29753])
                            ("option" variable nil (reparse-symbol function_parameters) [29755 29761])
                            ("values" variable nil (reparse-symbol function_parameters) [29763 29769]))                          
                        :documentation "
        设置并保存配置项,如果没有对于可配置项,添加配置项
        ")
                        (reparse-symbol indented_block_body) [29715 30059]))                  
                :type "class")
                nil [28988 30059])
            ("config" variable nil nil [30061 30098])
            ("Singleton" type
               (:documentation "
    单例管理类
    职责：
        1. 创建单例对象
        2. 返回单例类对象
    "
                :members 
                  ( ("_instances" variable nil (reparse-symbol indented_block_body) [30194 30209])
                    ("get_instance" function
                       (:documentation " get singleton instance "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [30249 30252])
                            ("singleton_cls" variable nil (reparse-symbol function_parameters) [30254 30267])
                            ("args" variable nil (reparse-symbol function_parameters) [30269 30274])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30276 30284]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30215 30538]))                  
                :type "class")
                nil [30101 30538])
            ("singleton_wrapper" function
               (:documentation "
    单例类装饰器
    "
                :arguments 
                  ( ("singleton_cls" variable nil (reparse-symbol function_parameters) [30562 30575]))                  )
                nil [30540 30750])
            ("ConfigSetSaveContextManager" type
               (:documentation "
    服务配置设置保存上下文管理类
    职责:
        1. 管理服务配置设置保存上下文
    "
                :members 
                  ( ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30892 30896]))                          )
                        (reparse-symbol indented_block_body) [30878 30912])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30930 30934])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [30936 30944])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [30946 30955])
                            ("exc_tb" variable nil (reparse-symbol function_parameters) [30957 30963]))                          )
                        (reparse-symbol indented_block_body) [30917 31405]))                  
                :type "class")
                nil [30770 31405]))          
      :file "config.py"
      :pointmax 31405
      :fsize 31700
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax '((INDENT_BLOCK 31286 . 31405) (NEWLINE 31285 . 31286) (COLON 31284 . 31285) (TRY 31059 . 31062) (AS 31278 . 31280)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [2836 2874])
            ("__future__" include nil nil [2875 2906])
            ("os" include nil nil [2908 2917])
            ("re" include nil nil [2918 2927])
            ("magic_check" variable nil nil [3021 3056])
            ("magic_check_bytes" variable nil nil [3057 3099])
            ("escape" function
               (:documentation "Escape all special characters.
    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [3113 3121]))                  )
                nil [3102 3566]))          
      :file "glob.py"
      :pointmax 3566
      :fsize 3565
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
define包
定义异常表
\"\"\"" code nil nil [820 841])
            ("__future__" include nil nil [843 881])
            ("__future__" include nil nil [882 913])
            ("rccpxuanyuan.common" include nil nil [914 955])
            ("errCode" variable nil nil [1016 4958])
            ("doneCode" variable nil nil [4960 5013])
            ("Kbytes" variable nil nil [5015 5028])
            ("Mbytes" code nil nil [5029 5051])
            ("ERROR" variable nil nil [5065 5074])
            ("NORMAL" variable nil nil [5075 5085]))          
      :file "define.py"
      :pointmax 5086
      :fsize 5097
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
errors - rccpxuanyuan internal errors

This module provide internal errors which are not part of rccpxuanyuan api, helpers for
error handling. For public rccpxuanyuan errors see rccpxuanyuan.common.exception.
\"\"\"" code nil nil [816 1032])
            ("__future__" include nil nil [1034 1072])
            ("__future__" include nil nil [1073 1104])
            ("Base" type
               (:superclasses ("Exception")
                :members 
                  ( ("msg" variable nil (reparse-symbol indented_block_body) [1134 1176])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1194 1198]))                          )
                        (reparse-symbol indented_block_body) [1182 1243]))                  
                :type "class")
                nil [1107 1243]))          
      :file "errors.py"
      :pointmax 1243
      :fsize 1242
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
序列化和反序列化公共模块
协议：
    1. 反序列化函数命名： cb_deser_$ORIGINAL_METHOD_NAME
    2. 序列化函数命名： cb_ser_$ORIGINAL_METHOD_NAME
    3. 反序列化函数的入参是字典，即消息请求体的content_incoming字段
    4. 返回值是元组(args, kwargs)。
    5. 序列化函数的返回值是字典，即消息响应体的data字段。
\"\"\"" code nil nil [75 302])
            ("uuid" include nil nil [304 315])
            ("inspect" include nil nil [316 345])
            ("functools" include nil nil [346 373])
            ("collections" include nil nil [374 441])
            ("rccpxuanyuan.common" include nil nil [443 484])
            ("rccpxuanyuan.network.ip.address" include nil nil [485 533])
            ("rccpxuanyuan.network.ip.address" include nil nil [534 582])
            ("rccpxuanyuan.network.errors" include nil nil [583 641])
            ("api_wrapper" function
               (:documentation "
    类的装饰器，cls_for_serial是个类，反序列化或序列化被装饰类方法的参数
    "
                :arguments 
                  ( ("cls_for_serial" variable nil (reparse-symbol function_parameters) [660 674]))                  )
                nil [644 2566])
            ("get_api_data" function
               (:documentation "
    获取api接口返回报文中的data字段
    :param func: api接口函数如 self.modify_bond
    :param args: 接口入参必填参数元组如 (bond_name,)
    :param kwargs: 接口入参可选参数字典 {mode=None, slaves=None}
    :return 返回接口报文中的data字段
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2585 2589])
                    ("args" variable nil (reparse-symbol function_parameters) [2591 2596])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [2598 2606]))                  )
                nil [2568 2858])
            ("check_parameter" function
               (:documentation "
    检查参数
    :param value:
    :param func:
    :return:
    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [2880 2885])
                    ("func" variable nil (reparse-symbol function_parameters) [2887 2891]))                  )
                nil [2860 2983])
            ("_check_type" function (:arguments 
              ( ("target_type" variable nil (reparse-symbol function_parameters) [3001 3012]))              ) nil [2985 3232])
            ("check_ipv4" function
               (:documentation " check ipv4 is validate "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [3249 3254]))                  )
                nil [3234 3410])
            ("check_ipv6" function
               (:documentation " check ipv6 is validate "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [3427 3432]))                  )
                nil [3412 3588])
            ("check_uuid" function
               (:documentation " check uuid is validate "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [3605 3610]))                  )
                nil [3590 3747])
            ("split_string" function
               (:documentation "
    根据content和divide对content进行分割并剥去多余首尾空格
    params: content: 字符串如\"a bb   ccc   \"
    params: : 字符串如\"a bb   ccc   \"
    return: 返回字符串列表如[\"a\", \"bb\", \"ccc\"]
    "
                :arguments 
                  ( ("content" variable nil (reparse-symbol function_parameters) [3766 3773])
                    ("divide" variable nil (reparse-symbol function_parameters) [3775 3781]))                  )
                nil [3749 4191])
            ("_check_string_length" function
               (:documentation " check string length is validate "
                :arguments 
                  ( ("min_len" variable nil (reparse-symbol function_parameters) [4218 4225])
                    ("max_len" variable nil (reparse-symbol function_parameters) [4227 4234])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4236 4244]))                  )
                nil [4193 4837])
            ("_check_number_range" function
               (:documentation " check the range of number is validate "
                :arguments 
                  ( ("min_val" variable nil (reparse-symbol function_parameters) [4863 4870])
                    ("max_val" variable nil (reparse-symbol function_parameters) [4872 4879])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4886 4894]))                  )
                nil [4839 5677])
            ("type_assert" function
               (:documentation "类型检查装饰器"
                :arguments 
                  ( ("ty_args" variable nil (reparse-symbol function_parameters) [5695 5703])
                    ("ty_kwargs" variable nil (reparse-symbol function_parameters) [5705 5716]))                  )
                nil [5679 6415])
            ("is_mutable" function
               (:documentation "
    判断对象是否是可变对象（mutable or inmutable）
    参数 check_param：被检查参数对象
    type：多态
    返回值 is_mutalbe：对象是否是可变的
    类型：布尔
    "
                :arguments 
                  ( ("check_param" variable nil (reparse-symbol function_parameters) [6432 6443]))                  )
                nil [6417 6688])
            ("check_parameter_has_value" function
               (:documentation "
    检查参数中是否包含指定字段或属性，如果不包含则抛出异常。
    参数 parameter：被检查参数对象
    type：多态
    参数 value：查找的字段或属性
    type：多态
    "
                :arguments 
                  ( ("parameter" variable nil (reparse-symbol function_parameters) [6720 6729])
                    ("value" variable nil (reparse-symbol function_parameters) [6731 6736]))                  )
                nil [6690 6996])
            ("CHECK_TYPE" variable nil nil [6998 7022])
            ("STRING" variable nil nil [7023 7052])
            ("INT" variable nil nil [7053 7078])
            ("__all__" variable nil nil [7080 7181]))          
      :file "parameter.py"
      :pointmax 7182
      :fsize 7783
      :lastmodtime '(23966 51458 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
api工具模块
提供api使用的装饰器和公共机制
\"\"\"" code nil nil [1 33])
            ("logging" include nil nil [35 49])
            ("collections" include nil nil [50 84])
            ("decorator" include nil nil [85 116])
            ("rccpxuanyuan.common.threadlocal" include nil nil [118 175])
            ("rccpxuanyuan.common" include nil nil [177 218])
            ("rccpxuanyuan.common" include nil nil [219 259])
            ("rccpxuanyuan.common" include nil nil [260 300])
            ("_LOG" variable nil nil [303 334])
            ("Context" variable nil nil [335 403])
            ("catch_error" function
               (:documentation "
    接口异常捕获装饰器
    "
                :arguments 
                  ( ("error_type" variable nil (reparse-symbol function_parameters) [422 432])
                    ("def_ret" variable nil (reparse-symbol function_parameters) [434 441]))                  )
                nil [406 889])
            ("map_adaptation_layer_error" function
               (:documentation "
    适配层异常映射，完成底层异常的包装和映射。
    "
                :arguments 
                  ( ("except_error" variable nil (reparse-symbol function_parameters) [922 934])
                    ("raise_error" variable nil (reparse-symbol function_parameters) [936 947]))                  )
                nil [891 1481])
            ("logged" function
               (:documentation "日志装饰器"
                :arguments 
                  ( ("log_on" variable nil (reparse-symbol function_parameters) [1494 1500]))                  )
                nil [1483 2129])
            ("context_string" function
               (:documentation "
    Internal threads never set vars.context, so we will not have a context
    attribute. RPC threads set context before calling the api, and set
    context to None after that.
    "
                :arguments 
                  ( ("api_object" variable nil (reparse-symbol function_parameters) [2150 2160]))                  )
                nil [2131 3051])
            ("guard" function
               (:documentation "
    Decorator for methods that can be called only under certain conditions.

    Before the method is called, guarding_functions are invoked in their order
    with the same arguments as the method.  They can check for validity of the
    call and raise an exception if the call shouldn't be permitted.

    :param guarding_functions: functions to call with the decorated method
      arguments before the decorated method is actually called
    "
                :arguments 
                  ( ("guarding_functions" variable nil (reparse-symbol function_parameters) [3063 3082]))                  )
                nil [3053 3740])
            ("method" function
               (:documentation "
    Decorate an instance method, and return a response according to the
    outcome of the call.

    If the method returns None, return a plain success response.
    If the method wants to augment the success response, it could return
    a dict. The dict items will be added to the success response.
    The method could override the success response message this way.

    If the method raises a RccpXuanYuanException or one subclass, the decorator
    will produce the corresponding error response.
    If the method raises any other exception, the decorator will produce a
    general exception response with the details of the original error.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [3764 3768])
                    ("args" variable nil (reparse-symbol function_parameters) [3770 3775])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [3777 3785]))                  
                :decorators 
                  ( ("decorator" function (:type "decorator") nil nil))                  )
                nil [3742 5379])
            ("format_logging" function (:arguments 
              ( ("func_name" variable nil (reparse-symbol function_parameters) [5400 5409])
                ("error" variable nil (reparse-symbol function_parameters) [5411 5416])
                ("args" variable nil (reparse-symbol function_parameters) [5418 5423])
                ("kwargs" variable nil (reparse-symbol function_parameters) [5425 5433]))              ) nil [5381 5542]))          
      :file "api.py"
      :pointmax 5542
      :fsize 5645
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("__future__" include nil nil [860 891])
            ("threading" include nil nil [893 909])
            ("locthread_obj" variable nil nil [911 944])
            ("locthread_obj" variable nil nil [945 970])
            ("locthread_obj" variable nil nil [971 999]))          
      :file "threadlocal.py"
      :pointmax 1000
      :fsize 999
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
rccpxuanyuan子系统异常模块
\"\"\"" code nil nil [1 28])
            ("__future__" include nil nil [30 68])
            ("__future__" include nil nil [69 100])
            ("_CODE_VDSM" variable nil nil [103 122])
            ("_CODE_GENERAL" variable nil nil [123 145])
            ("_CODE_GLOBAL" variable nil nil [146 167])
            ("_CODE_VM" variable nil nil [168 185])
            ("_CODE_NETWORK" variable nil nil [186 208])
            ("_CODE_STORAGE" variable nil nil [209 231])
            ("_CODE_EXTERNAL_ADAPTATION" variable nil nil [232 266])
            ("_CODE_UNKNOW" variable nil nil [267 288])
            ("UnknowError" type
               (:documentation "
    未知异常
    "
                :superclasses ("Exception")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [350 369]))                  
                :type "class")
                nil [291 370])
            ("RccpXuanYuanException" type
               (:documentation "
    rccpxuanyuan异常基类
    "
                :superclasses ("Exception")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [454 471])
                    ("message" variable nil (reparse-symbol indented_block_body) [476 510])
                    ("expected" variable nil (reparse-symbol indented_block_body) [516 532])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [550 554]))                          )
                        (reparse-symbol indented_block_body) [538 585])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [599 603]))                          
                        :documentation " return code and corresponding message ")
                        (reparse-symbol indented_block_body) [590 717])
                    ("response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [735 739]))                          
                        :documentation " return info ")
                        (reparse-symbol indented_block_body) [722 810]))                  
                :type "class")
                nil [372 810])
            ("expected" function
               (:documentation "
    Mark an exception as expected.
    "
                :arguments 
                  ( ("error" variable nil (reparse-symbol function_parameters) [825 830]))                  )
                nil [812 927])
            ("ContextException" type
               (:documentation "
    Adds reason and context arguments for better error messages.

    This is a temporary class to be used while we convert old exceptions to the
    new calling style. Once all calls are using kwargs call style, we merge
    this class into RccpXuanYuanException.
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("context" variable nil (reparse-symbol indented_block_body) [1334 1348])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        There are 3 ways to initialize an instance:

        - no arguments - discouraged in general, but there may be valid use
          cases for this.
        - reason only - prevent unexpected failures in runtime when trying to
          use this exception in the usual way.
        - reason and kwargs - the recommended way to use this class.

        All the arguments are stored in the context instance variable.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1405 1841])
                            ("super" code nil (reparse-symbol indented_block_body) [1850 1890])
                            ("self" variable nil (reparse-symbol indented_block_body) [1899 1920])
                            ("if" code nil (reparse-symbol indented_block_body) [1929 1984]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1367 1371])
                            ("reason" variable nil (reparse-symbol function_parameters) [1373 1379])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1386 1394]))                          
                        :documentation "
        There are 3 ways to initialize an instance:

        - no arguments - discouraged in general, but there may be valid use
          cases for this.
        - reason only - prevent unexpected failures in runtime when trying to
          use this exception in the usual way.
        - reason and kwargs - the recommended way to use this class.

        All the arguments are stored in the context instance variable.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1354 1984])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2001 2005]))                          )
                        (reparse-symbol indented_block_body) [1989 2120]))                  
                :type "class")
                nil [929 2120])
            ("NoSuchVM" type
               (:documentation "
    虚机不存在异常
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [2189 2203])
                    ("message" variable nil (reparse-symbol indented_block_body) [2208 2250]))                  
                :type "class")
                nil [2122 2251])
            ("AccessTimeout" type
               (:documentation "
    AccessTimeout
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [2355 2369])
                    ("message" variable nil (reparse-symbol indented_block_body) [2374 2417]))                  
                :type "class")
                nil [2272 2418])
            ("VMExists" type
               (:documentation "
    VMExists
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [2492 2506])
                    ("message" variable nil (reparse-symbol indented_block_body) [2511 2553]))                  
                :type "class")
                nil [2420 2554])
            ("UnsupportedVMType" type
               (:documentation "
    UnsupportedVMType
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [2646 2660])
                    ("message" variable nil (reparse-symbol indented_block_body) [2665 2696]))                  
                :type "class")
                nil [2556 2697])
            ("VMIsDown" type
               (:documentation "
    VMIsDown
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [2771 2785])
                    ("message" variable nil (reparse-symbol indented_block_body) [2790 2825]))                  
                :type "class")
                nil [2699 2826])
            ("CopyFailed" type
               (:documentation "
    CopyFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [2904 2918])
                    ("message" variable nil (reparse-symbol indented_block_body) [2923 2946]))                  
                :type "class")
                nil [2828 2947])
            ("CannotCreateSparse" type
               (:documentation "
    CannotCreateSparse
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [3041 3055])
                    ("message" variable nil (reparse-symbol indented_block_body) [3060 3094]))                  
                :type "class")
                nil [2949 3095])
            ("CannotCreateVM" type
               (:documentation "
    CannotCreateVM
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [3181 3195])
                    ("message" variable nil (reparse-symbol indented_block_body) [3200 3243]))                  
                :type "class")
                nil [3097 3244])
            ("NoConnectionToPeer" type
               (:documentation "
    NoConnectionToPeer
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [3338 3352])
                    ("message" variable nil (reparse-symbol indented_block_body) [3357 3398]))                  
                :type "class")
                nil [3246 3399])
            ("MissingParameter" type
               (:documentation "
    MissingParameter
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [3484 3498])
                    ("message" variable nil (reparse-symbol indented_block_body) [3503 3541]))                  
                :type "class")
                nil [3401 3542])
            ("MigrationError" type
               (:documentation "
    MigrationError
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [3628 3642])
                    ("message" variable nil (reparse-symbol indented_block_body) [3647 3687]))                  
                :type "class")
                nil [3544 3688])
            ("ImageFileNotFound" type
               (:documentation "
    ImageFileNotFound
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [3780 3794])
                    ("message" variable nil (reparse-symbol indented_block_body) [3799 3846]))                  
                :type "class")
                nil [3690 3847])
            ("OutOfMemory" type
               (:documentation "
    OutOfMemory
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [3927 3941])
                    ("message" variable nil (reparse-symbol indented_block_body) [3946 3993]))                  
                :type "class")
                nil [3849 3994])
            ("UnexpectedError" type
               (:documentation "
    UnexpectedError
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [4082 4096])
                    ("message" variable nil (reparse-symbol indented_block_body) [4101 4133]))                  
                :type "class")
                nil [3996 4134])
            ("UnsupportedImageFormat" type
               (:documentation "
    UnsupportedImageFormat
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [4236 4250])
                    ("message" variable nil (reparse-symbol indented_block_body) [4255 4291]))                  
                :type "class")
                nil [4136 4292])
            ("SpiceTicketError" type
               (:documentation "
    SpiceTicketError
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [4382 4396])
                    ("message" variable nil (reparse-symbol indented_block_body) [4401 4445]))                  
                :type "class")
                nil [4294 4446])
            ("NonResponsiveGuestAgent" type
               (:documentation "
    NonResponsiveGuestAgent
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [4550 4564])
                    ("message" variable nil (reparse-symbol indented_block_body) [4569 4607]))                  
                :type "class")
                nil [4448 4608])
            ("ResourceUnavailable" type
               (:documentation "
    ResourceUnavailable
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [4836 4850])
                    ("message" variable nil (reparse-symbol indented_block_body) [4855 4882]))                  
                :type "class")
                nil [4742 4883])
            ("ChangeDiskFailed" type
               (:documentation "
    ChangeDiskFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [4973 4987])
                    ("message" variable nil (reparse-symbol indented_block_body) [4992 5031]))                  
                :type "class")
                nil [4885 5032])
            ("VMDestroyFailed" type
               (:documentation "
    VMDestroyFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [5120 5134])
                    ("message" variable nil (reparse-symbol indented_block_body) [5139 5180]))                  
                :type "class")
                nil [5034 5181])
            ("UnsupportedFenceAgent" type
               (:documentation "
    UnsupportedFenceAgent
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [5281 5295])
                    ("message" variable nil (reparse-symbol indented_block_body) [5300 5337]))                  
                :type "class")
                nil [5183 5338])
            ("MethodNotImplemented" type
               (:documentation "
    MethodNotImplemented
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [5436 5450])
                    ("message" variable nil (reparse-symbol indented_block_body) [5455 5482]))                  
                :type "class")
                nil [5340 5483])
            ("HotplugDiskFailed" type
               (:documentation "
    HotplugDiskFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [5575 5589])
                    ("message" variable nil (reparse-symbol indented_block_body) [5594 5628]))                  
                :type "class")
                nil [5485 5629])
            ("HotunplugDiskFailed" type
               (:documentation "
    HotunplugDiskFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [5725 5739])
                    ("message" variable nil (reparse-symbol indented_block_body) [5744 5780]))                  
                :type "class")
                nil [5631 5781])
            ("MigrationCancelationFailed" type
               (:documentation "
    MigrationCancelationFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [5891 5905])
                    ("message" variable nil (reparse-symbol indented_block_body) [5910 5947]))                  
                :type "class")
                nil [5783 5948])
            ("SnapshotFailed" type
               (:documentation "
    SnapshotFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [6034 6048])
                    ("message" variable nil (reparse-symbol indented_block_body) [6053 6080]))                  
                :type "class")
                nil [5950 6081])
            ("HotplugNicFailed" type
               (:documentation "
    HotplugNicFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [6171 6185])
                    ("message" variable nil (reparse-symbol indented_block_body) [6190 6223]))                  
                :type "class")
                nil [6083 6224])
            ("HotunplugNicFailed" type
               (:documentation "
    HotunplugNicFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [6318 6332])
                    ("message" variable nil (reparse-symbol indented_block_body) [6337 6372]))                  
                :type "class")
                nil [6226 6373])
            ("MigrationInProgress" type
               (:documentation "
    MigrationInProgress
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [6464 6478])
                    ("message" variable nil (reparse-symbol indented_block_body) [6483 6533]))                  
                :type "class")
                nil [6375 6534])
            ("MergeFailed" type
               (:documentation "
    MergeFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [6614 6628])
                    ("message" variable nil (reparse-symbol indented_block_body) [6633 6657]))                  
                :type "class")
                nil [6536 6658])
            ("BalloonError" type
               (:documentation "
    BalloonError
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [6740 6754])
                    ("message" variable nil (reparse-symbol indented_block_body) [6759 6805]))                  
                :type "class")
                nil [6660 6806])
            ("MOMPolicyUpdateFailed" type
               (:documentation "
    MOMPolicyUpdateFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [6906 6920])
                    ("message" variable nil (reparse-symbol indented_block_body) [6925 6961]))                  
                :type "class")
                nil [6808 6962])
            ("ReplicaError" type
               (:documentation "
    ReplicaError
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [7044 7058])
                    ("message" variable nil (reparse-symbol indented_block_body) [7063 7098]))                  
                :type "class")
                nil [6964 7099])
            ("UpdateDeviceFailed" type
               (:documentation "
    UpdateDeviceFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [7193 7207])
                    ("message" variable nil (reparse-symbol indented_block_body) [7212 7247]))                  
                :type "class")
                nil [7101 7248])
            ("CannotRetrieveHWInfo" type
               (:documentation "
    CannotRetrieveHWInfo
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [7346 7360])
                    ("message" variable nil (reparse-symbol indented_block_body) [7365 7412]))                  
                :type "class")
                nil [7250 7413])
            ("BadDiskResizeParameter" type
               (:documentation "
    BadDiskResizeParameter
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [7515 7529])
                    ("message" variable nil (reparse-symbol indented_block_body) [7534 7573]))                  
                :type "class")
                nil [7415 7574])
            ("TransientError" type
               (:documentation "
    TransientError
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [7660 7674])
                    ("message" variable nil (reparse-symbol indented_block_body) [7679 7740]))                  
                :type "class")
                nil [7576 7741])
            ("SetNumberOfCpusFailed" type
               (:documentation "
    SetNumberOfCpusFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [7841 7855])
                    ("message" variable nil (reparse-symbol indented_block_body) [7860 7904]))                  
                :type "class")
                nil [7743 7905])
            ("SetHAPolicyFailed" type
               (:documentation "
    SetHAPolicyFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [7997 8011])
                    ("message" variable nil (reparse-symbol indented_block_body) [8016 8065]))                  
                :type "class")
                nil [7907 8066])
            ("CpuTuneError" type
               (:documentation "
    CpuTuneError
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [8148 8162])
                    ("message" variable nil (reparse-symbol indented_block_body) [8167 8213]))                  
                :type "class")
                nil [8068 8214])
            ("UpdateVMPolicyFailed" type
               (:documentation "
    UpdateVMPolicyFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [8312 8326])
                    ("message" variable nil (reparse-symbol indented_block_body) [8331 8373]))                  
                :type "class")
                nil [8216 8374])
            ("UpdateIOTuneError" type
               (:documentation "
    UpdateIOTuneError
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [8461 8475])
                    ("message" variable nil (reparse-symbol indented_block_body) [8480 8522]))                  
                :type "class")
                nil [8376 8523])
            ("V2VConnectionError" type
               (:documentation "
    V2VConnectionError
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [8617 8631])
                    ("message" variable nil (reparse-symbol indented_block_body) [8636 8678]))                  
                :type "class")
                nil [8525 8679])
            ("NoSuchJob" type
               (:documentation "
    NoSuchJob
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [8755 8769])
                    ("message" variable nil (reparse-symbol indented_block_body) [8774 8808]))                  
                :type "class")
                nil [8681 8809])
            ("V2VNoSuchOVF" type
               (:documentation "
    V2VNoSuchOVF
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [8891 8905])
                    ("message" variable nil (reparse-symbol indented_block_body) [8910 8946]))                  
                :type "class")
                nil [8811 8947])
            ("JobNotDone" type
               (:documentation "
    JobNotDone
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [9025 9039])
                    ("message" variable nil (reparse-symbol indented_block_body) [9044 9078]))                  
                :type "class")
                nil [8949 9079])
            ("JobExists" type
               (:documentation "
    JobExists
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [9155 9169])
                    ("message" variable nil (reparse-symbol indented_block_body) [9174 9207]))                  
                :type "class")
                nil [9081 9208])
            ("HotplugMemFailed" type
               (:documentation "
    HotplugMemFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [9298 9312])
                    ("message" variable nil (reparse-symbol indented_block_body) [9317 9353]))                  
                :type "class")
                nil [9210 9354])
            ("KSMUpdateFailed" type
               (:documentation "
    KSMUpdateFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [9442 9456])
                    ("message" variable nil (reparse-symbol indented_block_body) [9461 9500]))                  
                :type "class")
                nil [9356 9501])
            ("BadSecretRequest" type
               (:documentation "
    BadSecretRequest
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [9591 9605])
                    ("message" variable nil (reparse-symbol indented_block_body) [9610 9640]))                  
                :type "class")
                nil [9503 9641])
            ("SecretRegistrationFailed" type
               (:documentation "
    SecretRegistrationFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [9747 9761])
                    ("message" variable nil (reparse-symbol indented_block_body) [9766 9810]))                  
                :type "class")
                nil [9643 9811])
            ("SecretUnregistrationFailed" type
               (:documentation "
    SecretUnregistrationFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [9921 9935])
                    ("message" variable nil (reparse-symbol indented_block_body) [9940 9986]))                  
                :type "class")
                nil [9813 9987])
            ("UnsupportedOperation" type
               (:documentation "
    UnsupportedOperation
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [10080 10094])
                    ("message" variable nil (reparse-symbol indented_block_body) [10099 10134]))                  
                :type "class")
                nil [9989 10135])
            ("FreezeGuestFSFailed" type
               (:documentation "
    FreezeGuestFSFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [10231 10245])
                    ("message" variable nil (reparse-symbol indented_block_body) [10250 10296]))                  
                :type "class")
                nil [10137 10297])
            ("ThawGuestFSFailed" type
               (:documentation "
    ThawGuestFSFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [10389 10403])
                    ("message" variable nil (reparse-symbol indented_block_body) [10408 10452]))                  
                :type "class")
                nil [10299 10453])
            ("HookFailed" type
               (:documentation "
    HookFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [10531 10545])
                    ("message" variable nil (reparse-symbol indented_block_body) [10550 10572]))                  
                :type "class")
                nil [10455 10573])
            ("DestinationVolumeTooSmall" type
               (:documentation "
    DestinationVolumeTooSmall
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [10681 10695])
                    ("message" variable nil (reparse-symbol indented_block_body) [10700 10743]))                  
                :type "class")
                nil [10575 10744])
            ("AbortNotSupported" type
               (:documentation "
    AbortNotSupported
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [10836 10850])
                    ("message" variable nil (reparse-symbol indented_block_body) [10855 10896]))                  
                :type "class")
                nil [10746 10897])
            ("MigrationNotInProgress" type
               (:documentation "
    MigrationNotInProgress
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [10999 11013])
                    ("message" variable nil (reparse-symbol indented_block_body) [11018 11055]))                  
                :type "class")
                nil [10899 11056])
            ("MigrationLimitExceeded" type
               (:documentation "
    MigrationLimitExceeded
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [11158 11172])
                    ("message" variable nil (reparse-symbol indented_block_body) [11177 11222]))                  
                :type "class")
                nil [11058 11223])
            ("HostdevDetachFailed" type
               (:documentation "
    HostdevDetachFailed
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [11319 11333])
                    ("message" variable nil (reparse-symbol indented_block_body) [11338 11378]))                  
                :type "class")
                nil [11225 11379])
            ("JobNotActive" type
               (:documentation "
    JobNotActive
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [11461 11475])
                    ("message" variable nil (reparse-symbol indented_block_body) [11480 11509]))                  
                :type "class")
                nil [11381 11510])
            ("HotunplugMemFailed" type
               (:documentation "
    HotunplugMemFailed
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [11599 11613])
                    ("message" variable nil (reparse-symbol indented_block_body) [11618 11656]))                  
                :type "class")
                nil [11512 11657])
            ("HotplugLeaseFailed" type
               (:documentation "
    HotplugLeaseFailed
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [11746 11760])
                    ("message" variable nil (reparse-symbol indented_block_body) [11765 11800]))                  
                :type "class")
                nil [11659 11801])
            ("HotunplugLeaseFailed" type
               (:documentation "
    HotunplugLeaseFailed
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [11894 11908])
                    ("message" variable nil (reparse-symbol indented_block_body) [11913 11950]))                  
                :type "class")
                nil [11803 11951])
            ("ReplicationNotInProgress" type
               (:documentation "
    ReplicationNotInProgress
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [12052 12066])
                    ("message" variable nil (reparse-symbol indented_block_body) [12071 12111]))                  
                :type "class")
                nil [11953 12112])
            ("RecoveryInProgress" type
               (:documentation "
    RecoveryInProgress
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [12206 12220])
                    ("message" variable nil (reparse-symbol indented_block_body) [12225 12274]))                  
                :type "class")
                nil [12114 12275])
            ("GeneralException" type
               (:documentation "
    GeneralException
    "
                :superclasses ("RccpXuanYuanException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [12365 12385])
                    ("message" variable nil (reparse-symbol indented_block_body) [12390 12419])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [12461 12501])
                            ("self" variable nil (reparse-symbol indented_block_body) [12510 12528]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12438 12442])
                            ("value" variable nil (reparse-symbol function_parameters) [12444 12450]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12425 12529])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12546 12550]))                          )
                        (reparse-symbol indented_block_body) [12534 12612]))                  
                :type "class")
                nil [12277 12612])
            ("InvalidConfiguration" type
               (:documentation "
    InvalidConfiguration
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [12705 12718])
                    ("message" variable nil (reparse-symbol indented_block_body) [12723 12762]))                  
                :type "class")
                nil [12614 12763])
            ("ActionStopped" type
               (:documentation "
    ActionStopped
    "
                :superclasses ("GeneralException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [12842 12855])
                    ("message" variable nil (reparse-symbol indented_block_body) [12860 12890]))                  
                :type "class")
                nil [12765 12891])
            ("ResourceExhausted" type
               (:documentation "
    ResourceExhausted
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [12978 12991])
                    ("message" variable nil (reparse-symbol indented_block_body) [12996 13028]))                  
                :type "class")
                nil [12893 13029])
            ("HookError" type
               (:documentation "
    HookError
    "
                :superclasses ("GeneralException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [13100 13113])
                    ("message" variable nil (reparse-symbol indented_block_body) [13118 13140]))                  
                :type "class")
                nil [13031 13141])
            ("GenDeserializateFailed" type
               (:documentation "
    反序列化错误
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [13223 13236])
                    ("message" variable nil (reparse-symbol indented_block_body) [13241 13273]))                  
                :type "class")
                nil [13143 13274])
            ("GenInvaidInput" type
               (:documentation "
    入参非法
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [13346 13359])
                    ("message" variable nil (reparse-symbol indented_block_body) [13364 13396]))                  
                :type "class")
                nil [13276 13397])
            ("GenSuperRccpXuanYuanServiceException" type
               (:documentation "
    超级xuanyuan服务执行异常
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [13503 13516])
                    ("message" variable nil (reparse-symbol indented_block_body) [13521 13565]))                  
                :type "class")
                nil [13399 13566])
            ("GenNoConnectionToSuperXuanYuanException" type
               (:documentation "
    连接超级xuanyuan服务失败
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [13675 13688])
                    ("message" variable nil (reparse-symbol indented_block_body) [13693 13747]))                  
                :type "class")
                nil [13568 13748])
            ("GenNoConnectionToLibvirtd" type
               (:documentation "
    连接libvirt服务失败
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [13840 13853])
                    ("message" variable nil (reparse-symbol indented_block_body) [13858 13906]))                  
                :type "class")
                nil [13750 13907])
            ("GenWriteConfigFailed" type
               (:documentation "
    写配置文件失败
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [13988 14001])
                    ("message" variable nil (reparse-symbol indented_block_body) [14006 14047]))                  
                :type "class")
                nil [13909 14048])
            ("GlobalException" type
               (:documentation "
    Global模块异常基类
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [14129 14142])
                    ("message" variable nil (reparse-symbol indented_block_body) [14147 14175]))                  
                :type "class")
                nil [14050 14176])
            ("GloErrorPlatformId" type
               (:documentation "
    平台标识错误
    "
                :superclasses ("GlobalException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [14253 14266])
                    ("message" variable nil (reparse-symbol indented_block_body) [14271 14306]))                  
                :type "class")
                nil [14178 14307])
            ("GloGetHostIdFailed" type
               (:documentation "
    获取主机标识失败
    "
                :superclasses ("GlobalException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [14386 14399])
                    ("message" variable nil (reparse-symbol indented_block_body) [14404 14436]))                  
                :type "class")
                nil [14309 14437])
            ("GloNTPThresholdError" type
               (:documentation "
    NTP 阈值设置错误
    "
                :superclasses ("GlobalException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [14520 14533])
                    ("message" variable nil (reparse-symbol indented_block_body) [14538 14629]))                  
                :type "class")
                nil [14439 14630])
            ("GloNotHANode" type
               (:documentation "
    参数检查异常
    "
                :superclasses ("GlobalException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [14701 14714])
                    ("message" variable nil (reparse-symbol indented_block_body) [14719 14742]))                  
                :type "class")
                nil [14632 14743])
            ("VMException" type
               (:documentation "
    虚拟机模块异常基类
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [14848 14861])
                    ("message" variable nil (reparse-symbol indented_block_body) [14866 14890]))                  
                :type "class")
                nil [14776 14891])
            ("VMGetLibvirtConnectionFailed" type
               (:documentation "
    获取libvirt连接失败异常
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [14983 14996])
                    ("message" variable nil (reparse-symbol indented_block_body) [15001 15042]))                  
                :type "class")
                nil [14893 15043])
            ("VMNotExist" type
               (:documentation "
    指定虚拟机不存在
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [15110 15123])
                    ("message" variable nil (reparse-symbol indented_block_body) [15128 15175]))                  
                :type "class")
                nil [15045 15176])
            ("VMEventTimeoutError" type
               (:documentation "
    虚拟机操作事件等待超时异常
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [15257 15270])
                    ("message" variable nil (reparse-symbol indented_block_body) [15275 15327]))                  
                :type "class")
                nil [15178 15328])
            ("VMExecutePOSInterfaceError" type
               (:documentation "
    执行POS接口异常
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [15412 15425])
                    ("message" variable nil (reparse-symbol indented_block_body) [15430 15477]))                  
                :type "class")
                nil [15330 15478])
            ("VMGetPOSConnectionFailed" type
               (:documentation "
    获取POS服务连接异常
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [15562 15575])
                    ("message" variable nil (reparse-symbol indented_block_body) [15580 15624]))                  
                :type "class")
                nil [15480 15625])
            ("VMParameterError" type
               (:documentation "
    虚拟机配置错误异常
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [15699 15712])
                    ("message" variable nil (reparse-symbol indented_block_body) [15717 15761]))                  
                :type "class")
                nil [15627 15762])
            ("VMDeviceParameterError" type
               (:documentation "
    虚拟设备配置错误异常
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [15843 15856])
                    ("message" variable nil (reparse-symbol indented_block_body) [15861 15904]))                  
                :type "class")
                nil [15764 15905])
            ("VMDiskMultipleBooter" type
               (:documentation "
    virtual disk configure multiable booter error
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [16019 16032])
                    ("message" variable nil (reparse-symbol indented_block_body) [16037 16094]))                  
                :type "class")
                nil [15907 16095])
            ("VMDiskMultipleVdiskId" type
               (:documentation "
    virtual disk configure different vdisk identify error
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [16218 16231])
                    ("message" variable nil (reparse-symbol indented_block_body) [16236 16295]))                  
                :type "class")
                nil [16097 16296])
            ("VMDiskPathError" type
               (:documentation "
    virtual disk path error
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [16383 16396])
                    ("message" variable nil (reparse-symbol indented_block_body) [16401 16436]))                  
                :type "class")
                nil [16298 16437])
            ("JSONRPCException" type
               (:documentation "Raised when connection error"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [16525 16538])
                    ("message" variable nil (reparse-symbol indented_block_body) [16543 16579]))                  
                :type "class")
                nil [16439 16580])
            ("JSONRPCParameterError" type
               (:documentation "The parameters of JSONRPC incorrect."
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [16680 16693]))                  
                :type "class")
                nil [16582 16694])
            ("POSDriverException" type
               (:documentation "虚拟访问层异常"
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [16762 16775])
                    ("message" variable nil (reparse-symbol indented_block_body) [16780 16806]))                  
                :type "class")
                nil [16696 16807])
            ("VMResourceMutex" type
               (:documentation "
    虚拟机资源互斥
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [16878 16891])
                    ("message" variable nil (reparse-symbol indented_block_body) [16896 16938]))                  
                :type "class")
                nil [16809 16939])
            ("VMDiskGetVDiskFailed" type
               (:documentation "
    获取VDisk Id失败
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [17020 17033])
                    ("message" variable nil (reparse-symbol indented_block_body) [17038 17092]))                  
                :type "class")
                nil [16941 17093])
            ("CheckParameterError" type
               (:documentation "
    参数检查异常
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [17167 17180])
                    ("message" variable nil (reparse-symbol indented_block_body) [17185 17221]))                  
                :type "class")
                nil [17095 17222])
            ("LackOfResource" type
               (:documentation "
    参数检查异常
    "
                :superclasses ("VMException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [17291 17304])
                    ("message" variable nil (reparse-symbol indented_block_body) [17309 17358]))                  
                :type "class")
                nil [17224 17359])
            ("BadParameter" type
               (:documentation "
    参数错误
    add by pmj
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [17537 17550])
                    ("message" variable nil (reparse-symbol indented_block_body) [17555 17580]))                  
                :type "class")
                nil [17454 17581])
            ("ShellExecError" type
               (:documentation "
    shell命令执行错误
    add by pmj
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [17675 17688])
                    ("message" variable nil (reparse-symbol indented_block_body) [17693 17721]))                  
                :type "class")
                nil [17583 17722])
            ("VerbIsExecuting" type
               (:documentation "
    设备操作正在被执行
    add by pmj
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [17815 17828])
                    ("message" variable nil (reparse-symbol indented_block_body) [17833 17886]))                  
                :type "class")
                nil [17724 17887])
            ("NetDeserializateFailed" type
               (:documentation "
      网络接口反序列化失败
      add by pmj
      "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [17994 18007])
                    ("message" variable nil (reparse-symbol indented_block_body) [18012 18052]))                  
                :type "class")
                nil [17889 18053])
            ("OVSAlreadyExists" type
               (:documentation "
      OVS设备已存在
      add by pmj
      "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [18151 18164])
                    ("message" variable nil (reparse-symbol indented_block_body) [18169 18198]))                  
                :type "class")
                nil [18054 18199])
            ("SetOVSConnectOVNError" type
               (:documentation "
    设置OVS连接OVN异常
    add by ljq
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [18300 18313])
                    ("message" variable nil (reparse-symbol indented_block_body) [18318 18355]))                  
                :type "class")
                nil [18201 18356])
            ("POSException" type
               (:documentation "
    新增一个更新message的构造函数，用来子异常的输出
    "
                :superclasses ("ContextException")
                :members 
                  ( ("message" variable nil (reparse-symbol indented_block_body) [18467 18488])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [18536 18572])
                            ("if" code nil (reparse-symbol indented_block_body) [18581 18657]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18507 18511])
                            ("reason" variable nil (reparse-symbol function_parameters) [18513 18519]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18494 18656]))                  
                :type "class")
                nil [18377 18656])
            ("ISCSIConfAlreadyExists" type
               (:documentation "
    iSCSI连接配置已存在
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [18740 18753])
                    ("message" variable nil (reparse-symbol indented_block_body) [18758 18811]))                  
                :type "class")
                nil [18658 18812])
            ("ISCSIConfNotFound" type
               (:documentation "
    iSCSI连接配置不存在
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [18891 18904])
                    ("message" variable nil (reparse-symbol indented_block_body) [18909 18958]))                  
                :type "class")
                nil [18814 18959])
            ("ISCSISessionLoginFailed" type
               (:documentation "
    iSCSI会话登录失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [19043 19056])
                    ("message" variable nil (reparse-symbol indented_block_body) [19061 19099]))                  
                :type "class")
                nil [18961 19100])
            ("ISCSISessionLogoffFailed" type
               (:documentation "
    iSCSI会话登出失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [19185 19198])
                    ("message" variable nil (reparse-symbol indented_block_body) [19203 19242]))                  
                :type "class")
                nil [19102 19243])
            ("LUNLockAcquireFailed" type
               (:documentation "
    LUN锁获得失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [19321 19334])
                    ("message" variable nil (reparse-symbol indented_block_body) [19339 19374]))                  
                :type "class")
                nil [19245 19375])
            ("LUNLockReleaseFailed" type
               (:documentation "
    LUN锁释放失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [19453 19466])
                    ("message" variable nil (reparse-symbol indented_block_body) [19471 19506]))                  
                :type "class")
                nil [19377 19507])
            ("ISCSISessionAlreadyExists" type
               (:documentation "
    iSCSI连接会话已存在
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [19594 19607])
                    ("message" variable nil (reparse-symbol indented_block_body) [19612 19662]))                  
                :type "class")
                nil [19509 19663])
            ("SharedMemoryCheckFailed" type
               (:documentation "
    共享内存检查不通过
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [19760 19773])
                    ("message" variable nil (reparse-symbol indented_block_body) [19778 19816]))                  
                :type "class")
                nil [19681 19817])
            ("HugePageSizeCheckFailed" type
               (:documentation "
    大页内存检查失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [19897 19910])
                    ("message" variable nil (reparse-symbol indented_block_body) [19915 19954]))                  
                :type "class")
                nil [19819 19955])
            ("NrhugeSettingFailed" type
               (:documentation "
    大页内存数量设置失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [20033 20046])
                    ("message" variable nil (reparse-symbol indented_block_body) [20051 20094]))                  
                :type "class")
                nil [19957 20095])
            ("CPUBondCheckFailed" type
               (:documentation "
    CPU核心绑定失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [20171 20184])
                    ("message" variable nil (reparse-symbol indented_block_body) [20189 20222]))                  
                :type "class")
                nil [20097 20223])
            ("StorageNicSpeedChkFailed" type
               (:documentation "
    存储网络接口速率检测失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [20308 20321])
                    ("message" variable nil (reparse-symbol indented_block_body) [20326 20387]))                  
                :type "class")
                nil [20225 20388])
            ("SSDStateCheckFailed" type
               (:documentation "
    SSD硬盘状态检测失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [20467 20480])
                    ("message" variable nil (reparse-symbol indented_block_body) [20485 20519]))                  
                :type "class")
                nil [20390 20520])
            ("POSNodeAddFailed" type
               (:documentation "
    P-OS添加节点失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [20595 20608])
                    ("message" variable nil (reparse-symbol indented_block_body) [20613 20645]))                  
                :type "class")
                nil [20522 20646])
            ("POSNodeRemoveFailed" type
               (:documentation "
    P-OS删除节点失败
    "
                :superclasses ("POSException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [20724 20737])
                    ("message" variable nil (reparse-symbol indented_block_body) [20742 20777]))                  
                :type "class")
                nil [20648 20778])
            ("TaskExceptionBase" type
               (:documentation "
    task module base error
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [20922 20935])
                    ("message" variable nil (reparse-symbol indented_block_body) [20940 20974]))                  
                :type "class")
                nil [20831 20975])
            ("TaskManagerStartFailed" type
               (:documentation "
    task manager start task failed
    "
                :superclasses ("TaskExceptionBase")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [21082 21095])
                    ("message" variable nil (reparse-symbol indented_block_body) [21100 21142]))                  
                :type "class")
                nil [20977 21143])
            ("TaskManagerStopFailed" type
               (:documentation "
    task manager stop tasks failed
    "
                :superclasses ("TaskExceptionBase")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [21249 21262])
                    ("message" variable nil (reparse-symbol indented_block_body) [21267 21309]))                  
                :type "class")
                nil [21145 21310])
            ("TaskManagerProcessTaskFailed" type
               (:documentation "
    task manager process task failed
    "
                :superclasses ("TaskExceptionBase")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [21425 21438])
                    ("message" variable nil (reparse-symbol indented_block_body) [21443 21487]))                  
                :type "class")
                nil [21312 21488])
            ("TaskManagerLoadTasksFailed" type
               (:documentation "
    task manager load tasks failed
    "
                :superclasses ("TaskExceptionBase")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [21599 21612])
                    ("message" variable nil (reparse-symbol indented_block_body) [21617 21659]))                  
                :type "class")
                nil [21490 21660])
            ("ExternalAdaptationException" type
               (:documentation "
    Execute libvirt interface general error
    "
                :superclasses ("ContextException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [21806 21819])
                    ("message" variable nil (reparse-symbol indented_block_body) [21824 21875]))                  
                :type "class")
                nil [21688 21876])
            ("LibvirtInterfaceException" type
               (:documentation "
    Execute libvirt interface general error
    "
                :superclasses ("ExternalAdaptationException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [22005 22018])
                    ("message" variable nil (reparse-symbol indented_block_body) [22023 22074]))                  
                :type "class")
                nil [21878 22075])
            ("LibvirtEventAlreadyPolling" type
               (:documentation "
    Already start polling libvirt event
    "
                :superclasses ("ExternalAdaptationException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [22201 22214])
                    ("message" variable nil (reparse-symbol indented_block_body) [22219 22266]))                  
                :type "class")
                nil [22077 22267])
            ("XuanyuanNotifyTargetIpError" type
               (:documentation "
    消息通知目标IP错误
    "
                :superclasses ("ExternalAdaptationException")
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [22369 22382])
                    ("message" variable nil (reparse-symbol indented_block_body) [22387 22439]))                  
                :type "class")
                nil [22269 22440]))          
      :file "exception.py"
      :pointmax 22440
      :fsize 23251
      :lastmodtime '(23974 45884 289132 612000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
logutils包
提供log相关帮助函数
\"\"\"" code nil nil [820 849])
            ("__future__" include nil nil [851 889])
            ("__future__" include nil nil [890 921])
            ("collections" include nil nil [923 941])
            ("datetime" include nil nil [942 957])
            ("functools" include nil nil [958 974])
            ("grp" include nil nil [975 985])
            ("logging" include nil nil [986 1000])
            ("logging.handlers" include nil nil [1001 1024])
            ("os" include nil nil [1025 1034])
            ("pwd" include nil nil [1035 1045])
            ("threading" include nil nil [1046 1062])
            ("time" include nil nil [1063 1074])
            ("dateutil" include nil nil [1076 1099])
            ("inspect" include nil nil [1100 1128])
            ("six" include nil nil [1130 1140])
            ("concurrent" include nil nil [1149 1166])
            ("func_name" function
               (:documentation "
    查询方法或成员方法的方法名
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1183 1187]))                  )
                nil [1169 1376])
            ("call2str" function
               (:documentation "
    方法名入参转调用语句字符串
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1391 1395])
                    ("args" variable nil (reparse-symbol function_parameters) [1397 1401])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [1403 1409])
                    ("printers" variable nil (reparse-symbol function_parameters) [1411 1419]))                  )
                nil [1378 2230])
            ("SimpleLogAdapter" type
               (:superclasses ("logging.LoggerAdapter")
                :members 
                  ( ("warn" variable nil (reparse-symbol indented_block_body) [2407 2443])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize an adapter with a logger and a dict-like object which
        provides contextual information. The contextual information is
        prepended to each log message.

        This adapter::

            self.log = SimpleLogAdapter(self.log, {\"task\": \"xxxyyy\",
                                                   \"res\", \"foo.bar.baz\"})
            self.log.debug(\"Message\")

        Would produce this message::

            \"(task='xxxyyy', res='foo.bar.baz') Message\"
        \"\"\"" code nil (reparse-symbol indented_block_body) [2494 2994])
                            ("self" variable nil (reparse-symbol indented_block_body) [3003 3023])
                            ("items" variable nil (reparse-symbol indented_block_body) [3032 3117])
                            ("self" code nil (reparse-symbol indented_block_body) [3126 3155]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2462 2466])
                            ("logger" variable nil (reparse-symbol function_parameters) [2468 2474])
                            ("context" variable nil (reparse-symbol function_parameters) [2476 2483]))                          
                        :documentation "
        Initialize an adapter with a logger and a dict-like object which
        provides contextual information. The contextual information is
        prepended to each log message.

        This adapter::

            self.log = SimpleLogAdapter(self.log, {\"task\": \"xxxyyy\",
                                                   \"res\", \"foo.bar.baz\"})
            self.log.debug(\"Message\")

        Would produce this message::

            \"(task='xxxyyy', res='foo.bar.baz') Message\"
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2449 3156])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3173 3177])
                            ("msg" variable nil (reparse-symbol function_parameters) [3179 3182])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3184 3190]))                          )
                        (reparse-symbol indented_block_body) [3161 3234]))                  
                :type "class")
                nil [2232 3234])
            ("UserGroupEnforcingHandler" type
               (:documentation "
    This log handler acts like WatchedFileHandler.
    Additionally, upon file access, handler check the credentials of running
    process,to make sure log is not created with wrong permissions by mistake.
    "
                :superclasses ("logging.handlers.WatchedFileHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3592 3629])
                            ("self" variable nil (reparse-symbol indented_block_body) [3638 3676])
                            ("logging" code nil (reparse-symbol indented_block_body) [3685 3752])
                            ("self" variable nil (reparse-symbol indented_block_body) [3825 3847])
                            ("self" code nil (reparse-symbol indented_block_body) [3890 3902]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3547 3551])
                            ("user" variable nil (reparse-symbol function_parameters) [3553 3557])
                            ("group" variable nil (reparse-symbol function_parameters) [3559 3564])
                            ("args" variable nil (reparse-symbol function_parameters) [3566 3571])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3573 3581]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3534 3903])
                    ("_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3918 3922]))                          )
                        (reparse-symbol indented_block_body) [3908 4157])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4172 4176]))                          
                        :documentation "
        Extend super implementation to allow deferred flushing.
        ")
                        (reparse-symbol indented_block_body) [4162 4369]))                  
                :type "class")
                nil [3236 4369])
            ("TimezoneFormatter" type
               (:superclasses ("logging.Formatter")
                :members 
                  ( ("converter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4433 4437])
                            ("timestamp" variable nil (reparse-symbol function_parameters) [4439 4448]))                          )
                        (reparse-symbol indented_block_body) [4419 4570])
                    ("formatTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4590 4594])
                            ("record" variable nil (reparse-symbol function_parameters) [4596 4602])
                            ("datefmt" variable nil (reparse-symbol function_parameters) [4604 4611]))                          )
                        (reparse-symbol indented_block_body) [4575 4915]))                  
                :type "class")
                nil [4371 4915])
            ("ThreadedHandler" type
               (:documentation "
    A handler queuing records and logging them in a background thread using
    a target handler configured elsewhere.

    This is not a memory handler; the reason we inherit from it is being able
    to use another handler defined in logger.conf as the target.

    When configuring loggers in logging.config.fileConfig, we have this check:

        if issubclass(klass, logging.handlers.MemoryHandler):

    If the logger inherits from MemoryHandler, the target of the logger will be
    set later using setTarget, after all handlers are loaded.
    "
                :superclasses ("logging.handlers.MemoryHandler")
                :members 
                  ( ("STATS_INTERVAL" variable nil (reparse-symbol indented_block_body) [5586 5605])
                    ("_CLOSED" variable nil (reparse-symbol indented_block_body) [5611 5629])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Arguments:
            capacity (int): number of records to queue before dropping records.
                When the queue becomes full, new records are dropped. Testing
                shows that 2000 is large enough to avoid dropping messages when
                using DEBUG log level, and extremely slow storage that takes
                0.4 seconds for every write.
            adaptive (bool): adapt log level to number of queued messages,
                dropping lower priority messages.
            start (bool): start the handler thread automatically. If False, the
                thread must be started explicitly.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5705 6355])
                            ("logging" code nil (reparse-symbol indented_block_body) [6364 6412])
                            ("if" code nil (reparse-symbol indented_block_body) [6421 6953])
                            ("self" variable nil (reparse-symbol indented_block_body) [6961 6984])
                            ("self" variable nil (reparse-symbol indented_block_body) [6993 7026])
                            ("self" variable nil (reparse-symbol indented_block_body) [7035 7085])
                            ("self" variable nil (reparse-symbol indented_block_body) [7133 7164])
                            ("self" variable nil (reparse-symbol indented_block_body) [7228 7253])
                            ("self" variable nil (reparse-symbol indented_block_body) [7333 7354])
                            ("self" variable nil (reparse-symbol indented_block_body) [7363 7422])
                            ("if" code nil (reparse-symbol indented_block_body) [7431 7466]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5648 5652])
                            ("capacity" variable nil (reparse-symbol function_parameters) [5654 5662])
                            ("adaptive" variable nil (reparse-symbol function_parameters) [5669 5677])
                            ("start" variable nil (reparse-symbol function_parameters) [5684 5689]))                          
                        :documentation "
        Arguments:
            capacity (int): number of records to queue before dropping records.
                When the queue becomes full, new records are dropped. Testing
                shows that 2000 is large enough to avoid dropping messages when
                using DEBUG log level, and extremely slow storage that takes
                0.4 seconds for every write.
            adaptive (bool): adapt log level to number of queued messages,
                dropping lower priority messages.
            start (bool): start the handler thread automatically. If False, the
                thread must be started explicitly.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5635 7466])
                    ("createLock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7511 7515]))                          
                        :documentation "
        Override to avoid unneeded lock. We use a condition to synchronize with
        the logging thread.
        ")
                        (reparse-symbol indented_block_body) [7496 7675])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7691 7695])
                            ("record" variable nil (reparse-symbol function_parameters) [7697 7703]))                          
                        :documentation "
        Handle a log record.

        If the queue is full, the record is dropped.  If check interval was
        completed, warn about messages dropped during this interval.
        ")
                        (reparse-symbol indented_block_body) [7680 8717])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8732 8736]))                          
                        :documentation "
        Extend Handler.close to stop the thread during shutdown.
        ")
                        (reparse-symbol indented_block_body) [8722 9022])
                    ("setTarget" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9072 9076])
                            ("target" variable nil (reparse-symbol function_parameters) [9078 9084]))                          
                        :documentation "
        Override to use our private target.

        Called from logging.config.fileConfig to configure another handler as
        the target handler.

        Must be called before logging anything to this handler; messages logged
        before setting the target will be dropped silently.
        ")
                        (reparse-symbol indented_block_body) [9058 9433])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9448 9452]))                          )
                        (reparse-symbol indented_block_body) [9438 9468])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9516 9520]))                          
                        :documentation "
        Start the handler thread, writing queued records to target handler.
        ")
                        (reparse-symbol indented_block_body) [9506 9652])
                    ("_can_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9688 9692])
                            ("record" variable nil (reparse-symbol function_parameters) [9694 9700]))                          )
                        (reparse-symbol indented_block_body) [9672 9930])
                    ("_report_stats" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9953 9957])
                            ("interval" variable nil (reparse-symbol function_parameters) [9959 9967])
                            ("dropped_records" variable nil (reparse-symbol function_parameters) [9969 9984])
                            ("max_pending" variable nil (reparse-symbol function_parameters) [9986 9997]))                          )
                        (reparse-symbol indented_block_body) [9935 10549])
                    ("_run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10563 10567]))                          )
                        (reparse-symbol indented_block_body) [10554 11533]))                  
                :type "class")
                nil [4917 11533])
            ("_Dropper" type
               (:superclasses ("object")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11575 11579])
                            ("record" variable nil (reparse-symbol function_parameters) [11581 11587]))                          )
                        (reparse-symbol indented_block_body) [11564 11603]))                  
                :type "class")
                nil [11535 11603])
            ("_DROPPER" variable nil nil [11605 11626])
            ("Suppressed" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11695 11714]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11673 11677])
                            ("value" variable nil (reparse-symbol function_parameters) [11679 11684]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11660 11715])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11744 11748]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11720 11778])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11796 11800]))                          )
                        (reparse-symbol indented_block_body) [11783 11833]))                  
                :type "class")
                nil [11629 11833])
            ("AllVmStatsValue" type
               (:superclasses ("Suppressed")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11888 11892]))                          )
                        (reparse-symbol indented_block_body) [11875 11973]))                  
                :type "class")
                nil [11835 11973])
            ("set_level" function (:arguments 
              ( ("level_name" variable nil (reparse-symbol function_parameters) [11989 11999])
                ("name" variable nil (reparse-symbol function_parameters) [12001 12005]))              ) nil [11975 12457])
            ("volume_chain_to_str" function
               (:documentation "
    Converts an iterable of volume UUIDs into a standard loggable
    format.  The first UUID should be the base (or oldest ancestor) and
    each subsequent entry a direct descendant of its predecessor.
    "
                :arguments 
                  ( ("base_first_chain" variable nil (reparse-symbol function_parameters) [12483 12499]))                  )
                nil [12459 12773])
            ("traceback" function
               (:documentation "
    Log a traceback for unhandled execptions.

    :param log: Use specific logger instead of root logger
    :type log: `logging.Logger`
    :param msg: Use specified message for the exception
    :type msg: str
    "
                :arguments 
                  ( ("log" variable nil (reparse-symbol function_parameters) [12789 12792])
                    ("msg" variable nil (reparse-symbol function_parameters) [12799 12802]))                  )
                nil [12775 13393]))          
      :file "logutils.py"
      :pointmax 13393
      :fsize 13462
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((NAME 12183 . 12191) (IF 12199 . 12201) (ELSE 12211 . 12215) (NAME 1726 . 1734) (IF 1755 . 1757) (ELSE 1776 . 1780) (FROM 1142 . 1146) (PERIOD 1147 . 1148)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [822 860])
            ("__future__" include nil nil [861 892])
            ("rccpxuanyuan.common.define" include nil nil [893 940])
            ("rccpxuanyuan.common.define" include nil nil [941 987])
            ("MalformedResponse" type
               (:superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1069 1093]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1044 1048])
                            ("response" variable nil (reparse-symbol function_parameters) [1050 1058]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1031 1094])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1111 1115]))                          )
                        (reparse-symbol indented_block_body) [1099 1178]))                  
                :type "class")
                nil [990 1178])
            ("success" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [1192 1199])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1206 1214]))              ) nil [1180 1350])
            ("success_raw" function (:arguments 
              ( ("result" variable nil (reparse-symbol function_parameters) [1368 1374])
                ("message" variable nil (reparse-symbol function_parameters) [1381 1388]))              ) nil [1352 1600])
            ("error" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1612 1616])
                ("message" variable nil (reparse-symbol function_parameters) [1618 1625]))              ) nil [1602 1811])
            ("error_raw" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [1827 1831])
                ("message" variable nil (reparse-symbol function_parameters) [1833 1840]))              ) nil [1813 1949])
            ("is_error" function (:arguments 
              ( ("res" variable nil (reparse-symbol function_parameters) [1964 1967])
                ("err" variable nil (reparse-symbol function_parameters) [1969 1972]))              ) nil [1951 2315])
            ("is_valid" function
               (:documentation "
    Return True if the argument is a valid response,
    False otherwise. A valid response is produced
    by success() and error() functions, and looks like:
    response = {
      # ...
      status: {
        # ...
        code: INTEGER,
        message: STRING,
      }
    }
    "
                :arguments 
                  ( ("res" variable nil (reparse-symbol function_parameters) [2330 2333]))                  )
                nil [2317 2962]))          
      :file "response.py"
      :pointmax 2962
      :fsize 2961
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Xuanyuan系统公共常量
\"\"\"" code nil nil [820 842])
            ("os" include nil nil [845 854])
            ("GLUSTER_MGMT_ENABLED" variable nil nil [857 887])
            ("SMBIOS_MANUFACTURER" variable nil nil [911 940])
            ("SMBIOS_OSNAME" variable nil nil [941 969])
            ("RCCPXUANYUAN_USER" variable nil nil [1004 1038])
            ("RCCPXUANYUAN_GROUP" variable nil nil [1039 1065])
            ("DISKIMAGE_USER" variable nil nil [1066 1097])
            ("DISKIMAGE_GROUP" variable nil nil [1098 1122])
            ("METADATA_USER" variable nil nil [1123 1153])
            ("METADATA_GROUP" variable nil nil [1154 1176])
            ("QEMU_PROCESS_USER" variable nil nil [1177 1203])
            ("QEMU_PROCESS_GROUP" variable nil nil [1204 1231])
            ("OVIRT_VMCONSOLE_USER" variable nil nil [1232 1272])
            ("OVIRT_VMCONSOLE_GROUP" variable nil nil [1273 1314])
            ("SERVICE_NAME" variable nil nil [1315 1344])
            ("SANLOCK_ENABLED" variable nil nil [1368 1390])
            ("SANLOCK_USER" variable nil nil [1391 1415])
            ("LIBVIRT_SELINUX" variable nil nil [1435 1457])
            ("MEGAB" variable nil nil [1459 1474])
            ("GIB" code nil nil [1498 1516])
            ("P_LIBVIRT_VMCHANNELS" variable nil nil [1541 1597])
            ("P_OVIRT_VMCONSOLES" variable nil nil [1598 1654])
            ("P_RCCPXUANYUAN" variable nil nil [1655 1698])
            ("P_RCCPXUANYUAN_HOOKS" variable nil nil [1699 1756])
            ("P_RCCPXUANYUAN_LIB" variable nil nil [1757 1802])
            ("P_RCCPXUANYUAN_RUN" variable nil nil [1803 1848])
            ("P_RCCPXUANYUAN_CONF" variable nil nil [1849 1891])
            ("P_RCOS_LOG" variable nil nil [1892 1921])
            ("P_RCCPXUANYUAN_LOG" code nil nil [1922 1971])
            ("P_RCCPXUANYUAN_EXEC" variable nil nil [1972 2022])
            ("P_RCOS_GLOBAL_CONFIG" variable nil nil [2023 2065])
            ("P_RCOS_PRIVATE_CONFIG" variable nil nil [2066 2110])
            ("P_PUB_COMPONENT_INFO_D" code nil nil [2111 2182])
            ("SYSCONF_PATH" variable nil nil [2221 2242])
            ("SERVICECONFIG_PATH" code nil nil [2243 2297])
            ("EXT_CHOWN" variable nil nil [2355 2383])
            ("EXT_DD" variable nil nil [2385 2407])
            ("EXT_DMIDECODE" variable nil nil [2408 2445])
            ("EXT_DMSETUP" variable nil nil [2446 2479])
            ("EXT_FENCE_PREFIX" code nil nil [2481 2550])
            ("EXT_FSCK" variable nil nil [2551 2578])
            ("EXT_FUSER" variable nil nil [2579 2608])
            ("EXT_GREP" variable nil nil [2610 2636])
            ("EXT_IONICE" variable nil nil [2638 2668])
            ("EXT_ISCSIADM" variable nil nil [2669 2704])
            ("EXT_KILL" variable nil nil [2706 2732])
            ("EXT_LVM" variable nil nil [2734 2759])
            ("EXT_MKFS" variable nil nil [2761 2788])
            ("EXT_MKFS_MSDOS" variable nil nil [2789 2828])
            ("EXT_MKISOFS" variable nil nil [2829 2861])
            ("EXT_MOUNT" variable nil nil [2862 2890])
            ("EXT_MULTIPATH" variable nil nil [2891 2928])
            ("EXT_NICE" variable nil nil [2930 2956])
            ("EXT_PRLIMIT" variable nil nil [2958 2990])
            ("EXT_SETSID" variable nil nil [2992 3022])
            ("EXT_SH" variable nil nil [3023 3041])
            ("EXT_SU" variable nil nil [3074 3096])
            ("EXT_SUDO" variable nil nil [3097 3123])
            ("EXT_TAR" variable nil nil [3125 3149])
            ("EXT_TASKSET" variable nil nil [3150 3182])
            ("EXT_TUNE2FS" variable nil nil [3183 3216])
            ("EXT_UMOUNT" variable nil nil [3218 3248])
            ("EXT_SAFELEASE" variable nil nil [3250 3300])
            ("EXT_CURL_IMG_WRAP" variable nil nil [3302 3363])
            ("EXT_FC_SCAN" variable nil nil [3364 3413])
            ("EXT_KVM_2_OVIRT" variable nil nil [3414 3469])
            ("UNSET_STR" variable nil nil [3500 3514])
            ("RCCPXUANYUAN_UNKNOW_STR" variable nil nil [3515 3543])
            ("RABBITMQ_CONFIG" code nil nil [3556 3614])
            ("PUBLISH_ID" variable nil nil [3634 3661])
            ("NOTIFY_TYPE_VM_STATE" variable nil nil [3662 3695])
            ("NOTIFY_TYPE_HOST_RESOURCE_PLANNING" variable nil nil [3696 3757])
            ("NOTIFY_TYPE_NODE_HEARTBEAT" variable nil nil [3758 3803])
            ("DEF_OVN_TYPE" variable nil nil [3824 3847])
            ("SERVER_NET_CONFIG" code nil nil [3863 3923])
            ("NUWA" variable nil nil [3942 3959])
            ("KUNLUNOS" variable nil nil [3960 3981])
            ("NUWA_CONF" code nil nil [4005 4056])
            ("P_NUWA_PRIVATE_CONFIG" code nil nil [4057 4115])
            ("NUWA_CA_CONF" code nil nil [4116 4169])
            ("NUWA_CLUSTER_ID_FILE" code nil nil [4170 4228])
            ("RCOS_RESERVATION_FILE" code nil nil [4259 4337]))          
      :file "constants.py"
      :pointmax 4338
      :fsize 4349
      :lastmodtime '(23972 28963 458221 851000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
serialize.py 对外接口序列化反序列化模块
协议：
    1. 反序列化函数命名： cb_deser_$ORIGINAL_METHOD_NAME
    2. 序列化函数命名： cb_ser_$ORIGINAL_METHOD_NAME
    3. 反序列化函数的入参是字典，即消息请求体的content_incoming字段
    4. 返回值是元组(args, kwargs)。
    5. 序列化函数的返回值是字典，即消息响应体的data字段。
\"\"\"" code nil nil [1 242])
            ("rccpxuanyuan.common" include nil nil [245 286])
            ("rccpxuanyuan.common" include nil nil [287 328])
            ("rccpxuanyuan.common.parameter" include nil nil [329 377])
            ("rccpxuanyuan.common.parameter" include nil nil [378 423])
            ("rccpxuanyuan.common.parameter" include nil nil [424 481])
            ("APIBase" type
               (:documentation "
    序列化反序列化基类
    "
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [546 549]))                      ) (reparse-symbol indented_block_body) [534 673]))                  
                :type "class")
                nil [484 673])
            ("V1GlobalAPI" type
               (:documentation "
    GlobalAPI序列化反序列化类
    职责：
        1. 提供GlobalAPI接口类序列化、反序列化功能函数
    "
                :superclasses ("APIBase")
                :members 
                  ( ("cb_ser_get_mainboard_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [840 847]))                          
                        :documentation "
        查询主板信息接口序列化回调
        param ret_val: 接口返回值
        type ret_val: dict
        ")
                        (reparse-symbol indented_block_body) [792 1300])
                    ("cb_ser_get_cpu_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [1347 1354]))                          
                        :documentation "
        查询CPU信息接口序列化回调
        param ret_val: 接口返回值
        type ret_val: dict
        ")
                        (reparse-symbol indented_block_body) [1305 1865])
                    ("cb_ser_get_mem_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [1912 1919]))                          
                        :documentation "
        查询内存信息接口序列化回调
        param ret_val: 接口返回值
        type ret_val: dict
        ")
                        (reparse-symbol indented_block_body) [1870 2932])
                    ("cb_ser_get_disk_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [2980 2987]))                          
                        :documentation "
        查询硬盘信息接口序列化回调
        param ret_val: 接口返回值
        type ret_val: dict
        ")
                        (reparse-symbol indented_block_body) [2937 4243])
                    ("cb_ser_get_service_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [4295 4302]))                          
                        :documentation "
        查询服务信息接口序列化回调
        param ret_val: 接口返回值
        type ret_val: dict
        ")
                        (reparse-symbol indented_block_body) [4249 4697])
                    ("cb_deser_add_host" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [4742 4758]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参未使用
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [4702 6350])
                    ("cb_deser_set_ntp" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [6394 6410]))                          
                        :documentation "
        设置 NTP 接口反序列化回调
        param content_incoming: 接口入参未使用
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [6355 6803])
                    ("cb_ser_get_ntp_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [6850 6857]))                          
                        :documentation "
        获取 ntp 信息序列化接口
        ")
                        (reparse-symbol indented_block_body) [6808 7094])
                    ("cb_deser_remove_host" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [7143 7159]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参未使用
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [7100 7770])
                    ("cb_ser_get_messaging_ip" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [7821 7828]))                          
                        :documentation "
        查询服务信息接口序列化回调
        param ret_val: 接口返回值
        type ret_val: dict
        ")
                        (reparse-symbol indented_block_body) [7775 8040])
                    ("cb_ser_get_caps" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [8083 8090]))                          
                        :documentation "
        查询服务信息接口序列化回调
        param ret_val: 接口返回值
        type ret_val: dict
        ")
                        (reparse-symbol indented_block_body) [8045 8732])
                    ("cb_deser_get_nics_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [8782 8798]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [8737 9216])
                    ("cb_deser_get_bonds_info" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [9525 9541]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [9479 9962])
                    ("cb_deser_create_bond" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [10266 10282]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [10223 10765])
                    ("cb_deser_modify_bond" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [10813 10829]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [10770 11401])
                    ("cb_deser_remove_bonds" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [11450 11466]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [11406 11817])
                    ("cb_deser_set_dev_ip" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [11864 11880]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [11822 12537])
                    ("cb_deser_set_dev_ipv6" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [12586 12602]))                          
                        :documentation "
        设置设备ipv6信息
        param content_incoming: 设置信息
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [12542 13209])
                    ("cb_deser_create_provider_ovs" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [13265 13281]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [13214 13870])
                    ("cb_deser_modify_provider_ovs" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [13926 13942]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [13875 14342])
                    ("cb_deser_remove_provider_ovs" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [14398 14414]))                          
                        :documentation "
        查询服务信息接口反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [14347 14762])
                    ("cb_ser_get_host_dns" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("ret_val" variable nil (reparse-symbol function_parameters) [14809 14816]))                          
                        :documentation "获取主机 dns 信息序列化接口")
                        (reparse-symbol indented_block_body) [14767 14888])
                    ("cb_deser_set_host_dns" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [14937 14953]))                          
                        :documentation "设置主机 dns 反序列化接口")
                        (reparse-symbol indented_block_body) [14893 15551])
                    ("cb_deser_connect_iscsi_tgt" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [15629 15645]))                          
                        :documentation "
        连接iscsi目标反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [15580 17390])
                    ("cb_ser_connect_iscsi_tgt" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_outcoming" variable nil (reparse-symbol function_parameters) [17442 17459]))                          
                        :documentation "
        连接iscsi目标反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [17395 17673])
                    ("cb_deser_disconnect_iscsi_tgt" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [17730 17746]))                          
                        :documentation "
        断开iscsi目标反序列化回调
        param content_incoming: 接口入参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [17678 18942])
                    ("cb_ser_disconnect_iscsi_tgt" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_outcoming" variable nil (reparse-symbol function_parameters) [18997 19014]))                          
                        :documentation "
        断开iscsi目标序列化回调
        param content_incoming: 接口出参
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [18947 19170])
                    ("cb_deser_deploy_pos_node" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [19222 19238]))                          
                        :documentation "
        部署P-OS服务序列化回调
        :param content_incoming:接口入参
        :return:
        ")
                        (reparse-symbol indented_block_body) [19175 21540])
                    ("cb_ser_deploy_pos_node" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_outcoming" variable nil (reparse-symbol function_parameters) [21590 21607]))                          
                        :documentation "
        部署P-OS服务序列化回调
        :param content_outcoming:接口出参
        :return:
        ")
                        (reparse-symbol indented_block_body) [21545 21744])
                    ("cb_deser_undeploy_pos_node" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [21798 21814]))                          
                        :documentation "
        卸载P-OS服务序列化回调
        :param content_incoming:接口入参
        :return:
        ")
                        (reparse-symbol indented_block_body) [21749 22689])
                    ("cb_deser_set_ha_resource" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [22741 22757]))                          
                        :documentation "
        设置资源预留接口反序列化回调函数
        :param content_incoming: 接口入参
        :return:
        ")
                        (reparse-symbol indented_block_body) [22694 23185])
                    ("cb_deser_set_vip" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [23229 23245]))                          
                        :documentation "
        设置 NTP 接口反序列化回调
        param content_incoming: 接口入参未使用
        type content_incoming: dict
        ")
                        (reparse-symbol indented_block_body) [23190 24639]))                  
                :type "class")
                nil [675 24639])
            ("V1VM" type
               (:documentation "
    VM 序列化反序列化类
    职责：
        1. 提供虚机接口组序列化、反序列化功能函数
    "
                :superclasses ("APIBase")
                :members 
                  ( ("cb_deser_start_vm" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [25187 25203]))                          
                        :documentation "虚机启动接口反序列化
        @content_incoming: dict, required
        检查字段: cpu, memory, boot_dev, cdrom, interface, disk 等
        其中, cdrom 与 interface 可选
        ")
                        (reparse-symbol indented_block_body) [25147 26002])
                    ("cb_deser_shutdown_vm" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [26050 26066]))                          
                        :documentation "虚机关闭接口反序列化
        @content_incoming: dict, required
        检查字段: vm_id, force(强制关机还是普通关机)")
                        (reparse-symbol indented_block_body) [26007 26592])
                    ("cb_deser_reboot_vm" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [26638 26654]))                          
                        :documentation "虚机重启接口反序列化
        @content_incoming: dict, required
        检查字段: vm_id")
                        (reparse-symbol indented_block_body) [26597 27034])
                    ("cb_deser_change_cd" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("content_incoming" variable nil (reparse-symbol function_parameters) [27080 27096]))                          
                        :documentation "修改虚拟光驱接口反序列化
        @content_incoming: dict, required
        检查字段: vm_id, dev_id(光驱标识),
                  file_path(虚拟光驱 ISO 文件访问路径)")
                        (reparse-symbol indented_block_body) [27039 27813]))                  
                :type "class")
                nil [25050 27813]))          
      :file "serialize.py"
      :pointmax 27813
      :fsize 29588
      :lastmodtime '(23971 56878 499387 180000)
      :unmatched-syntax '((INDENT_BLOCK 24520 . 24639) (NEWLINE 24519 . 24520) (COLON 24518 . 24519) (TRY 23381 . 23384) (AS 24510 . 24512) (INDENT_BLOCK 22625 . 22647) (NEWLINE 22624 . 22625) (COLON 22623 . 22624) (AS 22617 . 22619) (EXCEPT 22585 . 22591) (INDENT_BLOCK 22445 . 22577) (NEWLINE 22444 . 22445) (COLON 22443 . 22444) (TRY 21925 . 21928) (AS 22437 . 22439) (INDENT_BLOCK 21253 . 21275) (NEWLINE 21252 . 21253) (COLON 21251 . 21252) (AS 21245 . 21247) (EXCEPT 21213 . 21219) (INDENT_BLOCK 21075 . 21205) (NEWLINE 21074 . 21075) (COLON 21073 . 21074) (TRY 19349 . 19352) (AS 21067 . 21069) (INDENT_BLOCK 18660 . 18682) (NEWLINE 18659 . 18660) (COLON 18658 . 18659) (AS 18652 . 18654) (EXCEPT 18620 . 18626) (INDENT_BLOCK 18474 . 18612) (NEWLINE 18473 . 18474) (COLON 18472 . 18473) (TRY 17878 . 17881) (AS 18466 . 18468) (INDENT_BLOCK 17091 . 17113) (NEWLINE 17090 . 17091) (COLON 17089 . 17090) (AS 17083 . 17085) (EXCEPT 17051 . 17057) (INDENT_BLOCK 16908 . 17043) (NEWLINE 16907 . 16908) (COLON 16906 . 16907) (TRY 15777 . 15780) (AS 16900 . 16902)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
superrccpxuanyuanProxy通过代理的方式代理rccpxuanyuand服务到superrccpxuanyuand服
务
\"\"\"" code nil nil [822 898])
            ("__future__" include nil nil [900 938])
            ("__future__" include nil nil [939 970])
            ("os" include nil nil [972 981])
            ("multiprocessing.managers" include nil nil [982 1043])
            ("logging" include nil nil [1044 1058])
            ("threading" include nil nil [1059 1075])
            ("rccpxuanyuan.common" include nil nil [1077 1118])
            ("rccpxuanyuan.common" include nil nil [1119 1159])
            ("rccpxuanyuan.common" include nil nil [1206 1247])
            ("_G_SINGLETON_SUPERRCCPXUANYUAN_INSTANCE" variable nil nil [1250 1296])
            ("_G_SINGLETON_SUPERRCCPXUANYUAN_INSTANCE_LOCK" variable nil nil [1297 1360])
            ("ADDRESS" variable nil nil [1361 1435])
            ("_SuperrccpxuanyuanManager" type
               (:documentation "
    socket交互管理类封装
    职责：
        封装底层socket管理类
    "
                :superclasses ("BaseManager")
                :type "class")
                nil [1438 1548])
            ("ProxyCaller" type
               (:documentation "
    代理调用类
    职责:
        1. 完成调用接口的拼装
        2. 完成接口的调用
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1712 1739])
                            ("self" variable nil (reparse-symbol indented_block_body) [1748 1803]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1661 1665])
                            ("superrccpxuanyuan_proxy" variable nil (reparse-symbol function_parameters) [1667 1690])
                            ("func_name" variable nil (reparse-symbol function_parameters) [1692 1701]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1648 1804])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1822 1826])
                            ("args" variable nil (reparse-symbol function_parameters) [1828 1833])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1835 1843]))                          )
                        (reparse-symbol indented_block_body) [1809 2425]))                  
                :type "class")
                nil [1550 2425])
            ("SuperrccpxuanyuanProxy" type
               (:documentation "
    A wrapper around all the superrccpxuanyuan init stuff
    "
                :members 
                  ( ("_log" variable nil (reparse-symbol indented_block_body) [2535 2585])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2619 2639])
                            ("self" variable nil (reparse-symbol indented_block_body) [2648 2674])
                            ("self" code nil (reparse-symbol indented_block_body) [2683 2698]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2604 2608]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2591 2699])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2713 2717])
                            ("args" variable nil (reparse-symbol function_parameters) [2719 2724])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2726 2734]))                          )
                        (reparse-symbol indented_block_body) [2704 2824])
                    ("_connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2842 2846]))                          )
                        (reparse-symbol indented_block_body) [2829 3871])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3892 3896])
                            ("name" variable nil (reparse-symbol function_parameters) [3898 3902]))                          )
                        (reparse-symbol indented_block_body) [3876 3944]))                  
                :type "class")
                nil [2427 3944])
            ("getProxy" function (:documentation "
    代理对象获取方法:通过同步锁方式控制创建单例代理实例
    ") nil [3946 4398]))          
      :file "superrccpxuanyuan.py"
      :pointmax 4398
      :fsize 4555
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((INDENT_BLOCK 3291 . 3679) (NEWLINE 3222 . 3223) (COLON 3221 . 3222) (TRY 3086 . 3089) (AS 3215 . 3217) (INDENT_BLOCK 2143 . 2425) (NEWLINE 2142 . 2143) (COLON 2141 . 2142) (TRY 2006 . 2009) (AS 2135 . 2137)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [814 852])
            ("__future__" include nil nil [853 884])
            ("tobool" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [898 899]))              ) nil [887 1124]))          
      :file "conv.py"
      :pointmax 1124
      :fsize 1123
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
common rccpxuanyuan公共包
职责：
    1. 打包各个模块公共工具
    2. 封装外部组件
    3. 提供公共声明和常量
\"\"\"" code nil nil [813 896])
            ("__future__" include nil nil [898 936])
            ("__future__" include nil nil [937 968]))          
      :file "__init__.py"
      :pointmax 969
      :fsize 1030
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Xuanyuan系统公共模块函数/方法处理包
\"\"\"" code nil nil [813 843])
            ("time" include nil nil [846 857])
            ("weakref" include nil nil [858 872])
            ("rccpxuanyuan.common.time" include nil nil [874 925])
            ("retry" function
               (:documentation "
    Retry a function. Wraps the retry logic so you don't have to
    implement it each time you need it.

    :param func: The callable to run.
    :param expected_exception: The exception you expect to receive when the
                              function fails.
    :param tries: The number of times to try. None\\0,-1 means infinite.
    :param timeout: The time you want to spend waiting. This **WILL NOT** stop
                    the method. It will just not run it if it ended after the
                    timeout.
    :param sleep: Time to sleep between calls in seconds.
    :param stop_callback: A function that takes no parameters and causes the
                         method to stop retrying when it returns with a
                         positive value.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [938 942])
                    ("expected_exception" variable nil (reparse-symbol function_parameters) [944 962])
                    ("tries" variable nil (reparse-symbol function_parameters) [974 979])
                    ("timeout" variable nil (reparse-symbol function_parameters) [996 1003])
                    ("sleep" variable nil (reparse-symbol function_parameters) [1010 1015])
                    ("stop_callback" variable nil (reparse-symbol function_parameters) [1019 1032]))                  )
                nil [928 2320])
            ("InvalidatedWeakRef" type
               (:documentation "
    Stale weakref, the object was deallocated
    "
                :superclasses ("Exception")
                :type "class")
                nil [2322 2421])
            ("weakmethod" function
               (:documentation "
    Return a weakly-referenced wrapper for an instance method.
    Use this function when you want to decorate an instance method
    from the outside, to avoid reference cycles.
    Raise InvalidatedWeakRef if the related instance was collected,
    so the wrapped method is no longer usable.
    "
                :arguments 
                  ( ("meth" variable nil (reparse-symbol function_parameters) [2438 2442]))                  )
                nil [2423 3000])
            ("is_private" function
               (:documentation "
    通过方法名判断方法是否为私有方法
    职责：
        1. 判断方法是否为私有
    参数func_name:方法名
    类型：字符串
    "
                :arguments 
                  ( ("func_name" variable nil (reparse-symbol function_parameters) [3017 3026]))                  )
                nil [3002 3192]))          
      :file "function.py"
      :pointmax 3192
      :fsize 3295
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [814 852])
            ("__future__" include nil nil [853 884])
            ("os" include nil nil [886 895])
            ("collections" include nil nil [896 914])
            ("contextlib" include nil nil [916 953])
            ("monotonic_time" function (:documentation "
    Return the amount of time, in secs, elapsed since a fixed
    arbitrary point in time in the past.
    This function is useful if the client just
    needs to use the difference between two given time points.

    With respect to time.time():
    * The resolution of this function is lower. On Linux,
      the resolution is 1/_SC_CLK_TCK, which in turn depends on
      the value of HZ configured in the kernel. A commonly
      found resolution is 10 (ten) ms.
    * This function is resilient with respect to system clock
      adjustments.
    ") nil [956 1567])
            ("Clock" type
               (:documentation "
    Measure time for complex flows.

    This clock is useful for timing complex flows, when you want to record
    multiple timings for a single flow. For example, the total time, and the
    time of each step in the flow.

    This is a simpler and more strict version of MoinMoin.util.clock.Clock.

    Usage::

        clock = time.Clock()
        ...
        clock.start(\"total\")
        clock.start(\"step1\")
        ...
        clock.stop(\"step1\")
        clock.start(\"step2\")
        ...
        clock.stop(\"step2\")
        clock.stop(\"total\")
        log.info(\"times=%s\", clock)

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2227 2267]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2212 2216]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2199 2268])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2283 2287])
                            ("name" variable nil (reparse-symbol function_parameters) [2289 2293]))                          )
                        (reparse-symbol indented_block_body) [2273 2449])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2463 2467])
                            ("name" variable nil (reparse-symbol function_parameters) [2469 2473]))                          )
                        (reparse-symbol indented_block_body) [2454 2780])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2813 2817])
                            ("name" variable nil (reparse-symbol function_parameters) [2819 2823]))                          
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2785 2927])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2945 2949]))                          )
                        (reparse-symbol indented_block_body) [2932 3339]))                  
                :type "class")
                nil [1569 3339]))          
      :file "time.py"
      :pointmax 3339
      :fsize 3338
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
callutils.py
\"\"\"" code nil nil [1 21])
            ("functools" include nil nil [23 39])
            ("threading" include nil nil [40 56])
            ("time" include nil nil [57 68])
            ("logging" include nil nil [69 83])
            ("async_call" function
               (:documentation "
    装饰类，生成的对象，用于装饰需要异步执行的方法
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [101 105]))                  )
                nil [86 337])
            ("time_stamp" function
               (:documentation "
    装饰类，生成的对象，用于装饰需要计时的方法
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [354 358]))                  )
                nil [339 702]))          
      :file "callutils.py"
      :pointmax 702
      :fsize 1374
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [814 852])
            ("__future__" include nil nil [853 884])
            ("distutils.spawn" include nil nil [886 908])
            ("errno" include nil nil [909 921])
            ("io" include nil nil [922 931])
            ("logging" include nil nil [932 946])
            ("os" include nil nil [947 956])
            ("re" include nil nil [957 966])
            ("select" include nil nil [967 980])
            ("time" include nil nil [981 992])
            ("rccpxuanyuan.common" include nil nil [994 1035])
            ("rccpxuanyuan.common" include nil nil [1036 1074])
            ("rccpxuanyuan.common" include nil nil [1075 1114])
            ("rccpxuanyuan.common.compat" include nil nil [1115 1164])
            ("rccpxuanyuan.common.config" include nil nil [1165 1210])
            ("rccpxuanyuan.common.password" include nil nil [1211 1269])
            ("rccpxuanyuan.common.time" include nil nil [1270 1321])
            ("subprocess" include nil nil [1322 1356])
            ("SYSTEMD_RUN" variable nil nil [1359 1395])
            ("log" variable nil nil [1396 1432])
            ("OUT" variable nil nil [1459 1470])
            ("ERR" variable nil nil [1471 1482])
            ("_ANY_CPU" variable nil nil [1484 1545])
            ("_SUDO_NON_INTERACTIVE_FLAG" variable nil nil [1546 1579])
            ("_USING_CPU_AFFINITY" code nil nil [1580 1642])
            ("CommandPath" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1727 1743])
                            ("self" variable nil (reparse-symbol indented_block_body) [1752 1769])
                            ("self" variable nil (reparse-symbol indented_block_body) [1778 1794])
                            ("self" variable nil (reparse-symbol indented_block_body) [1803 1854]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1689 1693])
                            ("name" variable nil (reparse-symbol function_parameters) [1695 1699])
                            ("args" variable nil (reparse-symbol function_parameters) [1701 1706])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1708 1716]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1676 1855])
                    ("cmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1882 1886]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1860 2417])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2435 2439]))                          )
                        (reparse-symbol indented_block_body) [2422 2471])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2488 2492]))                          )
                        (reparse-symbol indented_block_body) [2476 2524])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2545 2549]))                          )
                        (reparse-symbol indented_block_body) [2529 2585]))                  
                :type "class")
                nil [1645 2585])
            ("command_log_line" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [2608 2612])
                ("cwd" variable nil (reparse-symbol function_parameters) [2614 2617]))              ) nil [2587 2685])
            ("retcode_log_line" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [2708 2712])
                ("err" variable nil (reparse-symbol function_parameters) [2714 2717]))              ) nil [2687 2847])
            ("_list2cmdline" function
               (:documentation "
    Convert argument list for exeCmd to string for logging. 'ProtectedPassword'
    arguments are obfuscated so that no secrets leak. The purpose of this
    log is make it easy to run rccpxuanyuan commands in the shell for debugging.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [2867 2871]))                  )
                nil [2849 3389])
            ("_needs_quoting" variable nil nil [3578 3640])
            ("systemd_run" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [3659 3662])
                ("scope" variable nil (reparse-symbol function_parameters) [3664 3669])
                ("unit" variable nil (reparse-symbol function_parameters) [3677 3681])
                ("slice" variable nil (reparse-symbol function_parameters) [3688 3693])
                ("accounting" variable nil (reparse-symbol function_parameters) [3700 3710]))              ) nil [3643 4097])
            ("Accounting" type
               (:superclasses ("object")
                :members 
                  ( ("CPU" variable nil (reparse-symbol indented_block_body) [4129 4140])
                    ("Memory" variable nil (reparse-symbol indented_block_body) [4145 4162])
                    ("BlockIO" variable nil (reparse-symbol indented_block_body) [4167 4186]))                  
                :type "class")
                nil [4099 4187])
            ("exec_cmd" function
               (:documentation "
    Execute cmd in an external process, collect its output and returncode

    :param cmd: an iterator of strings to be passed as exec(2)'s argv
    :param env: an optional dictionary to be placed as environment variables
                of the external process. If None, the environment of the
                calling process is used.
    :returns: a 3-tuple of the process's
              (returncode, stdout content, stderr content.)

    This is a bare-bones version of `commands.execCmd`. Unlike the latter, this
    function
    * uses rccpxuanyuan cpu pinning, and must not be used for long CPU-bound processes.
    * does not guarantee to kill underlying process if Popen.communicate()
      raises. Commands that access shared storage may not use this api.
    * does not hide passwords in logs if they are passed in cmd
    "
                :arguments 
                  ( ("cmd" variable nil (reparse-symbol function_parameters) [4202 4205])
                    ("env" variable nil (reparse-symbol function_parameters) [4207 4210]))                  )
                nil [4189 5353])
            ("Error" type
               (:superclasses ("errors.Base")
                :members 
                  ( ("msg" variable nil (reparse-symbol indented_block_body) [5385 5486])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5539 5553])
                            ("self" variable nil (reparse-symbol indented_block_body) [5562 5574])
                            ("self" variable nil (reparse-symbol indented_block_body) [5583 5597])
                            ("self" variable nil (reparse-symbol indented_block_body) [5606 5620]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5505 5509])
                            ("cmd" variable nil (reparse-symbol function_parameters) [5511 5514])
                            ("rc" variable nil (reparse-symbol function_parameters) [5516 5518])
                            ("out" variable nil (reparse-symbol function_parameters) [5520 5523])
                            ("err" variable nil (reparse-symbol function_parameters) [5525 5528]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5492 5621]))                  
                :type "class")
                nil [5355 5621])
            ("TimeoutExpired" type
               (:superclasses ("errors.Base")
                :members 
                  ( ("msg" variable nil (reparse-symbol indented_block_body) [5662 5712])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5751 5765]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5731 5735])
                            ("pid" variable nil (reparse-symbol function_parameters) [5737 5740]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5718 5766]))                  
                :type "class")
                nil [5623 5766])
            ("receive" function
               (:documentation "
    Receive data from a process, yielding data read from stdout and stderr
    until proccess terminates or timeout expires.

    Unlike Popen.communicate(), this supports a timeout, and allows
    reading both stdout and stderr with a single thread.

    Example usage::

        # Reading data from both stdout and stderr until process
        # terminates:

        for src, data in cmdutils.receive(p):
            if src == cmdutils.OUT:
                # handle output
            elif src == cmdutils.ERR:
                # handler errors

        # Receiving data with a timeout:

        try:
            received = list(cmdutils.receive(p, timeout=10))
        except cmdutils.TimeoutExpired:
            # handle timeout

    Arguments:
        p (`subprocess.Popen`): A subprocess created with
            subprocess.Popen or subprocess32.Popen or cpopen.CPopen.
        timeout (float): Number of seconds to wait for process. Timeout
            resolution is limited by the resolution of
            `common.time.monotonic_time`, typically 10 milliseconds.
        bufsize (int): Number of bytes to read from the process in each
            iteration.

    Returns:
        Generator of tuples (SRC, bytes). SRC may be either
        `cmdutils.OUT` or `cmdutils.ERR`, and bytes is a bytes object
        read from process stdout or stderr.

    Raises:
        `cmdutils.TimeoutExpired` if process did not terminate within
            the specified timeout.
    "
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [5780 5781])
                    ("timeout" variable nil (reparse-symbol function_parameters) [5783 5790])
                    ("bufsize" variable nil (reparse-symbol function_parameters) [5797 5804]))                  )
                nil [5768 8971])
            ("_wait" function
               (:documentation "
    Wait until process terminates, or if deadline is specified,
    `common.time.monotonic_time` exceeds deadline.

    Raises:
        `cmdutils.TimeoutExpired` if process did not terminate within
            deadline.
    "
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [8983 8984])
                    ("deadline" variable nil (reparse-symbol function_parameters) [8986 8994]))                  )
                nil [8973 10285])
            ("wrap_command" function (:arguments 
              ( ("command" variable nil (reparse-symbol function_parameters) [10304 10311])
                ("with_ioclass" variable nil (reparse-symbol function_parameters) [10313 10325])
                ("ioclassdata" variable nil (reparse-symbol function_parameters) [10332 10343])
                ("with_nice" variable nil (reparse-symbol function_parameters) [10367 10376])
                ("with_setsid" variable nil (reparse-symbol function_parameters) [10383 10394])
                ("with_sudo" variable nil (reparse-symbol function_parameters) [10402 10411])
                ("reset_cpu_affinity" variable nil (reparse-symbol function_parameters) [10436 10454]))              ) nil [10287 11270])
            ("nice" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [11281 11284])
                ("nice" variable nil (reparse-symbol function_parameters) [11286 11290]))              ) nil [11272 11388])
            ("ionice" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [11401 11404])
                ("ioclass" variable nil (reparse-symbol function_parameters) [11406 11413])
                ("ioclassdata" variable nil (reparse-symbol function_parameters) [11415 11426]))              ) nil [11390 11615])
            ("setsid" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [11628 11631]))              ) nil [11617 11714])
            ("sudo" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [11725 11728]))              ) nil [11716 11882])
            ("taskset" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [11896 11899])
                ("cpu_list" variable nil (reparse-symbol function_parameters) [11901 11909]))              ) nil [11884 12027])
            ("prlimit" function
               (:documentation "
    Wrap cmd with prlimit, limiting resource usage.

    Arguments:
        cpu_time (int): Limit command cpu time in seconds. If the command
            exceeds this value it will be terminated by SIGKILL.
        address_space (int): Limit command address space size in bytes. If the
            command tries to allocate too much memory, the allocation will
            fail.

    NOTE: Limiting command resident size (--rss=N) seems to be broken with
    prlimit. The limit is applied but has no effect on memory usage.
    "
                :arguments 
                  ( ("cmd" variable nil (reparse-symbol function_parameters) [12041 12044])
                    ("cpu_time" variable nil (reparse-symbol function_parameters) [12046 12054])
                    ("address_space" variable nil (reparse-symbol function_parameters) [12061 12074]))                  )
                nil [12029 12891])
            ("exe_command" function
               (:documentation "
    执行command命令
    param: command: 命令行字符串如\"ls /\"
    return: 返回标准输出utf8解吗内容
    "
                :arguments 
                  ( ("command" variable nil (reparse-symbol function_parameters) [12909 12916]))                  )
                nil [12893 13151]))          
      :file "cmdutils.py"
      :pointmax 13151
      :fsize 13192
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((INDENT_BLOCK 8314 . 8799) (NEWLINE 8313 . 8314) (COLON 8312 . 8313) (ELSE 8308 . 8312) (INDENT_BLOCK 8173 . 8300) (NEWLINE 8172 . 8173) (COLON 8171 . 8172) (TRY 8086 . 8089) (AS 8167 . 8169) (NAME 8022 . 8036) (IF 8056 . 8058) (ELSE 8068 . 8072) (NAME 2729 . 2735) (IF 2748 . 2750) (ELSE 2761 . 2765)))
    (semanticdb-table "semanticdb-table"
      :file "compat.py"
      :fsize 2945
      :lastmodtime '(23940 33512 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("__future__" include nil nil [860 891])
            ("six" include nil nil [892 902])
            ("ProtectedPassword" type
               (:documentation "
    Protect a password so it will not be logged or serialized by mistake.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1067 1085]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1045 1049])
                            ("value" variable nil (reparse-symbol function_parameters) [1051 1056]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1032 1086])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1102 1106])
                            ("other" variable nil (reparse-symbol function_parameters) [1108 1113]))                          )
                        (reparse-symbol indented_block_body) [1091 1187])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1203 1207])
                            ("other" variable nil (reparse-symbol function_parameters) [1209 1214]))                          )
                        (reparse-symbol indented_block_body) [1192 1255])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1272 1276]))                          )
                        (reparse-symbol indented_block_body) [1260 1305])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1323 1327]))                          )
                        (reparse-symbol indented_block_body) [1310 1361])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1379 1383]))                          )
                        (reparse-symbol indented_block_body) [1366 1436]))                  
                :type "class")
                nil [905 1436])
            ("protect_passwords" function
               (:documentation "
    Replace \"password\" values with ProtectedPassword() object.

    Accept a dict, list of dicts or nested structure containing these types.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [1460 1463]))                  )
                nil [1438 1717])
            ("unprotect_passwords" function
               (:documentation "
    Replace ProtectedPassword() objects with the actual password value.

    Accept a dict, list of dicts or nested structure containing these types.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [1743 1746]))                  )
                nil [1719 2049])
            ("unprotect" function
               (:documentation "
    If obj is a protected password, return the protected value. Otherwise
    returns obj.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [2065 2068]))                  )
                nil [2051 2261])
            ("_walk" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [2273 2276]))              ) nil [2263 2683]))          
      :file "password.py"
      :pointmax 2683
      :fsize 2682
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("__future__" include nil nil [860 891])
            ("atexit" include nil nil [892 905])
            ("threading" include nil nil [906 922])
            ("functools" include nil nil [923 939])
            ("io" include nil nil [940 949])
            ("logging" include nil nil [950 964])
            ("os" include nil nil [965 974])
            ("signal" include nil nil [975 988])
            ("libvirt" include nil nil [990 1004])
            ("rccpxuanyuan.common" include nil nil [1006 1043])
            ("rccpxuanyuan.common" include nil nil [1044 1086])
            ("rccpxuanyuan.common" include nil nil [1087 1127])
            ("rccpxuanyuan.common" include nil nil [1128 1163])
            ("rccpxuanyuan.common.password" include nil nil [1164 1222])
            ("log" variable nil nil [1224 1249])
            ("SASL_USERNAME" variable nil nil [1252 1288])
            ("LIBVIRT_PASSWORD_PATH" variable nil nil [1289 1366])
            ("_EventLoop" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1419 1435])
                            ("self" variable nil (reparse-symbol indented_block_body) [1444 1464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1404 1408]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1391 1465])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1480 1484]))                          )
                        (reparse-symbol indented_block_body) [1470 1697])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1711 1715])
                            ("wait" variable nil (reparse-symbol function_parameters) [1717 1721]))                          )
                        (reparse-symbol indented_block_body) [1702 1870])
                    ("__run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1885 1889]))                          )
                        (reparse-symbol indented_block_body) [1875 2078]))                  
                :type "class")
                nil [1369 2078])
            ("__event_loop" variable nil nil [2146 2173])
            ("start_event_loop" function nil nil [2176 2225])
            ("stop_event_loop" function (:arguments 
              ( ("wait" variable nil (reparse-symbol function_parameters) [2247 2251]))              ) nil [2227 2287])
            ("__connections" variable nil nil [2289 2307])
            ("__connectionLock" variable nil nil [2308 2343])
            ("open_connection" function
               (:documentation " by calling this method you are getting a new and unwrapped connection
        if you want to use wrapped and cached connection use the get() method
    "
                :arguments 
                  ( ("uri" variable nil (reparse-symbol function_parameters) [2366 2369])
                    ("username" variable nil (reparse-symbol function_parameters) [2376 2384])
                    ("passwd" variable nil (reparse-symbol function_parameters) [2391 2397]))                  )
                nil [2346 3179])
            ("_clear" function (:documentation "
    For clearing connections during the tests.
    ") nil [3181 3315])
            ("get" function
               (:documentation "Return current connection to libvirt or open a new one.
    Use target to get/create the connection object linked to that object.
    target must have a callable attribute named 'cb_dispatch_libvirt_events' which
    will be registered as a callback on libvirt events.

    Wrap methods of connection object so that they catch disconnection, and
    take the current process down.
    "
                :arguments 
                  ( ("target" variable nil (reparse-symbol function_parameters) [3325 3331])
                    ("killOnFailure" variable nil (reparse-symbol function_parameters) [3338 3351]))                  )
                nil [3317 7506])
            ("libvirt_password" function (:decorators 
              ( ("cache.Memoized" function (:type "decorator") nil nil))              ) nil [7508 7672])
            ("__close_connections" function nil nil [7674 7762])
            ("atexit" code nil nil [7763 7799]))          
      :file "libvirtconnection.py"
      :pointmax 7800
      :fsize 7799
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("__future__" include nil nil [860 891])
            ("logging" include nil nil [893 907])
            ("sys" include nil nil [908 918])
            ("threading" include nil nil [919 935])
            ("traceback" include nil nil [936 952])
            ("collections" include nil nil [953 987])
            ("rccpxuanyuan.common" include nil nil [989 1028])
            ("rccpxuanyuan.common" include nil nil [1029 1065])
            ("Timeout" type
               (:documentation " Raised when operation timed out "
                :superclasses ("Exception")
                :type "class")
                nil [1068 1138])
            ("InvalidEvent" type
               (:documentation "
    Raised when waiting on invalided event.
    "
                :superclasses ("Exception")
                :type "class")
                nil [1140 1231])
            ("Barrier" type
               (:documentation "
    A barrier is synchronizing number of threads specified when the barrier
    was created.

    A barrier is created in a \"filling\" state. In this state, all threads
    invoking wait() will block until count threads have entered the barrier, or
    the specified timeout has expired.

    When the last thread has entered the barrier, the barrier switch state to
    \"draining\", and all threads are woken up. When the last thread has left the
    barrier, it switch state to \"filling\" again.

    Threads trying to enter the barrier when it is in \"draining\" state will
    block until it switch state to \"filling\", and then wait again until the
    barrier is in \"draining\" state.

    This class is behaves mostly like pthread_barrier_wait():
    http://linux.die.net/man/3/pthread_barrier_wait.

    Unlike pthread_barrier_wait(), this class supports an optional timeout,
    ensuring that threads will not wait forever. However, if one thread timed
    out, all threads waiting on this stage will timeout, since threads are
    waiting to each other.

    Example usage::

        barrier = Barrier(5)

        def thread():
            barrier.wait()

        for i in range(4):
            threading.Thread(target=thread).start()

        # Will block until all threads started above are blocked on wait(). The
        # last thread calling wait() will wake up all waiting threads.
        barrier.wait()

    "
                :superclasses ("object")
                :members 
                  ( ("FILLING" variable nil (reparse-symbol indented_block_body) [2690 2701])
                    ("DRAINING" variable nil (reparse-symbol indented_block_body) [2706 2718])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a barrier synchronizing count threads in FILLING state.

        Raises ValueError if count is less than one.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2759 2899])
                            ("if" code nil (reparse-symbol indented_block_body) [2908 3002])
                            ("self" variable nil (reparse-symbol indented_block_body) [3010 3029])
                            ("self" variable nil (reparse-symbol indented_block_body) [3038 3055])
                            ("self" variable nil (reparse-symbol indented_block_body) [3064 3090])
                            ("self" variable nil (reparse-symbol indented_block_body) [3099 3149]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2737 2741])
                            ("count" variable nil (reparse-symbol function_parameters) [2743 2748]))                          
                        :documentation "
        Create a barrier synchronizing count threads in FILLING state.

        Raises ValueError if count is less than one.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2724 3150])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3164 3168])
                            ("timeout" variable nil (reparse-symbol function_parameters) [3170 3177]))                          
                        :documentation "
        Wait until count threads are waiting on this barrier or timeout has
        expired.

        Raises Timeout if specified timeout has expired.
        ")
                        (reparse-symbol indented_block_body) [3155 3959])
                    ("_wait_for_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3984 3988])
                            ("state" variable nil (reparse-symbol function_parameters) [3990 3995])
                            ("deadline" variable nil (reparse-symbol function_parameters) [3997 4005]))                          )
                        (reparse-symbol indented_block_body) [3964 4326])
                    ("_change_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4349 4353])
                            ("state" variable nil (reparse-symbol function_parameters) [4355 4360]))                          )
                        (reparse-symbol indented_block_body) [4331 4423]))                  
                :type "class")
                nil [1233 4423])
            ("Result" variable nil nil [4425 4478])
            ("tmap" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [4490 4494])
                ("iterable" variable nil (reparse-symbol function_parameters) [4496 4504]))              ) nil [4481 4951])
            ("thread" function
               (:documentation "
    Create a thread for runnning func with args.

    Arguments:

    func        Function to run in a new thread.

    args        Arguments to pass to func

    kwargs      Keyword arguments to pass to func

    name        If set, set thread name.

    daemon      If True, create a daemon thread.

    log         If set, unhandled exception will be logged on this logger.
                Otherwise the root logger will be used.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [4964 4968])
                    ("args" variable nil (reparse-symbol function_parameters) [4970 4974])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4979 4985])
                    ("name" variable nil (reparse-symbol function_parameters) [4992 4996])
                    ("daemon" variable nil (reparse-symbol function_parameters) [5003 5009])
                    ("log" variable nil (reparse-symbol function_parameters) [5016 5019]))                  )
                nil [4953 6258])
            ("ValidatingEvent" type
               (:documentation "
    Event that can be invalidated.

    This Event behaves like threading.Event, but allows failing current and
    future waiters by invalidating the event.

    Waiters will raise immediately InvalidEvent exception if the event was
    invalid when calling wait(), or it was invalidated during wait().

    Based on Python 3 threading.Event.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6684 6734])
                            ("self" variable nil (reparse-symbol indented_block_body) [6743 6761])
                            ("self" variable nil (reparse-symbol indented_block_body) [6770 6788]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6669 6673]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6656 6789])
                    ("is_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6805 6809]))                          )
                        (reparse-symbol indented_block_body) [6794 6867])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6880 6884]))                          
                        :documentation "
        Set the internal flag to true.

        All threads waiting for the flag to become true are awakened. Threads
        that call wait() once the flag is true will not block at all.
        ")
                        (reparse-symbol indented_block_body) [6872 7190])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7205 7209]))                          
                        :documentation "
        Reset the internal flag to false.

        Subsequently, threads calling wait() will block until set() is called
        to set the internal flag to true again.
        ")
                        (reparse-symbol indented_block_body) [7195 7461])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7475 7479])
                            ("timeout" variable nil (reparse-symbol function_parameters) [7481 7488]))                          
                        :documentation "
        Block until the internal flag is true.

        If the internal flag is true on entry, return immediately. Otherwise,
        block until another thread calls set() to set the flag to true, or
        until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        This method returns the internal flag on exit, so it will always return
        True except if a timeout is given and the operation times out.

        If the event is invalid when calling wait, or was invalidted during the
        wait, raise InvalidEvent.
        ")
                        (reparse-symbol indented_block_body) [7466 8487])
                    ("valid" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8516 8520]))                          
                        :documentation "
        Return event validity.
        ")
                        (reparse-symbol indented_block_body) [8492 8634])
                    ("valid" function
                       (:parent "dummy"
                        :decorators 
                          ( ("valid.setter" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8667 8671])
                            ("value" variable nil (reparse-symbol function_parameters) [8673 8678]))                          
                        :documentation "
        Change event validity.

        Invalidating and event will wake up and raise InvalidEvent in all
        waiting threads.
        ")
                        (reparse-symbol indented_block_body) [8639 9005]))                  
                :type "class")
                nil [6260 9005])
            ("format_traceback" function
               (:documentation "
    Return thread traceback by ident (thread identifier).
    "
                :arguments 
                  ( ("ident" variable nil (reparse-symbol function_parameters) [9028 9033]))                  )
                nil [9007 9433]))          
      :file "concurrent.py"
      :pointmax 9433
      :fsize 9432
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((INDENT_BLOCK 6098 . 6159) (NEWLINE 6097 . 6098) (COLON 6096 . 6097) (EXCEPT 6090 . 6096) (INDENT_BLOCK 6024 . 6082) (NEWLINE 5978 . 5979) (COLON 5977 . 5978) (TRY 5641 . 5644) (AS 5973 . 5975) (INDENT_BLOCK 4684 . 4726) (NEWLINE 4683 . 4684) (COLON 4682 . 4683) (TRY 4602 . 4605) (AS 4678 . 4680)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [814 852])
            ("__future__" include nil nil [853 884])
            ("contextlib" include nil nil [886 923])
            ("suppress" function
               (:documentation "Python >= 3.4 suppress context manager.

    https://docs.python.org/3/library/contextlib.html#contextlib.suppress
    "
                :arguments 
                  ( ("exceptions" variable nil (reparse-symbol function_parameters) [955 966]))                  
                :decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  )
                nil [926 1158]))          
      :file "contextlib.py"
      :pointmax 1158
      :fsize 1157
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("__future__" include nil nil [860 891])
            ("collections" include nil nil [893 911])
            ("functools" include nil nil [912 928])
            ("hashlib" include nil nil [929 943])
            ("operator" include nil nil [944 959])
            ("os" include nil nil [960 969])
            ("uuid" include nil nil [970 981])
            ("xml.etree.cElementTree" include nil nil [982 1020])
            ("libvirt" include nil nil [1022 1036])
            ("six" include nil nil [1037 1047])
            ("rccpxuanyuan.common" include nil nil [1049 1085])
            ("rccpxuanyuan.common" include nil nil [1086 1125])
            ("rccpxuanyuan.common" include nil nil [1126 1167])
            ("rccpxuanyuan.common" include nil nil [1168 1205])
            ("rccpxuanyuan.common" include nil nil [1206 1255])
            ("rccpxuanyuan.common" include nil nil [1256 1305])
            ("rccpxuanyuan.common" include nil nil [1306 1346])
            ("rccpxuanyuan.common.cache" include nil nil [1347 1393])
            ("_MDEV_PATH" variable nil nil [1395 1429])
            ("_MDEV_FIELDS" variable nil nil [1430 1505])
            ("_OVIRT_MDEV_NAMESPACE" variable nil nil [1560 1633])
            ("_MdevDetail" variable nil nil [1634 1699])
            ("CAPABILITY_TO_XML_ATTR" variable nil nil [1702 1864])
            ("_LIBVIRT_DEVICE_FLAGS" variable nil nil [1866 2871])
            ("_DATA_PROCESSORS" variable nil nil [2873 2921])
            ("_last_alldevices_hash" variable nil nil [2922 2950])
            ("_device_tree_cache" variable nil nil [2951 2974])
            ("_device_address_to_name_cache" variable nil nil [2975 3009])
            ("PCIHeaderType" type
               (:members 
                  ( ("ENDPOINT" variable nil (reparse-symbol indented_block_body) [3037 3049])
                    ("BRIDGE" variable nil (reparse-symbol indented_block_body) [3054 3064])
                    ("CARDBUS_BRIDGE" variable nil (reparse-symbol indented_block_body) [3069 3087])
                    ("UNKNOWN" variable nil (reparse-symbol indented_block_body) [3092 3104]))                  
                :type "class")
                nil [3012 3105])
            ("Vendor" type
               (:members 
                  ( ("NVIDIA" variable nil (reparse-symbol indented_block_body) [3125 3142]))                  
                :type "class")
                nil [3107 3143])
            ("MdevPlacement" type
               (:members 
                  ( ("COMPACT" variable nil (reparse-symbol indented_block_body) [3170 3189])
                    ("SEPARATE" variable nil (reparse-symbol indented_block_body) [3194 3215]))                  
                :type "class")
                nil [3145 3216])
            ("NoIOMMUSupportException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3264 3268]))                  
                :type "class")
                nil [3218 3269])
            ("UnsuitableSCSIDevice" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3314 3318]))                  
                :type "class")
                nil [3271 3319])
            ("_DeviceTreeCache" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3395 3429])
                            ("self" variable nil (reparse-symbol indented_block_body) [3495 3517])
                            ("self" code nil (reparse-symbol indented_block_body) [3526 3549]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3371 3375])
                            ("devices" variable nil (reparse-symbol function_parameters) [3377 3384]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3358 3550])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3569 3573]))                          )
                        (reparse-symbol indented_block_body) [3555 3596])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3614 3618])
                            ("args" variable nil (reparse-symbol function_parameters) [3620 3625]))                          )
                        (reparse-symbol indented_block_body) [3601 3655])
                    ("get_by_parent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3678 3682])
                            ("capability" variable nil (reparse-symbol function_parameters) [3684 3694])
                            ("parent_name" variable nil (reparse-symbol function_parameters) [3696 3707]))                          )
                        (reparse-symbol indented_block_body) [3660 3877])
                    ("_populate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3896 3900])
                            ("devices" variable nil (reparse-symbol function_parameters) [3902 3909]))                          )
                        (reparse-symbol indented_block_body) [3882 4273])
                    ("_invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4294 4298]))                          )
                        (reparse-symbol indented_block_body) [4278 4344]))                  
                :type "class")
                nil [3321 4344])
            ("_data_processors_map" function (:decorators 
              ( ("Memoized" function (:type "decorator") nil nil))              ) nil [4346 4763])
            ("__device_tree_hash" function
               (:documentation "
    The hash generation works iff the order of devices returned from libvirt is
    stable.
    "
                :arguments 
                  ( ("libvirt_devices" variable nil (reparse-symbol function_parameters) [4788 4803]))                  )
                nil [4765 5073])
            ("_data_processor" function
               (:documentation "
    Register function as a data processor for device processing code.
    "
                :arguments 
                  ( ("target_bus" variable nil (reparse-symbol function_parameters) [5095 5105]))                  )
                nil [5075 5445])
            ("is_supported" function nil nil [5447 5792])
            ("_pci_header_type" function
               (:documentation "
    PCI header type is 1 byte located at 0x0e of PCI configuration space.
    Relevant part of the header structures:

    register (offset)|bits 31-24|bits 23-16 |bits 15-8    |bits 7-0
    0C               |BIST      |Header type|Latency Timer|Cache Line Size

    The structure of type looks like this:

    Bit 7             |Bits 6 to 0
    Multifunction flag|Header Type

    This function should be replaced when [1] is resolved.

    [1]https://bugzilla.redhat.com/show_bug.cgi?id=1317531
    "
                :arguments 
                  ( ("device_name" variable nil (reparse-symbol function_parameters) [5815 5826]))                  )
                nil [5794 6629])
            ("name_to_pci_path" function (:arguments 
              ( ("device_name" variable nil (reparse-symbol function_parameters) [6652 6663]))              ) nil [6631 6732])
            ("_each_device_xml" function (:arguments 
              ( ("libvirt_devices" variable nil (reparse-symbol function_parameters) [6755 6770]))              ) nil [6734 7063])
            ("scsi_address_to_adapter" function
               (:documentation "
    Read device compatible address and adapter info from scsi host address.
    "
                :arguments 
                  ( ("scsi_address" variable nil (reparse-symbol function_parameters) [7093 7105]))                  )
                nil [7065 7410])
            ("pci_address_to_name" function
               (:documentation "
    Convert 4 attributes that identify the pci device on the bus to
    libvirt's pci name: pci_${domain}_${bus}_${slot}_${function}.
    The first 2 characters are hex notation that is unwanted in the name.
    "
                :arguments 
                  ( ("domain" variable nil (reparse-symbol function_parameters) [7436 7442])
                    ("bus" variable nil (reparse-symbol function_parameters) [7444 7447])
                    ("slot" variable nil (reparse-symbol function_parameters) [7449 7453])
                    ("function" variable nil (reparse-symbol function_parameters) [7455 7463]))                  )
                nil [7412 7895])
            ("_sriov_totalvfs" function (:arguments 
              ( ("device_name" variable nil (reparse-symbol function_parameters) [7917 7928]))              ) nil [7897 8074])
            ("physical_function_net_name" function
               (:documentation "
    takes a pci path of a physical function (e.g. pci_0000_02_00_0) and returns
    the network interface name associated with it (e.g. enp2s0f0)
    "
                :arguments 
                  ( ("pf_pci_name" variable nil (reparse-symbol function_parameters) [8107 8118]))                  )
                nil [8076 8890])
            ("_process_address" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [8913 8923])
                ("children" variable nil (reparse-symbol function_parameters) [8925 8933]))              ) nil [8892 9083])
            ("" code nil nil [9101 9108])
            ("_process_pci_address" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [9134 9144]))              ) nil [9109 9226])
            ("" code nil nil [9244 9252])
            ("_process_scsi_address" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [9279 9289]))              ) nil [9253 9366])
            ("" code nil nil [9384 9398])
            ("_process_usb_address" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [9424 9434]))              ) nil [9399 9496])
            ("" code nil nil [9514 9521])
            ("_process_mdev_params" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [9547 9557]))              ) nil [9522 10564])
            ("" code nil nil [10582 10589])
            ("_process_assignability" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [10617 10627]))              ) nil [10590 11079])
            ("" code nil nil [11097 11113])
            ("_process_udev_path" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [11137 11147]))              ) nil [11114 11316])
            ("" code nil nil [11334 11336])
            ("_process_driver" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [11357 11367]))              ) nil [11337 11579])
            ("" code nil nil [11597 11608])
            ("_process_storage" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [11630 11640]))              ) nil [11609 11800])
            ("" code nil nil [11818 11825])
            ("_process_vfs" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [11843 11853]))              ) nil [11826 12056])
            ("" code nil nil [12074 12081])
            ("_process_iommu" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [12101 12111]))              ) nil [12082 12282])
            ("" code nil nil [12300 12307])
            ("_process_physfn" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [12328 12338]))              ) nil [12308 12589])
            ("" code nil nil [12607 12609])
            ("_process_productinfo" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [12635 12645]))              ) nil [12610 13044])
            ("" code nil nil [13062 13064])
            ("_process_parent" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [13085 13095]))              ) nil [13065 13239])
            ("" code nil nil [13257 13264])
            ("_process_numa" function (:arguments 
              ( ("device_xml" variable nil (reparse-symbol function_parameters) [13283 13293]))              ) nil [13265 13448])
            ("_process_scsi_device_params" function
               (:documentation "
    The information we need about SCSI device is contained within multiple
    sysfs devices:

    * vendor and product (not really, more of \"human readable name\") are
      provided by capability 'storage',
    * path to udev file (/dev/sgX) is provided by 'scsi_generic' capability
      and is required to set correct permissions.

    When reporting the devices via list_by_caps, we don't care if either of
    the devices are not found as the information provided is purely cosmetic.
    If the device is queried in hostdev object creation flow, vendor and
    product are still unnecessary, but udev_path becomes essential.
    "
                :arguments 
                  ( ("device_name" variable nil (reparse-symbol function_parameters) [13482 13493])
                    ("cache" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13450 14670])
            ("_process_device_params" function
               (:documentation "
    Process device_xml and return dict of found known parameters,
    also doing sysfs lookups for sr-iov related information
    "
                :arguments 
                  ( ("device_xml" variable nil (reparse-symbol function_parameters) [14699 14709]))                  )
                nil [14672 15269])
            ("_get_device_ref_and_params" function (:arguments 
              ( ("device_name" variable nil (reparse-symbol function_parameters) [15302 15313]))              ) nil [15271 15745])
            ("_process_all_devices" function (:arguments 
              ( ("libvirt_devices" variable nil (reparse-symbol function_parameters) [15772 15787]))              ) nil [15747 15959])
            ("_get_devices_from_libvirt" function
               (:documentation "
    Returns all available host devices from libvirt processd to dict
    "
                :arguments 
                  ( ("flags" variable nil (reparse-symbol function_parameters) [15991 15996]))                  )
                nil [15961 17099])
            ("_update_address_to_name_map" function (:arguments 
              ( ("address_to_name" variable nil (reparse-symbol function_parameters) [17133 17148])
                ("device_name" variable nil (reparse-symbol function_parameters) [17150 17161])
                ("device_params" variable nil (reparse-symbol function_parameters) [17163 17176]))              ) nil [17101 17442])
            ("_each_mdev_device" function nil nil [17444 17548])
            ("_each_supported_mdev_type" function (:arguments 
              ( ("pci_device" variable nil (reparse-symbol function_parameters) [17580 17590]))              ) nil [17550 17734])
            ("_mdev_type_details" function (:arguments 
              ( ("mdev_type" variable nil (reparse-symbol function_parameters) [17759 17768])
                ("path" variable nil (reparse-symbol function_parameters) [17770 17774]))              ) nil [17736 18147])
            ("_mdev_device_vendor" function (:arguments 
              ( ("device" variable nil (reparse-symbol function_parameters) [18173 18179]))              ) nil [18149 18283])
            ("_mdev_type_devices" function (:arguments 
              ( ("mdev_type" variable nil (reparse-symbol function_parameters) [18308 18317])
                ("path" variable nil (reparse-symbol function_parameters) [18319 18323]))              ) nil [18285 18390])
            ("_suitable_device_for_mdev_type" function (:arguments 
              ( ("target_mdev_type" variable nil (reparse-symbol function_parameters) [18427 18443])
                ("mdev_placement" variable nil (reparse-symbol function_parameters) [18445 18459])
                ("log" variable nil (reparse-symbol function_parameters) [18461 18464]))              ) nil [18392 19834])
            ("device_name_from_address" function (:arguments 
              ( ("address_type" variable nil (reparse-symbol function_parameters) [19865 19877])
                ("device_address" variable nil (reparse-symbol function_parameters) [19879 19893]))              ) nil [19836 20037])
            ("list_by_caps" function
               (:documentation "
    Returns devices that have specified capability in format
    {device_name: {'params': {'capability': '', 'vendor': '',
                              'vendor_id': '', 'product': '',
                              'product_id': '', 'iommu_group': ''},
                   'vmId': vmId]}

    caps -- list of strings determining devices of which capabilities
            will be returned (e.g. ['pci', 'usb'] -> pci and usb devices)
    "
                :arguments 
                  ( ("caps" variable nil (reparse-symbol function_parameters) [20056 20060]))                  )
                nil [20039 20834])
            ("get_device_params" function (:arguments 
              ( ("device_name" variable nil (reparse-symbol function_parameters) [20858 20869]))              ) nil [20836 20960])
            ("detach_detachable" function (:arguments 
              ( ("device_name" variable nil (reparse-symbol function_parameters) [20984 20995]))              ) nil [20962 21415])
            ("reattach_detachable" function (:arguments 
              ( ("device_name" variable nil (reparse-symbol function_parameters) [21441 21452])
                ("pci_reattach" variable nil (reparse-symbol function_parameters) [21454 21466]))              ) nil [21417 21887])
            ("change_numvfs" function (:arguments 
              ( ("device_name" variable nil (reparse-symbol function_parameters) [21907 21918])
                ("numvfs" variable nil (reparse-symbol function_parameters) [21920 21926]))              ) nil [21889 22119])
            ("spawn_mdev" function (:arguments 
              ( ("mdev_type" variable nil (reparse-symbol function_parameters) [22136 22145])
                ("mdev_uuid" variable nil (reparse-symbol function_parameters) [22147 22156])
                ("mdev_placement" variable nil (reparse-symbol function_parameters) [22158 22172])
                ("log" variable nil (reparse-symbol function_parameters) [22174 22177]))              ) nil [22121 22701])
            ("despawn_mdev" function (:arguments 
              ( ("mdev_uuid" variable nil (reparse-symbol function_parameters) [22720 22729]))              ) nil [22703 23170])
            ("get_mdev_uuid" function (:arguments 
              ( ("vm_id" variable nil (reparse-symbol function_parameters) [23190 23195]))              ) nil [23172 23255])
            ("_format_address" function (:arguments 
              ( ("dev_type" variable nil (reparse-symbol function_parameters) [23277 23285])
                ("address" variable nil (reparse-symbol function_parameters) [23287 23294]))              ) nil [23257 23588]))          
      :file "hostdev.py"
      :pointmax 23588
      :fsize 23587
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((NAME 10039 . 10054) (IF 10090 . 10092) (ELSE 10111 . 10115)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
cache工具包
提供cache功能相关的装饰器、工具方法和工具类等
\"\"\"" code nil nil [813 855])
            ("functools" include nil nil [858 874])
            ("threading" include nil nil [875 891])
            ("MULTIKEYCACHE_GET_CACHE_NO_DEFAULT_FLAG" variable nil nil [894 944])
            ("Memoized" type
               (:documentation "
    Decorator that caches a function's return value each time it is called.
    If called later with the same arguments, the cached value is returned, and
    not re-evaluated. There is no support for uncachable arguments.

    Adaptation from http://wiki.python.org/moin/PythonDecoratorLibrary#Memoize
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1320 1336])
                            ("self" variable nil (reparse-symbol indented_block_body) [1345 1360])
                            ("functools" code nil (reparse-symbol indented_block_body) [1369 1405]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1299 1303])
                            ("func" variable nil (reparse-symbol function_parameters) [1305 1309]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1286 1406])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1424 1428])
                            ("args" variable nil (reparse-symbol function_parameters) [1430 1435]))                          )
                        (reparse-symbol indented_block_body) [1411 1611])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1631 1635]))                          
                        :documentation " 释放 ")
                        (reparse-symbol indented_block_body) [1616 1684])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1701 1705])
                            ("obj" variable nil (reparse-symbol function_parameters) [1707 1710])
                            ("objtype" variable nil (reparse-symbol function_parameters) [1712 1719]))                          
                        :documentation "Support instance methods.")
                        (reparse-symbol indented_block_body) [1689 1887]))                  
                :type "class")
                nil [947 1887])
            ("_MultiKeyDict" type
               (:documentation "
    定义：封装多key-单value映射字典
    "
                :superclasses ("dict")
                :members 
                  ( ("set_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1976 1980])
                            ("set_keys" variable nil (reparse-symbol function_parameters) [1982 1990])
                            ("value" variable nil (reparse-symbol function_parameters) [1992 1997]))                          
                        :documentation " set value ")
                        (reparse-symbol indented_block_body) [1962 2086])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2105 2109])
                            ("find_keys" variable nil (reparse-symbol function_parameters) [2111 2120]))                          
                        :documentation " get value ")
                        (reparse-symbol indented_block_body) [2091 2272])
                    ("clear_items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2293 2297])
                            ("clear_keys" variable nil (reparse-symbol function_parameters) [2299 2309]))                          
                        :documentation " clear element ")
                        (reparse-symbol indented_block_body) [2277 2400]))                  
                :type "class")
                nil [1889 2400])
            ("MultiKeyCache" type
               (:documentation "
    定义：多键值缓存目标值，用来实现动态管理跨线程资源。通过key-value多对一的关系，
    把key作为资源进行打包。
    "
                :members 
                  ( ("_mutex_cache" variable nil (reparse-symbol indented_block_body) [2513 2543])
                    ("_cache_lock" variable nil (reparse-symbol indented_block_body) [2548 2578])
                    ("clear_cache" function
                       (:documentation "
        根据别名列表获清理资源缓存回
        :param alias: 资源别名列表，类型为列表
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3212 3215])
                            ("alias" variable nil (reparse-symbol function_parameters) [3217 3222]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3179 3457]))                  
                :type "class")
                nil [2404 3457]))          
      :file "cache.py"
      :pointmax 3457
      :fsize 3782
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
xml help package
\"\"\"" code nil nil [1 25])
            ("io" include nil nil [28 37])
            ("copy" include nil nil [38 49])
            ("xml.etree.ElementTree" include nil nil [50 87])
            ("six" include nil nil [89 99])
            ("from_string" function
               (:documentation "
    xml字符串装xml对象接口
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [118 122]))                  )
                nil [102 380])
            ("to_string" function
               (:documentation "
    xml对象转xml字符串接口
    "
                :arguments 
                  ( ("element" variable nil (reparse-symbol function_parameters) [395 402])
                    ("pretty" variable nil (reparse-symbol function_parameters) [404 410]))                  )
                nil [381 786])
            ("indent" function
               (:documentation "
    Modify element indentation in-place.
    Based on http://effbot.org/zone/element-lib.htm#prettyprint
    "
                :arguments 
                  ( ("element" variable nil (reparse-symbol function_parameters) [799 806])
                    ("level" variable nil (reparse-symbol function_parameters) [808 813])
                    ("space" variable nil (reparse-symbol function_parameters) [817 822]))                  )
                nil [788 1461])
            ("get_element" function
               (:documentation "获取节点, 若节点不存在, 则创建之
    @element: xml.etree.ElementTree.Element, required
    @tag: string, required
    "
                :arguments 
                  ( ("element" variable nil (reparse-symbol function_parameters) [1479 1486])
                    ("tag" variable nil (reparse-symbol function_parameters) [1488 1491]))                  )
                nil [1463 1737])
            ("get_parent_by_text" function
               (:documentation "通过属性值来查找 xml
    @ele: xml.etree.ElementTree.Element, required, 根节点
    @attrib: string, required, 子节点属性名
    @value: required, 子节点属性值
    "
                :arguments 
                  ( ("ele" variable nil (reparse-symbol function_parameters) [1762 1765])
                    ("text" variable nil (reparse-symbol function_parameters) [1767 1771]))                  )
                nil [1739 2030])
            ("iterate_xml_element" function
               (:documentation "
    xml.etree.ElementTree.Element迭代处理接口，根据入参的处理方法，处理元素和处理入参，
    进行迭代处理元素所有xml节点。
    :param operator: xml元素处理函数，约定第一个入参为xml.etree.ElementTree.Element对象，
    通过return来结束迭代。
    :param ele:xml元素，作为operator处理入参
    :param args:入参列表
    :param kwargs:入参字典
    :return:返回operator处理结果，泛型。
    "
                :arguments 
                  ( ("operator" variable nil (reparse-symbol function_parameters) [2056 2064])
                    ("ele" variable nil (reparse-symbol function_parameters) [2066 2069])
                    ("args" variable nil (reparse-symbol function_parameters) [2071 2076])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [2078 2086]))                  )
                nil [2032 2616])
            ("set_element_text_or_attrib" function
               (:documentation "
    设置xml对象text或属性接口
    "
                :arguments 
                  ( ("ele" variable nil (reparse-symbol function_parameters) [2649 2652])
                    ("find_key" variable nil (reparse-symbol function_parameters) [2654 2662])
                    ("set_value" variable nil (reparse-symbol function_parameters) [2664 2673]))                  )
                nil [2618 2919])
            ("create_element" function
               (:documentation "
    创建etree Element对象
    "
                :arguments 
                  ( ("tag" variable nil (reparse-symbol function_parameters) [2940 2943]))                  )
                nil [2921 3015])
            ("children" function
               (:documentation "
    Return direct subelements of `element`.

    :param element: element to get the children from
    :type element: DOM element
    :param tag: if given then only children with this tag are returned
    :type tag: basestring
    :returns: children of `element`, optionally filtered by `tag`
    :rtype: iterator providing the selected children

    "
                :arguments 
                  ( ("element" variable nil (reparse-symbol function_parameters) [3030 3037])
                    ("tag" variable nil (reparse-symbol function_parameters) [3039 3042]))                  )
                nil [3017 3501])
            ("get_tag" function
               (:documentation "
    Return tag of the given DOM element.

    :param element: element to get the tag of
    :type element: DOM element
    :returns: tag of the element
    :rtype: basestring
    "
                :arguments 
                  ( ("element" variable nil (reparse-symbol function_parameters) [3515 3522]))                  )
                nil [3503 3739])
            ("copy_element" function
               (:documentation "
    copy src to dist
    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3758 3761])
                    ("dist" variable nil (reparse-symbol function_parameters) [3763 3767]))                  )
                nil [3741 3951]))          
      :file "xmlutils.py"
      :pointmax 3951
      :fsize 4268
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [814 852])
            ("__future__" include nil nil [853 884])
            ("os" include nil nil [886 895])
            ("constants" include nil nil [903 919])
            ("PKI_DIR" variable nil nil [921 990])
            ("KEY_FILE" variable nil nil [991 1054])
            ("CERT_FILE" variable nil nil [1055 1121])
            ("CA_FILE" variable nil nil [1122 1176]))          
      :file "pki.py"
      :pointmax 1177
      :fsize 1176
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax '((FROM 896 . 900) (PERIOD 901 . 902)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
动态导入类---后续移入公共库
\"\"\"" code nil nil [74 97])
            ("importlib" include nil nil [99 115])
            ("json" include nil nil [116 127])
            ("DynamicClassLoader" type
               (:documentation "动态导入类"
                :members 
                  ( ("_read_json_file" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("path" variable nil (reparse-symbol function_parameters) [214 218]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [176 356])
                    ("load" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [387 390])
                            ("json_path" variable nil (reparse-symbol function_parameters) [392 401]))                          )
                        (reparse-symbol indented_block_body) [361 983]))                  
                :type "class")
                nil [129 983]))          
      :file "dynamic_class_loader.py"
      :pointmax 983
      :fsize 1112
      :lastmodtime '(23940 33512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
获取VIP
\"\"\"" code nil nil [1 14])
            ("rccpxuanyuan.common" include nil nil [16 57])
            ("rccpxuanyuan.common.config" include nil nil [58 117])
            ("rccpxuanyuan.common.fileutils" include nil nil [118 172])
            ("VIP_FILE" variable nil nil [175 213])
            ("UNSET_VIP_INFO" variable nil nil [214 338])
            ("Vip" type
               (:documentation "
    VIP类
    "
                :members 
                  ( ("get_vip" function
                       (:documentation "
        获取VIP
        :return:
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [413 416]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [384 611])
                    ("set_vip" function
                       (:documentation "
        设置VIP
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [645 648])
                            ("vip_info" variable nil (reparse-symbol function_parameters) [650 658]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [616 1114]))                  
                :type "class")
                nil [341 1114])
            ("RollbackVipInfo" type
               (:documentation "
    vip配置回滚类，通过上下文管理实现单vip配置异常时回滚vip配置
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1070 1114]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1212 1216]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1199 1273])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1292 1296]))                          )
                        (reparse-symbol indented_block_body) [1278 1340])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1358 1362])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [1364 1372])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [1374 1383])
                            ("exc_tb" variable nil (reparse-symbol function_parameters) [1385 1391]))                          )
                        (reparse-symbol indented_block_body) [1345 1461]))                  
                :type "class")
                nil [1116 1461]))          
      :file "vip.py"
      :pointmax 1461
      :fsize 1524
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
rccpxuanyuan推送消息
\"\"\"" code nil nil [79 103])
            ("time" include nil nil [105 116])
            ("socket" include nil nil [117 130])
            ("emei.framework.client" include nil nil [132 178])
            ("emei.utils.config" include nil nil [179 229])
            ("rccpxuanyuan.common.vip" include nil nil [231 270])
            ("rccpxuanyuan.common.cache" include nil nil [271 317])
            ("rccpxuanyuan.common" include nil nil [318 353])
            ("rccpxuanyuan.common" include nil nil [354 395])
            ("rccpxuanyuan.common" include nil nil [396 437])
            ("rccpxuanyuan.host.api" include nil nil [439 477])
            ("XuanyuanNotifier" type
               (:documentation "
    rccpxuanyuan的消息推送类
    "
                :members 
                  ( ("get_notify_instance" function
                       (:documentation "
        获取消息推送的对象
        :return:
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [605 608]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("Memoized" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [550 1690])
                    ("" code nil (reparse-symbol indented_block_body) [1743 1831])
                    ("notify" function
                       (:documentation "
        推送rccpxuanyuan的消息
        :param event_type: 消息类型
        :return:
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1847 1850])
                            ("notify_msg" variable nil (reparse-symbol function_parameters) [1852 1862])
                            ("event_type" variable nil (reparse-symbol function_parameters) [1864 1874]))                          )
                        (reparse-symbol indented_block_body) [1836 2502]))                  
                :type "class")
                nil [480 2502]))          
      :file "notify.py"
      :pointmax 2502
      :fsize 2611
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
file utils help other module operator files
\"\"\"" code nil nil [1 52])
            ("errno" include nil nil [54 66])
            ("logging" include nil nil [67 81])
            ("io" include nil nil [82 91])
            ("contextlib" include nil nil [93 130])
            ("os" include nil nil [131 140])
            ("shutil" include nil nil [141 154])
            ("tempfile" include nil nil [155 170])
            ("touch_file" function
               (:documentation "
    http://www.unix.com/man-page/POSIX/1posix/touch/
    If a file at filePath already exists, its accessed and modified times are
    updated to the current time. Otherwise, the file is created.
    :param file_path: The file to touch
    "
                :arguments 
                  ( ("file_path" variable nil (reparse-symbol function_parameters) [188 197]))                  )
                nil [173 517])
            ("rm_file" function
               (:documentation "
    Try to remove a file.

    If the file doesn't exist it's assumed that it was already removed.
    "
                :arguments 
                  ( ("file_to_remove" variable nil (reparse-symbol function_parameters) [531 545]))                  )
                nil [519 945])
            ("atomic_file_write" function
               (:documentation "
    Atomically write into a file.

    Usage:

        with atomic_write('foo.txt', 'w') as f:
            f.write('shrubbery')
            # there are no changes on foo.txt yet
        # now it is changed
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [985 993])
                    ("flag" variable nil (reparse-symbol function_parameters) [995 999]))                  
                :decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  )
                nil [947 1706])
            ("rm_tree" function
               (:documentation "
    Try to remove a directory and all it's contents.

    If the directory doesn't exist it's assumed that it was already removed.
    "
                :arguments 
                  ( ("dir_to_remove" variable nil (reparse-symbol function_parameters) [1720 1733]))                  )
                nil [1708 2098])
            ("parse_key_val_file" function (:arguments 
              ( ("file_name" variable nil (reparse-symbol function_parameters) [2123 2132])
                ("delim" variable nil (reparse-symbol function_parameters) [2134 2139]))              ) nil [2100 2522])
            ("FileRollback" type
               (:documentation "
    文件回滚类
    职责:
        1. 在修改文件内容事务中出现错误，完成文件内容回滚
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2662 2697])
                            ("self" variable nil (reparse-symbol indented_block_body) [2706 2747]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2631 2635])
                            ("rollback_file" variable nil (reparse-symbol function_parameters) [2637 2650]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2618 2748])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2767 2771]))                          )
                        (reparse-symbol indented_block_body) [2753 2836])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2854 2858])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [2860 2868])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [2870 2879])
                            ("exc_tb" variable nil (reparse-symbol function_parameters) [2881 2887]))                          )
                        (reparse-symbol indented_block_body) [2841 2977])
                    ("_get_bak_filename" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2982 3063]))                  
                :type "class")
                nil [2524 3063]))          
      :file "fileutils.py"
      :pointmax 3063
      :fsize 3122
      :lastmodtime '(23966 51574 0 0)
      :unmatched-syntax '((INDENT_BLOCK 1954 . 2098) (NEWLINE 1953 . 1954) (COLON 1952 . 1953) (TRY 1887 . 1890) (AS 1948 . 1950) (INDENT_BLOCK 731 . 945) (NEWLINE 730 . 731) (COLON 729 . 730) (TRY 667 . 670) (AS 725 . 727))))
  :file "!usr!lib!python3.6!site-packages!project!rccpxuanyuan!rccpxuanyuan!common!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
