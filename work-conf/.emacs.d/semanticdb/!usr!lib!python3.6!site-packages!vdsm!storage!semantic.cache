;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-automake-mode
      :tags 
        '( ("SUBDIRS" variable (:default-value ("protect" "sdm")) nil [813 835])
            ("$(top_srcdir)/build-aux/Makefile.subs" include nil nil [836 882])
            ("vdsmstoragedir" variable (:default-value ("$(vdsmpylibdir)/storage")) nil [883 924])
            ("dist_vdsmstorage_PYTHON" variable (:default-value ("__init__.py" "asyncevent.py" "asyncutils.py" "backends.py" "blkdiscard.py" "blockSD.py" "blockVolume.py" "blockdev.py" "check.py" "clusterlock.py" "compat.py" "constants.py" "curlImgWrap.py" "devicemapper.py" "directio.py" "dispatcher.py" "exception.py" "fallocate.py" "fileSD.py" "fileUtils.py" "fileVolume.py" "formatconverter.py" "fsutils.py" "fuser.py" "glusterSD.py" "glusterVolume.py" "guarded.py" "hba.py" "hsm.py" "image.py" "imageSharing.py" "imagetickets.py" "iscsi.py" "iscsiadm.py" "localFsSD.py" "lvm.py" "lvmconf.py" "lvmfilter.py" "mailbox.py" "managedvolume.py" "managedvolumedb.py" "merge.py" "misc.py" "monitor.py" "mount.py" "mpathhealth.py" "multipath.py" "nbd.py" "nfsSD.py" "nos_brick.py" "operation.py" "outOfProcess.py" "persistent.py" "qemuimg.py" "resourceFactories.py" "resourceManager.py" "rwlock.py" "sd.py" "sdc.py" "securable.py" "sp.py" "spbackends.py" "storageServer.py" "sysfs.py" "task.py" "taskManager.py" "threadPool.py" "udev.py" "validators.py" "volume.py" "volumemetadata.py" "workarounds.py" "xlease.py" "$(NULL)")) nil [925 2081])
            ("dist_vdsmexec_SCRIPTS" variable (:default-value ("curl-img-wrap" "fc-scan" "managedvolume-helper")) nil [2082 2158])
            ("nodist_vdsmstorage_DATA" variable (:default-value ("lvm.env" "$(NULL)")) nil [2168 2216])
            ("EXTRA_DIST" variable (:default-value ("lvm.env.in" "$(NULL)")) nil [2217 2255])
            ("all" function (:arguments ("vdsm-lvm.rules")) nil [2256 2276])
            ("vdsm-lvm.rules" function (:arguments ("vdsm_lvm_rules.template")) nil [2277 2352])
            ("install-data-local" function (:arguments ("vdsm-lvm.rules")) nil [2353 2514])
            ("uninstall-local" function nil nil [2515 2589]))          
      :file "Makefile.am"
      :pointmax 2589
      :fsize 2588
      :lastmodtime '(23968 6112 207983 407000)
      :unmatched-syntax '((shell-command 2533 . 2588) (bol 2532 . 2532) (shell-command 2159 . 2166) (bol 2158 . 2158)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [821 859])
            ("os" include nil nil [861 870])
            ("glob" include nil nil [871 899])
            ("logging" include nil nil [900 914])
            ("threading" include nil nil [915 931])
            ("errno" include nil nil [932 944])
            ("uuid" include nil nil [945 956])
            ("codecs" include nil nil [957 970])
            ("functools" include nil nil [971 1000])
            ("weakref" include nil nil [1001 1026])
            ("six" include nil nil [1028 1038])
            ("vdsm.common" include nil nil [1040 1074])
            ("vdsm.common.panic" include nil nil [1075 1110])
            ("vdsm.storage" include nil nil [1111 1143])
            ("vdsm.storage" include nil nil [1144 1184])
            ("vdsm.storage" include nil nil [1185 1225])
            ("vdsm.storage" include nil nil [1226 1257])
            ("vdsm.storage" include nil nil [1258 1292])
            ("vdsm.storage" include nil nil [1293 1323])
            ("vdsm.storage" include nil nil [1324 1356])
            ("vdsm.storage" include nil nil [1357 1387])
            ("vdsm.storage" include nil nil [1388 1417])
            ("vdsm.storage" include nil nil [1418 1448])
            ("vdsm.storage" include nil nil [1449 1495])
            ("vdsm.storage" include nil nil [1496 1523])
            ("vdsm.storage" include nil nil [1524 1555])
            ("vdsm.storage.formatconverter" include nil nil [1556 1619])
            ("vdsm.storage.sdc" include nil nil [1620 1656])
            ("vdsm.storage.securable" include nil nil [1657 1723])
            ("POOL_MASTER_DOMAIN" variable nil nil [1725 1756])
            ("SPM_ACQUIRED" variable nil nil [1758 1778])
            ("SPM_CONTEND" variable nil nil [1779 1802])
            ("SPM_FREE" variable nil nil [1803 1820])
            ("SPM_ID_FREE" code nil nil [1821 1837])
            ("LVER_INVALID" code nil nil [1838 1855])
            ("DisconnectedPool" type
               (:documentation "
    Dummy storage pool used when we are not connected to a storage pool.

    Any access will fail with se.StoragePoolNotConnected.

    This avoids races such as::

        if self._pool:
            # Pool was not None, but now it is None
            self._pool.do_something()

    With this dummy pool, you should simply use the pool::

        self._pool.do_something()

    If the pool is not connected, we raise the correct error.
    "
                :superclasses ("object")
                :members 
                  ( ("is_connected" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2364 2368]))                          )
                        (reparse-symbol indented_block_body) [2347 2392])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2413 2417])
                            ("name" variable nil (reparse-symbol function_parameters) [2419 2423]))                          )
                        (reparse-symbol indented_block_body) [2397 2467]))                  
                :type "class")
                nil [1858 2467])
            ("StoragePool" type
               (:superclasses ("object")
                :members 
                  ( ("'''
    StoragePool object should be relatively cheap to construct. It should defer
    any heavy lifting activities until the time it is really needed.
    '''" code nil (reparse-symbol indented_block_body) [2509 2669])
                    ("log" variable nil (reparse-symbol indented_block_body) [2675 2721])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2791 2824])
                            ("self" variable nil (reparse-symbol indented_block_body) [2833 2881])
                            ("self" variable nil (reparse-symbol indented_block_body) [2890 2917])
                            ("self" variable nil (reparse-symbol indented_block_body) [2926 2955])
                            ("self" code nil (reparse-symbol indented_block_body) [2964 2983])
                            ("self" variable nil (reparse-symbol indented_block_body) [2992 3017])
                            ("self" variable nil (reparse-symbol indented_block_body) [3026 3088])
                            ("self" variable nil (reparse-symbol indented_block_body) [3097 3118])
                            ("self" variable nil (reparse-symbol indented_block_body) [3127 3153])
                            ("self" variable nil (reparse-symbol indented_block_body) [3162 3183])
                            ("self" variable nil (reparse-symbol indented_block_body) [3192 3213])
                            ("self" variable nil (reparse-symbol indented_block_body) [3222 3246])
                            ("self" variable nil (reparse-symbol indented_block_body) [3255 3278])
                            ("self" variable nil (reparse-symbol indented_block_body) [3287 3321])
                            ("self" variable nil (reparse-symbol indented_block_body) [3330 3446])
                            ("self" variable nil (reparse-symbol indented_block_body) [3455 3548])
                            ("self" variable nil (reparse-symbol indented_block_body) [3557 3577]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2740 2744])
                            ("spUUID" variable nil (reparse-symbol function_parameters) [2746 2752])
                            ("domainMonitor" variable nil (reparse-symbol function_parameters) [2754 2767])
                            ("taskManager" variable nil (reparse-symbol function_parameters) [2769 2780]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2727 3578])
                    ("__is_secure__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3601 3605]))                          )
                        (reparse-symbol indented_block_body) [3583 3639])
                    ("isSecure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3672 3676]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3644 3716])
                    ("_setSecure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3751 3755]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3721 3786])
                    ("_setUnsecure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3823 3827]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3791 3860])
                    ("is_connected" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3897 3901]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3865 3924])
                    ("getSpmStatus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3961 3965]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3929 4012])
                    ("validateSPM" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4048 4052]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4017 4145])
                    ("validateNotSPM" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4184 4188]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4150 4268])
                    ("setBackend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4303 4307])
                            ("backend" variable nil (reparse-symbol function_parameters) [4309 4316]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4273 4621])
                    ("getBackend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4656 4660]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4626 4692])
                    ("_domainStateChange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4735 4739])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [4741 4747])
                            ("isValid" variable nil (reparse-symbol function_parameters) [4749 4756]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4697 5682])
                    ("_upgradePoolDomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5710 5714])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [5716 5722])
                            ("isValid" variable nil (reparse-symbol function_parameters) [5724 5731]))                          )
                        (reparse-symbol indented_block_body) [5687 8048])
                    ("_shouldUpgradeDomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8093 8097])
                            ("domain" variable nil (reparse-symbol function_parameters) [8099 8105])
                            ("targetDomVersion" variable nil (reparse-symbol function_parameters) [8107 8123]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8053 8497])
                    ("_maybe_fix_domain_role" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8529 8533])
                            ("dom" variable nil (reparse-symbol function_parameters) [8535 8538]))                          )
                        (reparse-symbol indented_block_body) [8502 8780])
                    ("startSpm" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8813 8817])
                            ("prevID" variable nil (reparse-symbol function_parameters) [8819 8825])
                            ("prevLVER" variable nil (reparse-symbol function_parameters) [8827 8835])
                            ("maxHostID" variable nil (reparse-symbol function_parameters) [8837 8846])
                            ("expectedDomVersion" variable nil (reparse-symbol function_parameters) [8848 8866]))                          
                        :documentation "
        Starts the SPM functionality.

        :param spUUID: The UUID of the storage pool you want to manage with the
                       SPM.
        :type spUUID: UUID
        :param prevID: obsolete
        :param prevLVER: obsolete
        :param maxHostID: The maximun ID of the host.?
        :type maxHostID: int

        .. note::
            if the SPM is already started the function will fail silently.

        :raises: :exc:`storage.exception.MiscOperationInProgress` if
                       called during an already running connection
                       attempt. (makes the fact that it fails silently
                       does not matter very much).
        ")
                        (reparse-symbol indented_block_body) [8785 14379])
                    ("_shutDownUpgrade" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14420 14424]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14384 14818])
                    ("cleanupMasterMount" function
                       (:documentation "
        Check whether there are any dangling master file systems still mounted
        and unmount them if found.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14863 14866]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14823 15577])
                    ("stopSpm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15594 15598])
                            ("force" variable nil (reparse-symbol function_parameters) [15600 15605]))                          )
                        (reparse-symbol indented_block_body) [15582 16779])
                    ("_upgradePool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16801 16805])
                            ("targetDomVersion" variable nil (reparse-symbol function_parameters) [16807 16823])
                            ("lockTimeout" variable nil (reparse-symbol function_parameters) [16825 16836]))                          )
                        (reparse-symbol indented_block_body) [16784 19298])
                    ("__createMailboxMonitor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19345 19349]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19303 19878])
                    ("__cleanupDomains" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19919 19923])
                            ("domlist" variable nil (reparse-symbol function_parameters) [19925 19932])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [19934 19941])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [19943 19956]))                          
                        :documentation "
        Clean up domains after failed Storage Pool creation
        domlist - comma separated list of sdUUIDs
        ")
                        (reparse-symbol indented_block_body) [19883 20680])
                    ("validatePoolSD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20748 20752])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [20754 20760]))                          )
                        (reparse-symbol indented_block_body) [20729 20898])
                    ("validateAttachedDomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20930 20934])
                            ("dom" variable nil (reparse-symbol function_parameters) [20936 20939]))                          
                        :documentation "
        Avoid handling domains if not owned by pool.
        ")
                        (reparse-symbol indented_block_body) [20903 21285])
                    ("_acquireTemporaryClusterLock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21338 21342])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [21344 21351])
                            ("leaseParams" variable nil (reparse-symbol function_parameters) [21353 21364]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21290 22021])
                    ("_releaseTemporaryClusterLock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22074 22078])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [22080 22087]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22026 22265])
                    ("create" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22296 22300])
                            ("poolName" variable nil (reparse-symbol function_parameters) [22302 22310])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [22312 22319])
                            ("domList" variable nil (reparse-symbol function_parameters) [22321 22328])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [22330 22343])
                            ("leaseParams" variable nil (reparse-symbol function_parameters) [22345 22356]))                          
                        :documentation "
        Create new storage pool with single/multiple image data domain.
        The command will create new storage pool meta-data attach each
        storage domain to that storage pool.
        At least one data (images) domain must be provided
         'poolName' - storage pool name
         'msdUUID' - master domain of this pool (one of domList)
         'domList' - list of domains (i.e sdUUID,sdUUID,...,sdUUID)
        ")
                        (reparse-symbol indented_block_body) [22270 26357])
                    ("connect" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26389 26393])
                            ("hostID" variable nil (reparse-symbol function_parameters) [26395 26401])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [26403 26410])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [26412 26425]))                          
                        :documentation "
        Connect a Host to a specific storage pool.

        Caller must acquire resource Storage.spUUID so that this method would
        never be called twice concurrently.
        ")
                        (reparse-symbol indented_block_body) [26362 27470])
                    ("_startWatchingDomainsState" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27521 27525]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27475 27679])
                    ("_stopWatchingDomainsState" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27729 27733]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27684 28006])
                    ("stopMonitoringDomains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28052 28056]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28011 28153])
                    ("disconnect" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28188 28192]))                          
                        :documentation "
        Disconnect a Host from specific storage pool.

        Caller must acquire resource Storage.spUUID so that this method would
        never be called twice concurrently.
        ")
                        (reparse-symbol indented_block_body) [28158 28885])
                    ("createMaster" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28922 28926])
                            ("poolName" variable nil (reparse-symbol function_parameters) [28928 28936])
                            ("domain" variable nil (reparse-symbol function_parameters) [28938 28944])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [28946 28959])
                            ("leaseParams" variable nil (reparse-symbol function_parameters) [28961 28972]))                          
                        :documentation "
        Create a fresh master file system directory tree
        ")
                        (reparse-symbol indented_block_body) [28890 29484])
                    ("reconstructMaster" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29526 29530])
                            ("hostId" variable nil (reparse-symbol function_parameters) [29532 29538])
                            ("poolName" variable nil (reparse-symbol function_parameters) [29540 29548])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [29550 29557])
                            ("domDict" variable nil (reparse-symbol function_parameters) [29559 29566])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [29594 29607])
                            ("leaseParams" variable nil (reparse-symbol function_parameters) [29609 29620]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29489 31274])
                    ("_copyLeaseParameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31304 31308])
                            ("srcDomain" variable nil (reparse-symbol function_parameters) [31310 31319])
                            ("dstDomain" variable nil (reparse-symbol function_parameters) [31321 31330]))                          )
                        (reparse-symbol indented_block_body) [31279 31555])
                    ("masterMigrate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31578 31582])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [31584 31590])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [31592 31599])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [31601 31614]))                          )
                        (reparse-symbol indented_block_body) [31560 37157])
                    ("attachSD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37175 37179])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [37181 37187]))                          
                        :documentation "
        Attach a storage domain to the storage pool.
        This marks the storage domain as \"attached\" and links it
        to the storage pool

        The storage domain may be the hosted engine storage domain, which is
        being monitored but does not belong to the pool yet.

         'sdUUID' - storage domain UUID
        ")
                        (reparse-symbol indented_block_body) [37162 40261])
                    ("forcedDetachSD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40285 40289])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [40291 40297]))                          )
                        (reparse-symbol indented_block_body) [40266 40891])
                    ("detachSD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40909 40913])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [40915 40921]))                          
                        :documentation "
        Detach a storage domain from a storage pool.
        This removes the storage domain entry in the storage pool meta-data
        and leaves the storage domain in 'unattached' status.
         'sdUUID' - storage domain UUID
        ")
                        (reparse-symbol indented_block_body) [40896 42107])
                    ("detachAllDomains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42133 42137]))                          
                        :documentation "
        Detach all domains from pool before destroying pool

        Assumed cluster lock and that SPM is already stopped.
        ")
                        (reparse-symbol indented_block_body) [42112 42753])
                    ("_convertDomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42792 42796])
                            ("domain" variable nil (reparse-symbol function_parameters) [42798 42804])
                            ("targetFormat" variable nil (reparse-symbol function_parameters) [42806 42818]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [42758 43476])
                    ("getFormat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43510 43514]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43481 43555])
                    ("activateSD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43575 43579])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [43581 43587]))                          
                        :documentation "
        Activate a storage domain that is already a member in a storage pool.
        Validate that the storage domain is owned by the storage pool.
         'sdUUID' - storage domain UUID
        ")
                        (reparse-symbol indented_block_body) [43560 44634])
                    ("deactivateSD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44656 44660])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [44662 44668])
                            ("newMsdUUID" variable nil (reparse-symbol function_parameters) [44670 44680])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [44682 44695]))                          
                        :documentation "
        Deactivate a storage domain.
        Validate that the storage domain is owned by the storage pool.
        Change storage domain status to \"Attached\" in the storage pool
        meta-data.

        :param sdUUID: The UUID of the storage domain you want to deactivate.
        :param newMsdUUID: The UUID of the new master storage domain.
        :param masterVersion: new master storage domain version
        ")
                        (reparse-symbol indented_block_body) [44639 47396])
                    ("_finalizePoolUpgradeIfNeeded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47449 47453]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [47401 47805])
                    ("_linkStorageDomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47848 47852])
                            ("linkTarget" variable nil (reparse-symbol function_parameters) [47854 47864])
                            ("linkName" variable nil (reparse-symbol function_parameters) [47866 47874]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [47810 48776])
                    ("_cleanupDomainLinks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48820 48824])
                            ("domain" variable nil (reparse-symbol function_parameters) [48826 48832]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [48781 49035])
                    ("_refreshDomainLinks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49079 49083])
                            ("domain" variable nil (reparse-symbol function_parameters) [49085 49091]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [49040 49441])
                    ("__rebuild" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49475 49479])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [49481 49488])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [49490 49503]))                          
                        :documentation "
        Rebuild storage pool.
        ")
                        (reparse-symbol indented_block_body) [49446 52864])
                    ("refresh" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52896 52900])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [52902 52909])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [52911 52924]))                          
                        :documentation "
        Refresh storage pool.
         'msdUUID' - master storage domain UUID
        ")
                        (reparse-symbol indented_block_body) [52869 53160])
                    ("updateVM" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53178 53182])
                            ("vmList" variable nil (reparse-symbol function_parameters) [53184 53190])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [53192 53198]))                          
                        :documentation "
        Update VMs.
         'vmList' - [{'vm':vmUUID,'ovf','imglist':'imgUUID1,imgUUID2,...'},...]
         'sdUUID' - target domain UUID, if not None, VM Images and the master
                    tree must be located on this domain.
                    If sdUUID is None, the update is on the pool, and therefore
                    the master domain will be updated.
        ")
                        (reparse-symbol indented_block_body) [53165 54992])
                    ("removeVM" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55010 55014])
                            ("vmUUID" variable nil (reparse-symbol function_parameters) [55016 55022])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [55024 55030]))                          
                        :documentation "
        Remove VM.
         'vmUUID' - Virtual machine UUID
        ")
                        (reparse-symbol indented_block_body) [54997 55511])
                    ("extendVolume" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55533 55537])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [55539 55545])
                            ("volumeUUID" variable nil (reparse-symbol function_parameters) [55547 55557])
                            ("size" variable nil (reparse-symbol function_parameters) [55559 55563])
                            ("isShuttingDown" variable nil (reparse-symbol function_parameters) [55565 55579]))                          )
                        (reparse-symbol indented_block_body) [55516 56020])
                    ("reduceVolume" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56042 56046])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [56048 56054])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [56056 56063])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [56065 56072])
                            ("allowActive" variable nil (reparse-symbol function_parameters) [56074 56085]))                          )
                        (reparse-symbol indented_block_body) [56025 56236])
                    ("extendVolumeSize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56262 56266])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [56268 56274])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [56276 56283])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [56285 56292])
                            ("new_capacity" variable nil (reparse-symbol function_parameters) [56294 56306]))                          )
                        (reparse-symbol indented_block_body) [56241 56561])
                    ("getVersion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56596 56600]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [56566 56649])
                    ("getInfo" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56681 56685]))                          
                        :documentation "
        Get storage pool info.
        ")
                        (reparse-symbol indented_block_body) [56654 57537])
                    ("getIsoDomain" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57574 57578]))                          
                        :documentation "
        Get pool's ISO domain if active
        ")
                        (reparse-symbol indented_block_body) [57542 58008])
                    ("setMasterDomain" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58048 58052])
                            ("msdUUID" variable nil (reparse-symbol function_parameters) [58054 58061])
                            ("masterVersion" variable nil (reparse-symbol function_parameters) [58063 58076]))                          
                        :documentation "
        Get the (verified) master domain of this pool.

        'msdUUID' - expected master domain UUID.
        'masterVersion' - expected pool msd version.
        ")
                        (reparse-symbol indented_block_body) [58013 59258])
                    ("updateMonitoringThreads" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59331 59335]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil)
                            ("misc.samplingmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59263 59850])
                    ("getDomains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59885 59889])
                            ("activeOnly" variable nil (reparse-symbol function_parameters) [59891 59901]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59855 60107])
                    ("checkBackupDomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60134 60138]))                          )
                        (reparse-symbol indented_block_body) [60112 60467])
                    ("isActive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60500 60504])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [60506 60512]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60472 60573])
                    ("_getVMsPath" function
                       (:parent "dummy"
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60636 60640])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [60642 60648]))                          
                        :documentation "
        Return VMs dir within SD with sdUUID.
        ")
                        (reparse-symbol indented_block_body) [60605 61033])
                    ("copyImage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61052 61056])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [61058 61064])
                            ("vmUUID" variable nil (reparse-symbol function_parameters) [61066 61072])
                            ("srcImgUUID" variable nil (reparse-symbol function_parameters) [61074 61084])
                            ("srcVolUUID" variable nil (reparse-symbol function_parameters) [61086 61096])
                            ("dstImgUUID" variable nil (reparse-symbol function_parameters) [61098 61108])
                            ("dstVolUUID" variable nil (reparse-symbol function_parameters) [61128 61138])
                            ("descr" variable nil (reparse-symbol function_parameters) [61140 61145])
                            ("dstSdUUID" variable nil (reparse-symbol function_parameters) [61147 61156])
                            ("volType" variable nil (reparse-symbol function_parameters) [61158 61165])
                            ("volFormat" variable nil (reparse-symbol function_parameters) [61167 61176])
                            ("preallocate" variable nil (reparse-symbol function_parameters) [61196 61207])
                            ("postZero" variable nil (reparse-symbol function_parameters) [61209 61217])
                            ("force" variable nil (reparse-symbol function_parameters) [61219 61224])
                            ("discard" variable nil (reparse-symbol function_parameters) [61226 61233]))                          
                        :documentation "
        Creates a new template/volume from VM.
        It does this it by collapse and copy the whole chain
        (baseVolUUID->srcVolUUID).

        :param sdUUID: The UUID of the storage domain in which the image
                       resides.
        :type sdUUID: UUID
        :param vmUUID: The UUID of the virtual machine you want to copy from.
        :type vmUUID: UUID
        :param srcImageUUID: The UUID of the source image you want to copy
                             from.
        :type srcImageUUID: UUID
        :param srcVolUUID: The UUID of the source volume you want to copy from.
        :type srcVolUUID: UUID
        :param dstImageUUID: The UUID of the destination image you want to copy
                             to.
        :type dstImageUUID: UUID
        :param dstVolUUID: The UUID of the destination volume you want to copy
                           to.
        :type dstVolUUID: UUID
        :param descr: The human readable description of the new template.
        :type descr: str
        :param dstSdUUID: The UUID of the destination storage domain you want
                          to copy to.
        :type dstSdUUID: UUID
        :param volType: The volume type of the volume being copied to.
        :type volType: some enum?!
        :param volFormat: The format of the volume being copied to.
        :type volFormat: some enum?!
        :param preallocate: Should the data be preallocated.
        :type preallocate: bool
        :param postZero: ?
        :type postZero: ?
        :param force: Should the copy be forced.
        :type force: bool
        :param discard: Should the destination volume be discarded before
                        copying data to it.
        :type discard: bool

        :returns: a dict containing the UUID of the newly created image.
        :rtype: dict
        ")
                        (reparse-symbol indented_block_body) [61038 63795])
                    ("moveImage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63814 63818])
                            ("srcDomUUID" variable nil (reparse-symbol function_parameters) [63820 63830])
                            ("dstDomUUID" variable nil (reparse-symbol function_parameters) [63832 63842])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [63844 63851])
                            ("vmUUID" variable nil (reparse-symbol function_parameters) [63853 63859])
                            ("op" variable nil (reparse-symbol function_parameters) [63861 63863])
                            ("postZero" variable nil (reparse-symbol function_parameters) [63865 63873])
                            ("force" variable nil (reparse-symbol function_parameters) [63893 63898])
                            ("discard" variable nil (reparse-symbol function_parameters) [63900 63907]))                          
                        :documentation "
        Moves or Copies an image between storage domains within the same
        storage pool.

        :param spUUID: The storage pool where the operation will take place.
        :type spUUID: UUID
        :param srcDomUUID: The UUID of the storage domain you want to copy
                           from.
        :type srcDomUUID: UUID
        :param dstDomUUID: The UUID of the storage domain you want to copy to.
        :type dstDomUUID: UUID
        :param imgUUID: The UUID of the image you want to copy.
        :type imgUUID: UUID
        :param vmUUID: The UUID of the vm that owns the images. ?
        :type vmUUID: UUID
        :param op: The operation code?
        :type op: some enum?
        :param postZero: ?
        :param force: Should the operation be forced.
        :type force: bool
        :param discard: Discard the image before deletion
        :type discard: bool
        ")
                        (reparse-symbol indented_block_body) [63800 65543])
                    ("sparsifyImage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65566 65570])
                            ("tmpSdUUID" variable nil (reparse-symbol function_parameters) [65572 65581])
                            ("tmpImgUUID" variable nil (reparse-symbol function_parameters) [65583 65593])
                            ("tmpVolUUID" variable nil (reparse-symbol function_parameters) [65595 65605])
                            ("dstSdUUID" variable nil (reparse-symbol function_parameters) [65607 65616])
                            ("dstImgUUID" variable nil (reparse-symbol function_parameters) [65640 65650])
                            ("dstVolUUID" variable nil (reparse-symbol function_parameters) [65652 65662]))                          
                        :documentation "
        Reduce sparse image size by converting free space on image to free
        space on host using virt-sparsify.

        :param tmpSdUUID: The UUID of the storage domain where the temporary
                            snapshot of source volume exists.
        :type tmpSdUUID: UUUID
        :param tmpImgUUID: The UUID of the temporary snapshot image.
        :type tmpImgUUID: UUID
        :param tmpVolUUID: The UUID of the temporary snapshot volume that needs
                            to be sparsified.
        :type tmpVolUUID: UUID
        :param dstSdUUID: The UUID of the storage domain where the destination
                            image exists.
        :type dstSdUUID: UUUID
        :param dstImgUUID: The UUID of the destination image to which the
                            destination volume belongs.
        :type dstImgUUID: UUID
        :param dstVolUUID: The UUID of the destination volume for the
                            sparsified volume.
        :type dstVolUUID: UUID
        ")
                        (reparse-symbol indented_block_body) [65548 67561])
                    ("cloneImageStructure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67590 67594])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [67596 67602])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [67604 67611])
                            ("dstSdUUID" variable nil (reparse-symbol function_parameters) [67613 67622]))                          
                        :documentation "
        Clone an image structure from a source domain to a destination domain
        within the same pool.

        :param spUUID: The storage pool where the operation will take place.
        :type spUUID: UUID
        :param sdUUID: The UUID of the storage domain you want to copy from.
        :type sdUUID: UUID
        :param imgUUID: The UUID of the image you want to copy.
        :type imgUUID: UUID
        :param dstSdUUID: The UUID of the storage domain you want to copy to.
        :type dstSdUUID: UUID
        ")
                        (reparse-symbol indented_block_body) [67566 68678])
                    ("syncImageData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68701 68705])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [68707 68713])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [68715 68722])
                            ("dstSdUUID" variable nil (reparse-symbol function_parameters) [68724 68733])
                            ("syncType" variable nil (reparse-symbol function_parameters) [68735 68743]))                          
                        :documentation "
        Synchronize image data between storage domains within same pool.

        :param spUUID: The storage pool where the operation will take place.
        :type spUUID: UUID
        :param sdUUID: The UUID of the storage domain you want to copy from.
        :type sdUUID: UUID
        :param imgUUID: The UUID of the image you want to copy.
        :type imgUUID: UUID
        :param dstSdUUID: The UUID of the storage domain you want to copy to.
        :type dstSdUUID: UUID
        :param syncType: The type of sync to perform (all volumes, etc.).
        :type syncType: syncType enum
        ")
                        (reparse-symbol indented_block_body) [68683 69880])
                    ("uploadImage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69901 69905])
                            ("methodArgs" variable nil (reparse-symbol function_parameters) [69907 69917])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [69919 69925])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [69927 69934])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [69936 69943]))                          
                        :documentation "
        Upload an image to a remote endpoint using the specified method and
        methodArgs.
        ")
                        (reparse-symbol indented_block_body) [69885 70306])
                    ("downloadImage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70329 70333])
                            ("methodArgs" variable nil (reparse-symbol function_parameters) [70335 70345])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [70347 70353])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [70355 70362])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [70364 70371]))                          
                        :documentation "
        Download an image from a remote endpoint using the specified method
        and methodArgs.
        ")
                        (reparse-symbol indented_block_body) [70311 70743])
                    ("uploadImageToStream" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70772 70776])
                            ("methodArgs" variable nil (reparse-symbol function_parameters) [70778 70788])
                            ("callback" variable nil (reparse-symbol function_parameters) [70790 70798])
                            ("startEvent" variable nil (reparse-symbol function_parameters) [70800 70810])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [70812 70818])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [70848 70855])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [70857 70864]))                          
                        :documentation "
        Retrieves an image from to a given file the specified method
        and methodArgs.
        ")
                        (reparse-symbol indented_block_body) [70748 71374])
                    ("downloadImageFromStream" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71407 71411])
                            ("methodArgs" variable nil (reparse-symbol function_parameters) [71413 71423])
                            ("callback" variable nil (reparse-symbol function_parameters) [71425 71433])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [71435 71441])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [71443 71450])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [71484 71491]))                          
                        :documentation "
        Download an image from a stream.
        ")
                        (reparse-symbol indented_block_body) [71379 71880])
                    ("reconcileVolumeChain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71910 71914])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [71916 71922])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [71924 71931])
                            ("leafVolUUID" variable nil (reparse-symbol function_parameters) [71933 71944]))                          
                        :documentation "
        Determines the actual volume chain for an offline image and returns it.
        If the actual chain differs from storage metadata, the metadata is
        corrected to reflect the actual chain.

        :param sdUUID: The UUID of the storage domain that contains the image.
        :type sdUUID: UUID
        :param imgUUID: The UUID of the image to be checked.
        :type imgUUID: UUID
        :param leafVolUUID: The UUID of the last known leaf volume.
        :type leafVolUUID: UUID
        :returns: A dict with a list of volume UUIDs in the corrected chain
        :rtype: dict
        ")
                        (reparse-symbol indented_block_body) [71885 72846])
                    ("prepareMerge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72868 72872])
                            ("subchainInfo" variable nil (reparse-symbol function_parameters) [72874 72886]))                          
                        :documentation "
        This operation is required before performing (cold) merge.
        Prepare merge will calculate the required allocation for base volume,
        extend the base volume or enlarge it (if the size of volume being
        removed is larger than the base size), and mark it as ILLEGAL.
        ")
                        (reparse-symbol indented_block_body) [72851 73239])
                    ("finalizeMerge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73262 73266])
                            ("subchainInfo" variable nil (reparse-symbol function_parameters) [73268 73280]))                          
                        :documentation "
        This operation is required after (cold) merge completes.
        Finalize will update qcow metadata and the vdsm volume metadata to
        reflect that a volume is being removed from the chain.
        ")
                        (reparse-symbol indented_block_body) [73244 73547])
                    ("createVolume" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73569 73573])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [73575 73581])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [73583 73590])
                            ("size" variable nil (reparse-symbol function_parameters) [73592 73596])
                            ("volFormat" variable nil (reparse-symbol function_parameters) [73598 73607])
                            ("preallocate" variable nil (reparse-symbol function_parameters) [73609 73620])
                            ("diskType" variable nil (reparse-symbol function_parameters) [73643 73651])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [73653 73660])
                            ("desc" variable nil (reparse-symbol function_parameters) [73667 73671])
                            ("srcImgUUID" variable nil (reparse-symbol function_parameters) [73697 73707])
                            ("srcVolUUID" variable nil (reparse-symbol function_parameters) [73744 73754])
                            ("initialSize" variable nil (reparse-symbol function_parameters) [73791 73802]))                          
                        :documentation "
        Creates a new volume.

        .. note::
            If the *imgUUID* is **identical** to the *srcImgUUID* the new
            volume will be logically considered a snapshot of the old volume.
            If the *imgUUID* is **different** from the *srcImgUUID* the old
            volume will be logically considered as a template of the new
            volume.

        :param sdUUID: The UUID of the storage domain that contains the volume.
        :type sdUUID: UUID
        :param imgUUID: The UUID of the image that the new volume will have.
        :type imgUUID: UUID
        :param size: The size of the new volume in bytes.
        :type size: int
        :param volFormat: The format of the new volume.
        :type volFormat: some enum ?!
        :param preallocate: Should the volume be preallocated.
        :type preallocate: bool
        :param diskType: The disk type of the new volume.
        :type diskType: :enum:`constants.VOL_DISKTYPE`
        :param volUUID: The UUID of the new volume that will be created.
        :type volUUID: UUID
        :param desc: A human readable description of the new volume.
        :param srcImgUUID: The UUID of the image that resides on the volume
                           that will be the base of the new volume.
        :type srcImgUUID: UUID
        :param srcVolUUID: The UUID of the volume that will be the base of the
                           new volume.
        :type srcVolUUID: UUID
        :param initialSize: The initial size of the volume in case of thin
                            provisioning.
        :type initialSize: int

        :returns: a dict with the UUID of the new volume.
        :rtype: dict
        ")
                        (reparse-symbol indented_block_body) [73552 76626])
                    ("deleteVolume" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76648 76652])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [76654 76660])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [76662 76669])
                            ("volumes" variable nil (reparse-symbol function_parameters) [76671 76678])
                            ("postZero" variable nil (reparse-symbol function_parameters) [76680 76688])
                            ("force" variable nil (reparse-symbol function_parameters) [76690 76695])
                            ("discard" variable nil (reparse-symbol function_parameters) [76697 76704]))                          
                        :documentation "
        Deletes a given volume.

        .. note::
            This function assumes:

                * If more than 1 volume, all volumes are a part of the **same**
                  chain.
                * Given volumes are ordered, so predecessor is deleted before
                  ancestor. ? (might be confused?)

        :param sdUUID: The UUID of the storage domain that contains the volume.
        :type sdUUID: UUID
        :param imgUUID: The UUID of the image that id that the new volume will
                        have.
        :type imgUUID: UUID
        ")
                        (reparse-symbol indented_block_body) [76631 77635])
                    ("purgeImage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77655 77659])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [77661 77667])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [77669 77676])
                            ("volsByImg" variable nil (reparse-symbol function_parameters) [77678 77687])
                            ("discard" variable nil (reparse-symbol function_parameters) [77689 77696]))                          
                        :documentation "
        Free the space taken by a given list of volumes belonging to imgUUID.

        :param domain: The UUID of the relevant domain containing the image.
        :type sdUUID: UUID
        :param imgUUID: The UUID of the relevant image.
        :type imgUUID: UUID
        :param volsByImg: List of the volumes to remove.
        :type volsByImg: list
        :param discard: discard the volumes before removal
        :type discard: bool
        ")
                        (reparse-symbol indented_block_body) [77640 78275])
                    ("deleteImage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78296 78300])
                            ("domain" variable nil (reparse-symbol function_parameters) [78302 78308])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [78310 78317])
                            ("volsByImg" variable nil (reparse-symbol function_parameters) [78319 78328]))                          
                        :documentation "
        Deletes a given list of volumes belonging to imgUUID.

        .. note::
            This function cannot be scheduled as it takes the domain object
            (for performance reasons) instead of the sdUUID.

            Few arguments could be evetually optimzed out and normalized but
            it requires some refactoring.

        :param domain: The object of the domain containing the image.
        :type sdUUID: StorageDomain
        :param imgUUID: The UUID of the relevant image.
        :type imgUUID: UUID
        :param volsByImg: List of the volumes to remove.
        :type volsByImg: list
        ")
                        (reparse-symbol indented_block_body) [78280 79033])
                    ("setVolumeDescription" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79063 79067])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [79069 79075])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [79077 79084])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [79086 79093])
                            ("description" variable nil (reparse-symbol function_parameters) [79095 79106]))                          )
                        (reparse-symbol indented_block_body) [79038 79388])
                    ("setVolumeLegality" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79415 79419])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [79421 79427])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [79429 79436])
                            ("volUUID" variable nil (reparse-symbol function_parameters) [79438 79445])
                            ("legality" variable nil (reparse-symbol function_parameters) [79447 79455]))                          )
                        (reparse-symbol indented_block_body) [79393 79731])
                    ("getVmsList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79751 79755])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [79757 79763]))                          )
                        (reparse-symbol indented_block_body) [79736 79854])
                    ("getVmsInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79874 79878])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [79880 79886])
                            ("vmList" variable nil (reparse-symbol function_parameters) [79888 79894]))                          )
                        (reparse-symbol indented_block_body) [79859 80003])
                    ("validateVolumeChain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80032 80036])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [80038 80044])
                            ("imgUUID" variable nil (reparse-symbol function_parameters) [80046 80053]))                          )
                        (reparse-symbol indented_block_body) [80008 80128])
                    ("extendSD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80146 80150])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [80152 80158])
                            ("devlist" variable nil (reparse-symbol function_parameters) [80160 80167])
                            ("force" variable nil (reparse-symbol function_parameters) [80169 80174]))                          )
                        (reparse-symbol indented_block_body) [80133 80268])
                    ("resizePV" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80286 80290])
                            ("sdUUID" variable nil (reparse-symbol function_parameters) [80292 80298])
                            ("guid" variable nil (reparse-symbol function_parameters) [80300 80304]))                          )
                        (reparse-symbol indented_block_body) [80273 80390])
                    ("setSDDescription" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80416 80420])
                            ("sd" variable nil (reparse-symbol function_parameters) [80422 80424])
                            ("description" variable nil (reparse-symbol function_parameters) [80426 80437]))                          )
                        (reparse-symbol indented_block_body) [80395 80518])
                    ("getAllTasksStatuses" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80547 80551]))                          )
                        (reparse-symbol indented_block_body) [80523 80609])
                    ("getAllTasksInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80634 80638]))                          )
                        (reparse-symbol indented_block_body) [80614 80692])
                    ("create_lease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80738 80742])
                            ("lease" variable nil (reparse-symbol function_parameters) [80744 80749]))                          
                        :documentation "
        SPM task function for creating external lease.

        Succeeds if external lease was created or already exists.
        ")
                        (reparse-symbol indented_block_body) [80721 81226])
                    ("delete_lease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81248 81252])
                            ("lease" variable nil (reparse-symbol function_parameters) [81254 81259]))                          
                        :documentation "
        SPM task function for deleting external lease.

        Succeeds if external lease was deleted or do not exists.
        ")
                        (reparse-symbol indented_block_body) [81231 81730])
                    ("rebuild_leases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81754 81758])
                            ("sd_id" variable nil (reparse-symbol function_parameters) [81760 81765]))                          
                        :documentation "
        SPM task function for rebuilding the external leases volume.
        ")
                        (reparse-symbol indented_block_body) [81735 81936])
                    ("_master_volume_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81980 81984])
                            ("vol" variable nil (reparse-symbol function_parameters) [81986 81989]))                          
                        :decorators 
                          ( ("unsecured" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [81941 82125]))                  
                :type "class")
                nil [2478 82125]))          
      :file "sp.py"
      :pointmax 82125
      :fsize 82124
      :lastmodtime '(23968 6112 216983 568000)
      :unmatched-syntax '((INDENT_BLOCK 67396 . 67561) (NEWLINE 67395 . 67396) (COLON 67394 . 67395) (WITH 67253 . 67257) (COMMA 67316 . 67317) (INDENT_BLOCK 65385 . 65543) (NEWLINE 65384 . 65385) (COLON 65383 . 65384) (WITH 65257 . 65261) (COMMA 65310 . 65311) (INDENT_BLOCK 63485 . 63760) (NEWLINE 63484 . 63485) (COLON 63483 . 63484) (WITH 63349 . 63353) (COMMA 63407 . 63408) (INDENT_BLOCK 54867 . 54992) (NEWLINE 54866 . 54867) (COLON 54865 . 54866) (TRY 54656 . 54659) (AS 54860 . 54862) (INDENT_BLOCK 54522 . 54581) (NEWLINE 54521 . 54522) (COLON 54520 . 54521) (TRY 54406 . 54409) (AS 54516 . 54518) (INDENT_BLOCK 52726 . 52864) (NEWLINE 52725 . 52726) (COLON 52724 . 52725) (AS 52720 . 52722) (EXCEPT 52703 . 52709) (INDENT_BLOCK 52509 . 52691) (NEWLINE 52508 . 52509) (COLON 52507 . 52508) (TRY 52438 . 52441) (AS 52503 . 52505) (INDENT_BLOCK 48239 . 48451) (NEWLINE 48238 . 48239) (COLON 48237 . 48238) (ELSE 48233 . 48237) (INDENT_BLOCK 48037 . 48225) (NEWLINE 48036 . 48037) (COLON 48035 . 48036) (TRY 47949 . 47952) (AS 48031 . 48033) (INDENT_BLOCK 46863 . 47108) (NEWLINE 46862 . 46863) (COLON 46861 . 46862) (ELSE 46857 . 46861) (INDENT_BLOCK 46683 . 46841) (NEWLINE 46682 . 46683) (COLON 46681 . 46682) (TRY 46581 . 46584) (AS 46677 . 46679) (INDENT_BLOCK 36630 . 37157) (NEWLINE 36629 . 36630) (COLON 36628 . 36629) (FINALLY 36621 . 36628) (INDENT_BLOCK 26187 . 26223) (NEWLINE 26186 . 26187) (COLON 26185 . 26186) (FINALLY 26178 . 26185) (INDENT_BLOCK 15415 . 15481) (NEWLINE 15414 . 15415) (COLON 15413 . 15414) (TRY 15275 . 15278) (AS 15409 . 15411) (INDENT_BLOCK 14042 . 14379) (NEWLINE 14041 . 14042) (COLON 14040 . 14041) (TRY 11408 . 11411) (AS 14036 . 14038))))
  :file "!usr!lib!python3.6!site-packages!vdsm!storage!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
